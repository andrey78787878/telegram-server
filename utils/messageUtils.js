const axios = require('axios');
const fs = require('fs');
const path = require('path');

const BOT_TOKEN = '8005595415:AAHxAw2UlTYwhSiEcMu5CpTBRT_3-epH12Q';
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
const GAS_URL = 'https://script.google.com/macros/s/AKfycbwlJy3XL7EF7rcou2fe7O4uC2cVlmeYfM87D-M6ji4KyU0Ds0sp_SiOuT643vIhCwps/exec';

const sendTelegramMessage = async (chatId, text, options = {}) => {
  return axios.post(`${TELEGRAM_API}/sendMessage`, {
    chat_id: chatId,
    text,
    parse_mode: 'HTML',
    ...options
  });
};

const editTelegramMessage = async (chatId, messageId, text, options = {}) => {
  return axios.post(`${TELEGRAM_API}/editMessageText`, {
    chat_id: chatId,
    message_id: messageId,
    text,
    parse_mode: 'HTML',
    ...options
  });
};

const deleteTelegramMessage = async (chatId, messageId) => {
  return axios.post(`${TELEGRAM_API}/deleteMessage`, {
    chat_id: chatId,
    message_id: messageId
  });
};

const sendToGAS = async (data) => {
  try {
    await axios.post(GAS_URL, data);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ GAS:', err.message);
  }
};

const handleStatusChange = async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const status = callbackQuery.data;
  const username = callbackQuery.from.username || '';
  const executor = `@${username}`;

  const originalText = callbackQuery.message.text;
  const numberMatch = originalText.match(/#?(\d+)/);
  const requestNumber = numberMatch ? numberMatch[1] : null;

  if (!requestNumber) {
    console.error('–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
    return;
  }

  if (status === 'start_work') {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const newText = `${originalText}\n\nüü¢ –í —Ä–∞–±–æ—Ç–µ\nüë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executor}`;

    await editTelegramMessage(chatId, messageId, newText, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ', callback_data: 'done' },
            { text: '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏ üì¶', callback_data: 'awaiting' },
            { text: '–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data: 'cancel' }
          ]
        ]
      }
    });

    await sendToGAS({
      message_id: messageId,
      status: '–í —Ä–∞–±–æ—Ç–µ',
      username,
      row: requestNumber
    });
  }

  if (['done', 'awaiting', 'cancel'].includes(status)) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤ ‚Äî –¥–µ–ª–∞–µ—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
    await editTelegramMessage(chatId, messageId, originalText, {
      reply_markup: {
        inline_keyboard: []
      }
    });

    await sendTelegramMessage(chatId, `–í—ã–±—Ä–∞–Ω —Å—Ç–∞—Ç—É—Å: ${status === 'done' ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' : status === 'awaiting' ? '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏' : '–û—Ç–º–µ–Ω–∞'}`, {
      reply_to_message_id: messageId
    });
  }
};

module.exports = {
  sendTelegramMessage,
  editTelegramMessage,
  deleteTelegramMessage,
  sendToGAS,
  handleStatusChange
};
