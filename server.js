const express = require('express');
const axios = require('axios');
const bodyParser = require('body-parser');
const { BOT_TOKEN, GAS_WEB_APP_URL } = require('./config');

const app = express();
app.use(bodyParser.json());

const PORT = process.env.PORT || 3000;
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;

const buildInitialButtons = (messageId) => ({
  inline_keyboard: [[
    {
      text: '–ü—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É',
      callback_data: `in_progress_${messageId}`,
    },
  ]],
});

const buildWorkButtons = (messageId) => ({
  inline_keyboard: [[
    { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `executor_${messageId}` },
    { text: 'üì¶ –û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏', callback_data: `wait_${messageId}` },
    { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel_${messageId}` },
  ]],
});

const sendMessage = async (chatId, text, markup = null, replyTo = null) => {
  const payload = {
    chat_id: chatId,
    text,
    parse_mode: 'HTML',
  };
  if (markup) payload.reply_markup = markup;
  if (replyTo) payload.reply_to_message_id = replyTo;

  const res = await axios.post(`${TELEGRAM_API}/sendMessage`, payload);
  console.log('üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', res.data);
};

app.post('/webhook', async (req, res) => {
  const body = req.body;
  const cb = body.callback_query;

  try {
    if (cb) {
      const data = cb.data;
      const chatId = cb.message.chat.id;
      const user = cb.from.username || cb.from.first_name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';

      const messageId = cb.message.message_id;
      const replyToMessageId = cb.message.reply_to_message?.message_id;
      const targetMessageId = replyToMessageId || messageId;

      const id = Number(data.split('_')[1]); // message_id –∏—Å—Ö–æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏

      console.log('üëâ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞:', data, '| –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user, '| –ò—Å—Ö–æ–¥–Ω—ã–π message_id:', id);

      if (data.startsWith('in_progress_')) {
        await axios.post(GAS_WEB_APP_URL, {
          message_id: id,
          status: '–í —Ä–∞–±–æ—Ç–µ',
          executor: `@${user}`,
        });

        await axios.post(`${TELEGRAM_API}/editMessageReplyMarkup`, {
          chat_id: chatId,
          message_id: targetMessageId,
          reply_markup: buildWorkButtons(id),
        });

        await sendMessage(chatId, `üë§ –ó–∞—è–≤–∫–∞ #${id} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É: @${user}`, null, targetMessageId);
      }

      else if (data.startsWith('executor_')) {
        await axios.post(GAS_WEB_APP_URL, {
          message_id: id,
          status: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
          step: 'start',
          executor: `@${user}`,
        });

        await sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç üì∑', null, targetMessageId);
      }

      else if (data.startsWith('wait_')) {
        await axios.post(GAS_WEB_APP_URL, {
          message_id: id,
          status: '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏',
        });

        await axios.post(`${TELEGRAM_API}/editMessageText`, {
          chat_id: chatId,
          message_id: targetMessageId,
          text: `üì¶ –ó–∞—è–≤–∫–∞ #${id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å: <b>–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏</b>\nüë§ @${user}`,
          parse_mode: 'HTML',
        });
      }

      else if (data.startsWith('cancel_')) {
        await axios.post(GAS_WEB_APP_URL, {
          message_id: id,
          status: '–û—Ç–º–µ–Ω–∞',
        });

        await axios.post(`${TELEGRAM_API}/editMessageText`, {
          chat_id: chatId,
          message_id: targetMessageId,
          text: `‚ùå –ó–∞—è–≤–∫–∞ #${id} –æ—Ç–º–µ–Ω–µ–Ω–∞\nüë§ @${user}`,
          parse_mode: 'HTML',
        });
      }

      return res.sendStatus(200);
    }

    console.log('‚ö†Ô∏è –ù–µ—Ç callback_query:', JSON.stringify(req.body, null, 2));
    res.sendStatus(200);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ webhook:', error.response?.data || error.message);
    res.sendStatus(500);
  }
});

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
