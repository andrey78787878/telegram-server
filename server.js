const express = require('express');
const axios = require('axios');

const app = express();
app.use(express.json());

const BOT_TOKEN = '8005595415:AAHxAw2UlTYwhSiEcMu5CpTBRT_3-epH12Q';
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
const GAS_URL = 'https://script.google.com/macros/s/AKfycbyS1vPiaxs488I28pRPcwG_OMVd3eBRX0dqk2tPc8d8HwASxEUXi3mJsps4o-n033-3/exec';

const EXECUTORS = [
  { text: '@EvelinaB87', value: '@EvelinaB87' },
  { text: '@Olim19', value: '@Olim19' },
  { text: '@Oblayor_04_09', value: '@Oblayor_04_09' },
  { text: '–¢–µ–∫—Å—Ç–æ–≤–æ–π –ø–æ–¥—Ä—è–¥—á–∏–∫', value: '–¢–µ–∫—Å—Ç–æ–≤–æ–π –ø–æ–¥—Ä—è–¥—á–∏–∫' }
];

// ===== Utils =====
const sendMessage = async (chatId, text, replyMarkup, replyToMessageId) => {
  const payload = {
    chat_id: chatId,
    text,
    parse_mode: 'HTML'
  };
  if (replyMarkup) payload.reply_markup = JSON.stringify(replyMarkup);
  if (replyToMessageId) payload.reply_to_message_id = replyToMessageId;

  return axios.post(`${TELEGRAM_API}/sendMessage`, payload);
};

const deleteMessage = async (chatId, messageId) => {
  return axios.post(`${TELEGRAM_API}/deleteMessage`, {
    chat_id: chatId,
    message_id: messageId
  }).catch(() => {});
};

const editMessage = async (chatId, messageId, text, replyMarkup) => {
  const payload = {
    chat_id: chatId,
    message_id: messageId,
    text,
    parse_mode: 'HTML'
  };
  if (replyMarkup) payload.reply_markup = JSON.stringify(replyMarkup);

  return axios.post(`${TELEGRAM_API}/editMessageText`, payload);
};

// ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ Webhook =====
app.post('/', async (req, res) => {
  const body = req.body;

  try {
    // 1. –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É"
    if (body.callback_query) {
      const cb = body.callback_query;
      const data = cb.data;
      const chatId = cb.message.chat.id;
      const messageId = cb.message.message_id;

      if (data.startsWith('start_work_')) {
        const row = data.split('_')[2];

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        const buttons = EXECUTORS.map(exec => [
          { text: exec.text, callback_data: `executor_${exec.value}_${row}_${messageId}` }
        ]);

        const msg = await sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', { inline_keyboard: buttons });
        setTimeout(() => deleteMessage(chatId, msg.data.result.message_id), 60000); // —É–¥–∞–ª–∏–º —á–µ—Ä–µ–∑ 60 —Å–µ–∫
        return res.sendStatus(200);
      }

      // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      if (data.startsWith('executor_')) {
        const [_, executor, row, parentMsgId] = data.split('_');

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ GAS
        await axios.post(GAS_URL, {
          row,
          executor,
          message_id: parentMsgId,
          status: '–í —Ä–∞–±–æ—Ç–µ'
        });

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        await deleteMessage(chatId, cb.message.message_id);

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const statusText = `üü¢ <b>–ó–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ</b>\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executor}`;
        const followupButtons = {
          inline_keyboard: [
            [{ text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `done_${row}_${executor}_${parentMsgId}` }],
            [{ text: 'üïê –û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏', callback_data: `waiting_${row}` }],
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel_${row}` }]
          ]
        };
        await editMessage(chatId, Number(parentMsgId), statusText, followupButtons);
        return res.sendStatus(200);
      }

      // –î—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å ‚Äî done_, waiting_, cancel_
    }

    res.sendStatus(200);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ webhook:', err.message, err.stack);
    res.sendStatus(500);
  }
});

// ===== –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ =====
const PORT = process.env.PORT || 10000;
app.listen(PORT, () => {
  console.log(`‚úÖ Server running on port ${PORT}`);
});
