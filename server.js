require('dotenv').config();
const express = require('express');
const axios = require('axios');

const app = express();
app.use(express.json());

// üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const WEBHOOK_URL = process.env.WEBHOOK_URL;
const PORT = process.env.PORT || 3000;

// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
const requiredEnvVars = ['BOT_TOKEN', 'GAS_WEB_APP_URL', 'TELEGRAM_CHAT_ID', 'WEBHOOK_URL'];
const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);

if (missingVars.length > 0) {
  console.error('‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã:', missingVars.join(', '));
  process.exit(1);
}

const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
const userStates = {};

// ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
async function setTelegramWebhook() {
  try {
    const res = await axios.post(`${TELEGRAM_API}/setWebhook`, {
      url: WEBHOOK_URL,
      drop_pending_updates: true
    });
    console.log('‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', res.data);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞:', err.response?.data || err.message);
    process.exit(1);
  }
}

// üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
async function checkPendingRequestsAndSend() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫...');
    const res = await axios.post(GAS_WEB_APP_URL, { 
      action: 'getPendingMessages' 
    }, {
      timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    });
    
    const pending = res.data;

    if (!pending || !Array.isArray(pending) || pending.length === 0) {
      console.log('‚ÑπÔ∏è –ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.');
      return;
    }

    console.log(`üì® –ù–∞–π–¥–µ–Ω–æ ${pending.length} –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫`);

    for (const [index, rowObj] of pending.entries()) {
      try {
        const {
          row, pizzaria, classif, category, problem,
          initiator, phone, deadline
        } = rowObj;

        const message = `üìç <b>–ó–∞—è–≤–∫–∞ #${row}</b>\n\n` +
          `üçï <b>–ü–∏—Ü—Ü–µ—Ä–∏—è:</b> ${pizzaria || '‚Äî'}\n` +
          `üîß <b>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:</b> ${classif || '‚Äî'}\n` +
          `üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${category || '‚Äî'}\n` +
          `üìã <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> ${problem || '‚Äî'}\n` +
          `üë§ <b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:</b> ${initiator || '‚Äî'}\n` +
          `üìû <b>–¢–µ–ª:</b> ${phone || '‚Äî'}\n` +
          `üïì <b>–°—Ä–æ–∫:</b> ${deadline || '‚Äî'}`;

        const keyboard = {
          inline_keyboard: [
            [{ text: '–ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É üü¢', callback_data: `in_progress:${row}` }]
          ]
        };

        const resMsg = await axios.post(`${TELEGRAM_API}/sendMessage`, {
          chat_id: TELEGRAM_CHAT_ID,
          text: message,
          parse_mode: 'HTML',
          reply_markup: keyboard
        });

        await axios.post(GAS_WEB_APP_URL, {
          action: 'markMessageSent',
          row,
          message_id: resMsg.data.result.message_id
        });

        console.log(`‚úÖ [${index + 1}/${pending.length}] –ó–∞—è–≤–∫–∞ #${row} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞`);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 500));
        
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏:`, err.response?.data || err.message);
      }
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:', err.message);
  }
}

// üîò –†—É—á–Ω–æ–π –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ POST
app.post('/send-pending', async (req, res) => {
  try {
    const { action, secret } = req.body;
    
    if (secret !== process.env.API_SECRET) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }
    
    if (action === 'sendPending') {
      await checkPendingRequestsAndSend();
      return res.json({ status: 'success', message: '–ó–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã' });
    }
    
    res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π action' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ /send-pending:', err);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// üèì –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok',
    services: {
      telegram: !!BOT_TOKEN,
      google_sheets: !!GAS_WEB_APP_URL
    }
  });
});

// üì¶ Telegram-—Ö–µ–Ω–¥–ª–µ—Ä—ã
try {
  const setupTelegramHandlers = require('./telegram-handlers');
  setupTelegramHandlers(app, userStates);
  console.log('‚úÖ Telegram-—Ö–µ–Ω–¥–ª–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
} catch (e) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ telegram-handlers.js:', e);
  process.exit(1);
}

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  
  
