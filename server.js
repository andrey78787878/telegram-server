const express = require('express');
const axios = require('axios');
const { google } = require('googleapis');

const app = express();
app.use(express.json());

// ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
const BOT_TOKEN     = '8005595415:AAHxAw2UlTYwhSiEcMu5CpTBRT_3-epH12Q';
const TELEGRAM_API  = `https://api.telegram.org/bot${BOT_TOKEN}`;
const GAS_URL       = 'https://script.google.com/macros/s/AKfycbx-yVE9Z8lWDVNUoLrGbuEfp7hyvHogQfPLc9ehH6afPmAEIlqLSj6r3RuzTK9NmA4W/exec';
const FOLDER_ID     = '1lYjywHLtUgVRhV9dxW0yIhCJtEfl30ClaYSECjrD8ENyh1YDLEYEvbnegKe4_-HK2QlLWzVF';

// Google Drive –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
const auth  = new google.auth.GoogleAuth({ keyFile: 'service_account.json', scopes: ['https://www.googleapis.com/auth/drive'] });
const drive = google.drive({ version: 'v3', auth });

// –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π (–¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞)
const EXECUTORS = ['@EvelinaB87','@Olim19','@Oblayor_04_09','–¢–µ–∫—Å—Ç–æ–≤–æ–π –ø–æ–¥—Ä—è–¥—á–∏–∫'];

// –°–æ—Å—Ç–æ—è–Ω–∏—è "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ": –∂–¥–µ–º —Ñ–æ—Ç–æ‚Üí—Å—É–º–º—É‚Üí–∫–æ–º–º–µ–Ω—Ç
const userState = {};

// ========== –£—Ç–∏–ª–∏—Ç—ã ==========
async function sendMessage(chatId, text, replyMarkup, replyTo) {
  const payload = { chat_id: chatId, text, parse_mode: 'HTML' };
  if (replyMarkup) payload.reply_markup = replyMarkup;
  if (replyTo)     payload.reply_to_message_id = replyTo;
  return axios.post(`${TELEGRAM_API}/sendMessage`, payload);
}
async function deleteMessage(chatId, messageId) {
  return axios.post(`${TELEGRAM_API}/deleteMessage`, { chat_id: chatId, message_id: messageId }).catch(()=>{});
}
function buildInitialButtons(id) {
  return { inline_keyboard:[[{ text:'–ü—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É', callback_data:`in_progress_${id}` }]] };
}
function buildWorkButtons(id) {
  return { inline_keyboard:[
    [{ text:'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ',        callback_data:`completed_${id}` }],
    [{ text:'üïê –û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏', callback_data:`delayed_${id}`  }],
    [{ text:'‚ùå –û—Ç–º–µ–Ω–∞',           callback_data:`cancelled_${id}` }]
  ]};
}
async function uploadPhotoToDrive(stream, name) {
  const file = await drive.files.create({
    resource:{ name, parents:[FOLDER_ID] },
    media:{ mimeType:'image/jpeg', body: stream },
    fields:'id'
  });
  await drive.permissions.create({ fileId:file.data.id, requestBody:{ role:'reader', type:'anyone' }});
  return `https://drive.google.com/uc?id=${file.data.id}`;
}

// ========== Webhook ==========
app.post('/', async (req, res) => {
  const body = req.body;
  console.log('üîî Webhook body:', JSON.stringify(body).slice(0,200));

  try {
    // --- callback_query ---
    if (body.callback_query) {
      const cb     = body.callback_query;
      const data   = cb.data;
      const chatId = cb.message.chat.id;
      const user   = cb.from.username || cb.from.first_name;

      // 1) –ü—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É
      if (data.startsWith('in_progress_')) {
        const id = data.split('_')[1];
        await axios.post(GAS_URL, { message_id:id, status:'–í —Ä–∞–±–æ—Ç–µ', executor:`@${user}` });
        await axios.post(`${TELEGRAM_API}/editMessageReplyMarkup`, {
          chat_id:chatId, message_id:id, reply_markup: buildWorkButtons(id)
        });
        await sendMessage(chatId, `üë§ –ó–∞—è–≤–∫–∞ #${id} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É: @${user}`, null, id);
        return res.sendStatus(200);
      }

      // 2) –í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚Üí –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É
      if (data.startsWith('completed_')) {
        const id = data.split('_')[1];
        userState[chatId] = { stage:'photo', id, user, temp:[] };
        const m = await sendMessage(chatId,'üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã.');
        userState[chatId].temp.push(m.data.result.message_id);
        return res.sendStatus(200);
      }

      // 3) –û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏ / –û—Ç–º–µ–Ω–∞
      if (data.startsWith('delayed_')||data.startsWith('cancelled_')) {
        const [act,id] = data.split('_');
        const status = act==='delayed'?'–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏':'–û—Ç–º–µ–Ω–µ–Ω–æ';
        await axios.post(GAS_URL, { message_id:id, status });
        await sendMessage(chatId, `üîÑ –ó–∞—è–≤–∫–∞ #${id}: ${status}`, null, id);
        return res.sendStatus(200);
      }

      // --- –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π) ---
      if (data.startsWith('start_work_')) {
        const row = data.split('_')[2];
        const buttons = EXECUTORS.map(exec=>[{ text:exec, callback_data:`executor_${exec}_${row}_${cb.message.message_id}` }]);
        const m = await sendMessage(chatId,'–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è',{ inline_keyboard:buttons });
        setTimeout(()=>deleteMessage(chatId,m.data.result.message_id),60000);
        return res.sendStatus(200);
      }
      if (data.startsWith('executor_')) {
        const [_,exec,row,pId] = data.split('_');
        await axios.post(GAS_URL,{ row, executor:exec, message_id:pId, status:'–í —Ä–∞–±–æ—Ç–µ' });
        await deleteMessage(chatId,cb.message.message_id);
        await axios.post(`${TELEGRAM_API}/editMessageText`, {
          chat_id:chatId,
          message_id:Number(pId),
          text:`üü¢ <b>–ó–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ</b>\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${exec}`,
          parse_mode:'HTML',
          reply_markup:buildWorkButtons(pId)
        });
        return res.sendStatus(200);
      }
    }

    // --- –≠—Ç–∞–ø—ã "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" –ø–æ body.message ---
    if (body.message && userState[body.message.chat.id]) {
      const st     = userState[body.message.chat.id];
      const chatId = body.message.chat.id;

      // –∞) –§–æ—Ç–æ
      if (st.stage==='photo' && body.message.photo) {
        const fileId = body.message.photo.slice(-1)[0].file_id;
        const finfo  = await axios.get(`${TELEGRAM_API}/getFile?file_id=${fileId}`);
        const stream = (await axios.get(`${TELEGRAM_FILE_API}/${finfo.data.result.file_path}`,{responseType:'stream'})).data;
        st.photo = await uploadPhotoToDrive(stream,`done_${st.id}.jpg`);
        st.stage='sum';
        st.temp.push(body.message.message_id);
        const m = await sendMessage(chatId,'üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):');
        st.temp.push(m.data.result.message_id);
        return res.sendStatus(200);
      }
      // –±) –°—É–º–º–∞
      if (st.stage==='sum' && body.message.text) {
        st.sum = body.message.text.replace(/\D/g,'');
        st.stage='comment';
        st.temp.push(body.message.message_id);
        const m = await sendMessage(chatId,'üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:');
        st.temp.push(m.data.result.message_id);
        return res.sendStatus(200);
      }
      // –≤) –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
      if (st.stage==='comment' && body.message.text) {
        const comment = body.message.text;
        st.temp.push(body.message.message_id);

        // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GAS
        await axios.post(GAS_URL,{
          message_id: st.id,
          photo:       st.photo,
          sum:         st.sum,
          comment,
          executor:    `@${st.user}`
        });
        // –ø—Ä–∞–≤–∏–º –∏—Å—Ö–æ–¥–Ω–æ–µ
        await axios.post(`${TELEGRAM_API}/editMessageText`,{
          chat_id:    chatId,
          message_id: st.id,
          text:
            `üìå –ó–∞—è–≤–∫–∞ #${st.id} –∑–∞–∫—Ä—ã—Ç–∞.\n`+
            `üìé –§–æ—Ç–æ: <a href="${st.photo}">—Å—Å—ã–ª–∫–∞</a>\n`+
            `üí∞ –°—É–º–º–∞: ${st.sum} —Å—É–º\n`+
            `üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @${st.user}\n`+
            `‚úÖ –°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–æ`,
          parse_mode:'HTML'
        });
        // —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ
        setTimeout(()=>st.temp.forEach(mid=>deleteMessage(chatId,mid)),60_000);
        delete userState[chatId];
        return res.sendStatus(200);
      }
    }

    // –Ω–∏ –æ–¥–Ω–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
    res.sendStatus(200);
  }
  catch(err){
    console.error('‚ùå WEBHOOK ERROR:', err.stack||err);
    res.sendStatus(500);
  }
});

// –ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫
const PORT = process.env.PORT;
if (!PORT) throw new Error('PORT must be defined');
app.listen(PORT, ()=>console.log(`‚úÖ Server listening on ${PORT}`));

