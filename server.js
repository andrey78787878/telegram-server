// server.js
const express = require('express');
const axios = require('axios');
const { google } = require('googleapis');

const app = express();
// Telegram —à–ª—ë—Ç JSON –∏ –≤ callback_query, –∏ –≤ message
app.use(express.json());

const BOT_TOKEN = '8005595415:AAHxAw2UlTYwhSiEcMu5CpTBRT_3-epH12Q';
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
const GAS_URL    = 'https://script.google.com/macros/s/AKfycbx-yVE9Z8lWDVNUoLrGbuEfp7hyvHogQfPLc9ehH6afPmAEIlqLSj6r3RuzTK9NmA4W/exec';

const folderId = '1lYjywHLtUgVRhV9dxW0yIhCJtEfl30ClaYSECjrD8ENyh1YDLEYEvbnegKe4_-HK2QlLWzVF';
const SCOPES = ['https://www.googleapis.com/auth/drive'];
const auth   = new google.auth.GoogleAuth({ keyFile: 'service_account.json', scopes: SCOPES });
const drive  = google.drive({ version: 'v3', auth });

// —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
const EXECUTORS = [
  '@EvelinaB87', '@Olim19', '@Oblayor_04_09', '–¢–µ–∫—Å—Ç–æ–≤–æ–π –ø–æ–¥—Ä—è–¥—á–∏–∫'
];

// —Ö—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è ¬´–≤—ã–ø–æ–ª–Ω–µ–Ω–æ¬ª –ø–æ chatId
const userState = {};

// —É—Ç–∏–ª–∏—Ç—ã
async function sendMessage(chatId, text, replyMarkup, replyTo) {
  const payload = { chat_id: chatId, text, parse_mode: 'HTML' };
  if (replyMarkup) payload.reply_markup = replyMarkup;
  if (replyTo)     payload.reply_to_message_id = replyTo;
  return axios.post(`${TELEGRAM_API}/sendMessage`, payload);
}
function buildInitialButtons(id) {
  return { inline_keyboard: [[{ text:'–ü—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É', callback_data:`in_progress_${id}` }]] };
}
function buildWorkButtons(id) {
  return { inline_keyboard: [
    [{ text:'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ',         callback_data:`completed_${id}` }],
    [{ text:'üïê –û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏',  callback_data:`delayed_${id}` }],
    [{ text:'‚ùå –û—Ç–º–µ–Ω–∞',            callback_data:`cancelled_${id}` }]
  ]};
}
async function deleteMessage(chatId, msgId){
  return axios.post(`${TELEGRAM_API}/deleteMessage`, { chat_id:chatId, message_id:msgId }).catch(()=>{});
}


// –æ—Å–Ω–æ–≤–Ω–æ–π webhook
app.post('/', async (req, res) => {
  const body = req.body;
  console.log('üîî Webhook body:', JSON.stringify(body).slice(0, 200));

  try {
    // === callback_query ===
    if (body.callback_query) {
      const cb       = body.callback_query;
      const data     = cb.data;
      const chatId   = cb.message.chat.id;
      const msgId    = cb.message.message_id;
      const user     = cb.from.username || cb.from.first_name;

      // ¬´–ü—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É¬ª
      if (data.startsWith('in_progress_')) {
        const id = data.split('_')[1];
        // –≤ Google Sheet
        await axios.post(GAS_URL, { message_id:id, status:'–í —Ä–∞–±–æ—Ç–µ', executor:`@${user}` });
        // –∑–∞–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞ ¬´–≤—ã–ø–æ–ª–Ω–µ–Ω–æ/–∂–¥—ë—Ç/–æ—Ç–º–µ–Ω–∞¬ª
        await axios.post(`${TELEGRAM_API}/editMessageReplyMarkup`, {
          chat_id:chatId, message_id:id,
          reply_markup: buildWorkButtons(id)
        });
        // —É–≤–µ–¥–æ–º–∏—Ç—å
        await sendMessage(chatId,
          `üë§ –ó–∞—è–≤–∫–∞ #${id} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É: @${user}`, null, id
        );
        return res.sendStatus(200);
      }

      // ¬´–í—ã–ø–æ–ª–Ω–µ–Ω–æ¬ª
      if (data.startsWith('completed_')) {
        const id = data.split('_')[1];
        userState[chatId] = { stage:'photo', id, user, temp:[] };
        const m = await sendMessage(chatId,'üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã.');
        userState[chatId].temp.push(m.data.result.message_id);
        return res.sendStatus(200);
      }

      // ¬´–æ–∂–∏–¥–∞–µ—Ç¬ª / ¬´–æ—Ç–º–µ–Ω–∞¬ª
      if (data.startsWith('delayed_')||data.startsWith('cancelled_')) {
        const [act, id] = data.split('_');
        const status = act==='delayed_'?'–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏':'–û—Ç–º–µ–Ω–µ–Ω–æ';
        await axios.post(GAS_URL, { message_id:id, status });
        await sendMessage(chatId, `üîÑ –ó–∞—è–≤–∫–∞ #${id}: ${status}`, null, id);
        return res.sendStatus(200);
      }
    }

    // === ¬´–í—ã–ø–æ–ª–Ω–µ–Ω–æ¬ª: —Ñ–æ—Ç–æ / —Å—É–º–º–∞ / –∫–æ–º–º–µ–Ω—Ç ===
    if (body.message && userState[body.message.chat.id]) {
      const st = userState[body.message.chat.id];
      const chatId = body.message.chat.id;

      // —Ñ–æ—Ç–æ
      if (st.stage==='photo' && body.message.photo) {
        const fileId = body.message.photo.slice(-1)[0].file_id;
        const fInfo = await axios.get(`${TELEGRAM_API}/getFile?file_id=${fileId}`);
        const stream = (await axios.get(`https://api.telegram.org/file/bot${BOT_TOKEN}/${fInfo.data.result.file_path}`,{responseType:'stream'})).data;
        // –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ Drive
        const up = await drive.files.create({
          resource:{ name:`done_${st.id}.jpg`, parents:[folderId] },
          media:{ mimeType:'image/jpeg', body:stream },
          fields:'id'
        });
        await drive.permissions.create({fileId:up.data.id,requestBody:{role:'reader',type:'anyone'}});
        st.photo = `https://drive.google.com/uc?id=${up.data.id}`;

        st.stage = 'sum';
        st.temp.push(body.message.message_id);
        const m = await sendMessage(chatId,'üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):');
        st.temp.push(m.data.result.message_id);
        return res.sendStatus(200);
      }

      // —Å—É–º–º–∞
      if (st.stage==='sum' && body.message.text) {
        st.sum = body.message.text.replace(/[^\d]/g,'');
        st.stage='comment';
        st.temp.push(body.message.message_id);
        const m = await sendMessage(chatId,'üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:');
        st.temp.push(m.data.result.message_id);
        return res.sendStatus(200);
      }

      // –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
      if (st.stage==='comment' && body.message.text) {
        const comment = body.message.text;
        st.temp.push(body.message.message_id);
        // –ø–∏—à–µ–º –≤—Å—ë –≤ Google
        await axios.post(GAS_URL,{
          message_id:st.id,
          photo:st.photo,
          sum:st.sum,
          comment,
          executor:`@${st.user}`
        });
        // —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await axios.post(`${TELEGRAM_API}/editMessageText`,{
          chat_id:chatId,
          message_id:st.id,
          text:
            `üìå –ó–∞—è–≤–∫–∞ #${st.id} –∑–∞–∫—Ä—ã—Ç–∞.\n`+
            `üìé –§–æ—Ç–æ: <a href="${st.photo}">—Å—Å—ã–ª–∫–∞</a>\n`+
            `üí∞ –°—É–º–º–∞: ${st.sum} —Å—É–º\n`+
            `üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @${st.user}\n`+
            `‚úÖ –°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–æ`,
          parse_mode:'HTML'
        });
        // —á–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
        setTimeout(()=>st.temp.forEach(mid=>deleteMessage(chatId,mid)),60_000);
        delete userState[chatId];
        return res.sendStatus(200);
      }
    }

    // –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ
    res.sendStatus(200);
  }
  catch(err){
    console.error('‚ùå WEBHOOK ERROR:',err.stack||err);
    res.sendStatus(500);
  }
});

// –ø–æ—Ä—Ç –∏–∑ Render
const PORT = process.env.PORT;
if (!PORT) throw new Error('PORT must be defined');
app.listen(PORT,()=>console.log(`‚úÖ Server listening on ${PORT}`));
