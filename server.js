const express = require('express');
const axios = require('axios');
const bodyParser = require('body-parser');
require('dotenv').config();

const app = express();
app.use(bodyParser.json());

const PORT = process.env.PORT || 3000;
const BOT_TOKEN = process.env.BOT_TOKEN;
const GAS_URL = process.env.GAS_WEB_APP_URL;
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;

// ======== –ö–ù–û–ü–ö–ò ========
const buildInitialButtons = (messageId) => ({
  inline_keyboard: [[
    {
      text: '–ü—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É',
      callback_data: `in_progress_${messageId}`,
    },
  ]],
});

const buildWorkButtons = (messageId) => ({
  inline_keyboard: [[
    { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `executor_${messageId}` },
    { text: 'üì¶ –û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏', callback_data: `wait_${messageId}` },
    { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel_${messageId}` },
  ]],
});

// ======== –£–¢–ò–õ–ò–¢–´ ========
const sendMessage = async (chatId, text, markup = null, replyTo = null) => {
  try {
    const payload = {
      chat_id: chatId,
      text,
      parse_mode: 'HTML',
    };
    if (markup) payload.reply_markup = markup;
    if (replyTo) payload.reply_to_message_id = replyTo;

    await axios.post(`${TELEGRAM_API}/sendMessage`, payload);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.response?.data || error.message);
  }
};

// ======== –í–ï–ë–•–£–ö ========
app.post('/webhook', async (req, res) => {
  const body = req.body;
  console.log('üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram');
  console.log(JSON.stringify(body, null, 2));

  try {
    const cb = body.callback_query;
    if (!cb || !cb.message || !cb.data) {
      console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_query');
      return res.sendStatus(200);
    }

    const { data } = cb;
    const chatId = cb.message.chat.id;
    const user = cb.from.username || cb.from.first_name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    const messageId = cb.message.message_id;
    const replyToMessageId = cb.message.reply_to_message?.message_id;
    const targetMessageId = replyToMessageId || messageId;

    const idMatch = data.match(/_(\d+)$/);
    if (!idMatch) {
      console.warn('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data');
      return res.sendStatus(200);
    }
    const id = Number(idMatch[1]);

    console.log(`‚û°Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏: ${data}, –∑–∞—è–≤–∫–∞ ID: ${id}, –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @${user}`);

    if (data.startsWith('in_progress_')) {
      await axios.post(GAS_URL, {
        message_id: id,
        status: '–í —Ä–∞–±–æ—Ç–µ',
        executor: `@${user}`,
      });

      await axios.post(`${TELEGRAM_API}/editMessageReplyMarkup`, {
        chat_id: chatId,
        message_id: targetMessageId,
        reply_markup: buildWorkButtons(id),
      });

      await sendMessage(chatId, `üë§ –ó–∞—è–≤–∫–∞ #${id} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É: @${user}`, null, targetMessageId);
    }

    else if (data.startsWith('executor_')) {
      await axios.post(GAS_URL, {
        message_id: id,
        status: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
        step: 'start',
        executor: `@${user}`,
      });

      await sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç üì∑', null, targetMessageId);
    }

    else if (data.startsWith('wait_')) {
      await axios.post(GAS_URL, {
        message_id: id,
        status: '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏',
      });

      await axios.post(`${TELEGRAM_API}/editMessageText`, {
        chat_id: chatId,
        message_id: targetMessageId,
        text: `üì¶ –ó–∞—è–≤–∫–∞ #${id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å: <b>–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏</b>\nüë§ @${user}`,
        parse_mode: 'HTML',
      });
    }

    else if (data.startsWith('cancel_')) {
      await axios.post(GAS_URL, {
        message_id: id,
        status: '–û—Ç–º–µ–Ω–∞',
      });

      await axios.post(`${TELEGRAM_API}/editMessageText`, {
        chat_id: chatId,
        message_id: targetMessageId,
        text: `‚ùå –ó–∞—è–≤–∫–∞ #${id} –æ—Ç–º–µ–Ω–µ–Ω–∞\nüë§ @${user}`,
        parse_mode: 'HTML',
      });
    }

    return res.sendStatus(200);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ webhook:', error.response?.data || error.message);
    return res.sendStatus(500);
  }
});

// ======== –°–¢–ê–†–¢ –°–ï–†–í–ï–†–ê ========
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
