// ‚úÖ server.js ‚Äî –ø–æ–ª–Ω—ã–π Telegram –±–æ—Ç —Å –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–µ–º –∑–∞—è–≤–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã

require('dotenv').config();
const express = require('express');
const axios = require('axios');

const app = express();
app.use(express.json());

const BOT_TOKEN = process.env.BOT_TOKEN;
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;
const PORT = process.env.PORT || 3000;

const userStates = {}; // –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π

function tg(method, data) {
  return axios.post(`${TELEGRAM_API}/${method}`, data);
}

// === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ === //
app.post('/webhook', async (req, res) => {
  const body = req.body;

  try {
    if (body.callback_query) return await handleCallback(body.callback_query, res);
    if (body.message) return await handleMessage(body.message, res);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ webhook:', err);
  }

  res.sendStatus(200);
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ === //
async function handleCallback(query, res) {
  const { data, message, from, id } = query;
  const [action, row, extra] = data.split(':');
  const chat_id = message.chat.id;
  const message_id = message.message_id;
  const username = '@' + (from.username || from.first_name);

  await tg('answerCallbackQuery', { callback_query_id: id });

  if (action === 'select_executor') {
    const { data: rowData } = await axios.get(`${GAS_WEB_APP_URL}?get=row&row=${row}`);

    const updated =
      `üìå –ó–∞—è–≤–∫–∞ #${row}\n\n` +
      `üè¨ –ü–∏—Ü—Ü–µ—Ä–∏—è: ${rowData.pizzeria || '‚Äî'}\n` +
      `üõ† –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: ${rowData.classification || '‚Äî'}\n` +
      `üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${rowData.category || '‚Äî'}\n` +
      `üìù –°—É—Ç—å: ${rowData.problem || '‚Äî'}\n\n` +
      `üü¢ –í —Ä–∞–±–æ—Ç–µ\nüë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${extra}`;

    const reply_markup = {
      inline_keyboard: [[
        { text: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ', callback_data: `done:${row}:${extra}` },
        { text: '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏ ‚è≥', callback_data: `delayed:${row}:${extra}` },
        { text: '–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data: `cancel:${row}:${extra}` }
      ]]
    };

    await tg('editMessageText', { chat_id, message_id, text: updated, parse_mode: 'HTML', reply_markup });

    await axios.post(GAS_WEB_APP_URL, {
      data: { action: 'in_progress', row, message_id, executor: extra }
    });

    await tg('sendMessage', {
      chat_id,
      reply_to_message_id: message_id,
      text: `üìå –ó–∞—è–≤–∫–∞ #${row} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º ${extra}`
    });

    return res.sendStatus(200);
  }

  if (action === 'done') {
    userStates[from.id] = {
      step: 'awaiting_photo', row, executor: extra, message_id, chat_id, service: []
    };
    const msg = await tg('sendMessage', {
      chat_id,
      reply_to_message_id: message_id,
      text: 'üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç'
    });
    userStates[from.id].service.push(msg.data.result.message_id);
    return res.sendStatus(200);
  }

  if (action === 'delayed' || action === 'cancel') {
    const status = action === 'delayed' ? '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏' : '–û—Ç–º–µ–Ω–µ–Ω–∞';
    const updated = `${message.text}\n\nüìå –°—Ç–∞—Ç—É—Å: ${status}\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${extra}`;
    await tg('editMessageText', { chat_id, message_id, text: updated, parse_mode: 'HTML' });

    await axios.post(GAS_WEB_APP_URL, {
      data: { action, row, executor: extra }
    });
    return res.sendStatus(200);
  }
}

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è === //
async function handleMessage(message, res) {
  const { chat, text, photo, from, message_id } = message;
  const state = userStates[from.id];
  if (!state) return res.sendStatus(200);

  const { step, row, executor, chat_id, message_id: masterMsgId, service } = state;

  if (step === 'awaiting_photo' && photo) {
    const file_id = photo.slice(-1)[0].file_id;
    const resFile = await axios.get(`${TELEGRAM_API}/getFile?file_id=${file_id}`);
    const fileUrl = `${TELEGRAM_FILE_API}/${resFile.data.result.file_path}`;
    userStates[from.id].photo = fileUrl;
    userStates[from.id].step = 'awaiting_sum';

    const resp = await tg('sendMessage', {
      chat_id: chat.id,
      text: 'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–≤ —Å—É–º–∞—Ö)'
    });
    service.push(resp.data.result.message_id);
    return res.sendStatus(200);
  }

  if (step === 'awaiting_sum') {
    if (!/^[0-9]+$/.test(text)) {
      await tg('sendMessage', {
        chat_id: chat.id,
        text: '‚ùó –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏'
      });
      return res.sendStatus(200);
    }
    userStates[from.id].sum = text.trim();
    userStates[from.id].step = 'awaiting_comment';

    const resp = await tg('sendMessage', {
      chat_id: chat.id,
      text: '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ:'
    });
    service.push(resp.data.result.message_id);
    return res.sendStatus(200);
  }

  if (step === 'awaiting_comment') {
    const comment = text.trim();
    const { photo, sum } = userStates[from.id];

    await axios.post(GAS_WEB_APP_URL, {
      data: {
        action: 'complete', row, photoUrl: photo, sum, comment, executor, message_id: masterMsgId
      }
    });

    const { data: rowData } = await axios.get(`${GAS_WEB_APP_URL}?get=row&row=${row}`);

    const finalText =
      `üìå –ó–∞—è–≤–∫–∞ #${row} –∑–∞–∫—Ä—ã—Ç–∞.\n\n` +
      `üè¨ –ü–∏—Ü—Ü–µ—Ä–∏—è: ${rowData.pizzeria || '‚Äî'}\n` +
      `üõ† –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: ${rowData.classification || '‚Äî'}\n` +
      `üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${rowData.category || '‚Äî'}\n` +
      `üìù –°—É—Ç—å: ${rowData.problem || '‚Äî'}\n\n` +
      `üìé –§–æ—Ç–æ: <a href=\"${photo}\">—Å—Å—ã–ª–∫–∞</a>\n` +
      `üí∞ –°—É–º–º–∞: ${sum} —Å—É–º\n` +
      `üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executor}\n` +
      `‚úÖ –°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–æ\n` +
      `‚è∞ –ü—Ä–æ—Å—Ä–æ—á–∫–∞: ${rowData.delay || 0} –¥–Ω.`;

    await tg('editMessageText', {
      chat_id: chat.id,
      message_id: masterMsgId,
      text: finalText,
      parse_mode: 'HTML'
    });

    await tg('sendMessage', {
      chat_id: chat.id,
      reply_to_message_id: masterMsgId,
      text: `‚úÖ –ó–∞—è–≤–∫–∞ #${row} –∑–∞–∫—Ä—ã—Ç–∞.`
    });

    setTimeout(() => {
      for (const id of [...service, message_id]) {
        tg('deleteMessage', { chat_id: chat.id, message_id: id }).catch(() => {});
      }
    }, 60000);

    delete userStates[from.id];
    return res.sendStatus(200);
  }
}

// === –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ === //
app.listen(PORT, () => console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
