require('dotenv').config();
const express = require('express');
const axios = require('axios');

const app = express();
app.use(express.json());

const BOT_TOKEN = process.env.BOT_TOKEN;
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const PORT = process.env.PORT || 3000;

const userStates = {};

// üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
async function checkPendingRequestsAndSend() {
  try {
    const res = await axios.post(GAS_WEB_APP_URL, { action: 'getPendingMessages' });
    const pending = res.data;

    if (!pending || !Array.isArray(pending)) {
      console.log('‚ÑπÔ∏è –ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.');
      return;
    }

    for (const rowObj of pending) {
      const {
        row, pizzaria, classif, category, problem,
        initiator, phone, deadline
      } = rowObj;

      const message = `üìç <b>–ó–∞—è–≤–∫–∞ #${row}</b>\n\nüçï <b>–ü–∏—Ü—Ü–µ—Ä–∏—è:</b> ${pizzaria}\nüîß <b>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:</b> ${classif}\nüìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${category}\nüìã <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> ${problem}\nüë§ <b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:</b> ${initiator}\nüìû <b>–¢–µ–ª:</b> ${phone}\nüïì <b>–°—Ä–æ–∫:</b> ${deadline}`;

      const keyboard = {
        inline_keyboard: [
          [{ text: '–ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É üü¢', callback_data: `in_progress:${row}` }]
        ]
      };

      try {
        const resMsg = await axios.post(`${TELEGRAM_API}/sendMessage`, {
          chat_id: TELEGRAM_CHAT_ID,
          text: message,
          parse_mode: 'HTML',
          reply_markup: keyboard
        });

        const message_id = resMsg.data.result.message_id;

        await axios.post(GAS_WEB_APP_URL, {
          action: 'markMessageSent',
          row,
          message_id
        });

        console.log(`‚úÖ –ó–∞—è–≤–∫–∞ #${row} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞`);
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ #${row}:`, err.response?.data || err.message);
      }
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:', err.response?.data || err.message);
  }
}

// üöÄ –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
checkPendingRequestsAndSend();

// üîä –ó–∞–ø—É—Å–∫ Express —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

const setupTelegramHandlers = require('./telegram-handlers');
setupTelegramHandlers(app, userStates);

// üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è cron (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö)
module.exports = { checkPendingRequestsAndSend };
