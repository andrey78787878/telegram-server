const express = require('express');
const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');
const { createButtonsForStatus } = require('./messageUtils');

const app = express();
app.use(express.json());

const BOT_TOKEN = '8005595415:AAHxAw2UlTYwhSiEcMu5CpTBRT_3-epH12Q';
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
const GAS_URL = 'https://script.google.com/macros/s/AKfycbyiYYTXGbezDWwKT9kuHoVE5NjZ1C2dKmDQRwUTwITI0p3m9wF-ZI9L2cbh_O9VbQH0/exec';

const userStates = {}; // { [chatId]: { step, row, message_id, sum, username, comment, photoUrl, serviceMessages: [] } }

app.post('/webhook', async (req, res) => {
  const body = req.body;

  try {
    // === CALLBACK ===
    if (body.callback_query) {
      const { data, message, from } = body.callback_query;
      const chatId = message.chat.id;
      const messageId = message.message_id;
      const username = from.username || '';
      const fullMessage = message.text;

      const rowMatch = fullMessage.match(/–ó–∞—è–≤–∫–∞ ‚Ññ(\d+)/);
      const row = rowMatch ? rowMatch[1] : null;

      if (data === 'in_progress') {
        const newText = `${fullMessage}\n\nüü¢ –í —Ä–∞–±–æ—Ç–µ\nüë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @${username}`;
        const buttons = createButtonsForStatus(row);

        await axios.post(`${TELEGRAM_API}/editMessageText`, {
          chat_id: chatId,
          message_id: messageId,
          text: newText,
          reply_markup: { inline_keyboard: buttons }
        });

        await axios.post(GAS_URL, {
          status: '–í —Ä–∞–±–æ—Ç–µ',
          row,
          username
        });

        return res.sendStatus(200);
      }

      if (data === 'completed') {
        userStates[chatId] = {
          step: 'waiting_photo',
          row,
          message_id: messageId,
          username,
          serviceMessages: []
        };

        const reply = await axios.post(`${TELEGRAM_API}/sendMessage`, {
          chat_id: chatId,
          text: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã.'
        });

        userStates[chatId].serviceMessages.push(reply.data.result.message_id);
        return res.sendStatus(200);
      }

      if (data === 'delayed' || data === 'cancelled') {
        const statusText = data === 'delayed' ? '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏' : '–û—Ç–º–µ–Ω–µ–Ω–æ';
        await axios.post(GAS_URL, { status: statusText, row, username });

        await axios.post(`${TELEGRAM_API}/sendMessage`, {
          chat_id: chatId,
          text: `–ó–∞—è–≤–∫–∞ ‚Ññ${row} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å "${statusText}".`
        });

        return res.sendStatus(200);
      }

      return res.sendStatus(200);
    }

    // === PHOTO ===
    if (body.message && body.message.photo) {
      const chatId = body.message.chat.id;
      const state = userStates[chatId];

      if (state?.step === 'waiting_photo') {
        const photoArray = body.message.photo;
        const fileId = photoArray[photoArray.length - 1].file_id;

        const fileInfo = await axios.get(`${TELEGRAM_API}/getFile?file_id=${fileId}`);
        const filePath = fileInfo.data.result.file_path;

        const fileUrl = `${TELEGRAM_FILE_API}/${filePath}`;
        const fileExt = path.extname(filePath);
        const localFilePath = path.join(__dirname, `photo_${Date.now()}${fileExt}`);

        const photoStream = await axios.get(fileUrl, { responseType: 'stream' });
        const writer = fs.createWriteStream(localFilePath);
        photoStream.data.pipe(writer);
        await new Promise(resolve => writer.on('finish', resolve));

        const formData = new FormData();
        formData.append('photo', fs.createReadStream(localFilePath));
        formData.append('row', state.row);
        formData.append('username', state.username);
        formData.append('message_id', state.message_id);

        const uploadResponse = await axios.post(GAS_URL, formData, {
          headers: formData.getHeaders()
        });

        fs.unlinkSync(localFilePath);

        userStates[chatId].photoUrl = uploadResponse.data.photoUrl; // —Å—Å—ã–ª–∫–∞ –æ—Ç GAS
        userStates[chatId].step = 'waiting_sum';

        const reply = await axios.post(`${TELEGRAM_API}/sendMessage`, {
          chat_id: chatId,
          text: '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):'
        });

        userStates[chatId].serviceMessages.push(body.message.message_id, reply.data.result.message_id);
        return res.sendStatus(200);
      }
    }

    // === TEXT ===
    if (body.message && body.message.text) {
      const chatId = body.message.chat.id;
      const text = body.message.text;
      const state = userStates[chatId];

      if (!state) return res.sendStatus(200);

      if (state.step === 'waiting_sum') {
        userStates[chatId].sum = text;
        userStates[chatId].step = 'waiting_comment';

        const reply = await axios.post(`${TELEGRAM_API}/sendMessage`, {
          chat_id: chatId,
          text: '–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ "-" –µ—Å–ª–∏ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è):'
        });

        userStates[chatId].serviceMessages.push(body.message.message_id, reply.data.result.message_id);
        return res.sendStatus(200);
      }

      if (state.step === 'waiting_comment') {
        state.comment = text;

        const payload = {
          row: state.row,
          username: state.username,
          sum: state.sum,
          comment: state.comment,
          message_id: state.message_id
        };

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ GAS
        await axios.post(GAS_URL, payload);

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫—É
        const overdueResp = await axios.post(GAS_URL, { row: state.row, action: 'get_overdue' });
        const overdue = overdueResp.data.overdue || '0';

        const finalText = `
üìå –ó–∞—è–≤–∫–∞ ‚Ññ${state.row} –∑–∞–∫—Ä—ã—Ç–∞.
üìé –§–æ—Ç–æ: <a href="${state.photoUrl}">—Å—Å—ã–ª–∫–∞</a>
üí∞ –°—É–º–º–∞: ${state.sum} —Å—É–º
üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @${state.username}
‚úÖ –°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–æ
‚è∞ –ü—Ä–æ—Å—Ä–æ—á–∫–∞: ${overdue} –¥–Ω.
        `.trim();

        // –û—Ç–≤–µ—Ç–æ–º –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await axios.post(`${TELEGRAM_API}/sendMessage`, {
          chat_id: chatId,
          text: finalText,
          parse_mode: 'HTML',
          reply_to_message_id: state.message_id
        });

        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await axios.post(`${TELEGRAM_API}/editMessageText`, {
          chat_id: chatId,
          message_id: state.message_id,
          text: finalText,
          parse_mode: 'HTML'
        });

        // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const allToDelete = [...(state.serviceMessages || []), body.message.message_id];
        allToDelete.forEach(msgId => {
          setTimeout(() => {
            axios.post(`${TELEGRAM_API}/deleteMessage`, {
              chat_id: chatId,
              message_id: msgId
            }).catch(() => { });
          }, 60000); // —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
        });

        delete userStates[chatId];
        return res.sendStatus(200);
      }
    }

    res.sendStatus(200);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err.message);
    res.sendStatus(500);
  }
});

app.listen(3000, () => {
  console.log('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000');
});
