app.post('/webhook', async (req, res) => {
  const body = req.body;

  try {
    // === 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ (callback_query)
    if (body.callback_query) {
      console.log('‚û°Ô∏è –ü–æ–ª—É—á–µ–Ω callback_query:', body.callback_query);

      const dataRaw = body.callback_query.data;
      const chatId = body.callback_query.message.chat.id;
      const messageId = body.callback_query.message.message_id;
      const username = '@' + (body.callback_query.from.username || body.callback_query.from.first_name);

      // --- –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞: –≤—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      if (dataRaw.startsWith('select_executor:')) {
        const parts = dataRaw.split(':');
        const row = parts[1];
        const executor = parts[2];

        if (!row || !executor) {
          console.warn("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç select_executor:", dataRaw);
          return res.sendStatus(200);
        }

        console.log(`üë§ –í—ã–±—Ä–∞–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ${executor} –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}`);

        await axios.post(GAS_WEB_APP_URL, {
          data: {
            action: 'markInProgress',
            row,
            executor
          }
        });

        await editMessageText(
          chatId,
          messageId,
          `üü¢ –ó–∞—è–≤–∫–∞ #${row} –≤ —Ä–∞–±–æ—Ç–µ.\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executor}`,
          buildFollowUpButtons(row)
        );

        return res.sendStatus(200);
      }

      // --- –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –æ—Ç–º–µ–Ω–∞, –∑–∞–¥–µ—Ä–∂–∫–∞)
      let data;
      try {
        data = JSON.parse(dataRaw);
      } catch (e) {
        console.warn("‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ callback_data:", dataRaw);
        return res.sendStatus(200);
      }

      const { action, row, messageId: originalMessageId } = data;

      if (action === 'in_progress' && row) {
        await axios.post(GAS_WEB_APP_URL, {
          data: {
            action: 'markInProgress',
            row,
            executor: username
          }
        });

        await editMessageText(
          chatId,
          messageId,
          `üü¢ –ó–∞—è–≤–∫–∞ #${row} –≤ —Ä–∞–±–æ—Ç–µ.\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${username}`,
          buildFollowUpButtons(row)
        );

        return res.sendStatus(200);
      }

      if (action === 'completed' && row) {
        userStates[chatId] = { stage: 'awaiting_photo', row, messageId, username };
        console.log(`üì∏ –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ –æ—Ç ${username} –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}`);
        await askForPhoto(chatId);
        return res.sendStatus(200);
      }

      if ((action === 'delayed' || action === 'cancelled') && row) {
        await axios.post(GAS_WEB_APP_URL, {
          data: {
            action,
            row,
            executor: username
          }
        });

        await editMessageText(
          chatId,
          messageId,
          `üìå –ó–∞—è–≤–∫–∞ #${row}\n‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: ${action === 'delayed' ? '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏' : '–û—Ç–º–µ–Ω–µ–Ω–∞'}\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${username}`
        );

        return res.sendStatus(200);
      }
    }

    // === 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ñ–æ—Ç–æ, —Å—É–º–º–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
    else if (body.message) {
      console.log('‚úâÔ∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', body.message);

      const chatId = body.message.chat.id;
      const state = userStates[chatId];
      if (!state) return res.sendStatus(200);

      // --- –§–æ—Ç–æ
      if (state.stage === 'awaiting_photo' && body.message.photo) {
        const fileId = body.message.photo.at(-1).file_id;

        const fileRes = await axios.get(`${TELEGRAM_API}/getFile?file_id=${fileId}`);
        const filePath = fileRes.data.result.file_path;
        const fileUrl = `${TELEGRAM_FILE_API}/${filePath}`;

        state.photo = fileUrl;
        state.stage = 'awaiting_sum';

        console.log(`üì• –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. URL: ${fileUrl}`);
        await askForSum(chatId);
        return res.sendStatus(200);
      }

      // --- –°—É–º–º–∞
      if (state.stage === 'awaiting_sum' && body.message.text) {
        const sum = body.message.text.trim();
        if (!/^\d+$/.test(sum)) {
          await sendMessage(chatId, "‚ùó –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏.");
          return res.sendStatus(200);
        }

        state.sum = sum;
        state.stage = 'awaiting_comment';

        console.log(`üí∞ –°—É–º–º–∞ –ø–æ–ª—É—á–µ–Ω–∞: ${sum}`);
        await askForComment(chatId);
        return res.sendStatus(200);
      }

      // --- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
      if (state.stage === 'awaiting_comment' && body.message.text) {
        const comment = body.message.text.trim();
        const { row, photo, sum, username, messageId } = state;

        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ GAS:', {
          action: 'updateAfterCompletion',
          row,
          photoUrl: photo,
          sum,
          comment,
          executor: username,
          message_id: messageId
        });

        await axios.post(GAS_WEB_APP_URL, {
          data: {
            action: 'updateAfterCompletion',
            row,
            photoUrl: photo,
            sum,
            comment,
            executor: username,
            message_id: messageId
          }
        });

        await sendMessage(
          chatId,
          `üìå –ó–∞—è–≤–∫–∞ #${row} –∑–∞–∫—Ä—ã—Ç–∞.\nüìé –§–æ—Ç–æ: <a href="${photo}">—Å—Å—ã–ª–∫–∞</a>\nüí∞ –°—É–º–º–∞: ${sum} —Å—É–º\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${username}`
        );

        delete userStates[chatId];
        return res.sendStatus(200);
      }
    }

    // === –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ ‚Äî –æ—Ç–≤–µ—Ç–∏–º Telegram, —á—Ç–æ–±—ã –Ω–µ —Ä—É–≥–∞–ª—Å—è
    console.log('‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —è–≤–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç 200 OK');
    return res.sendStatus(200);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ webhook:", err);
    return res.sendStatus(500);
  }
});

require('dotenv').config();
const express = require('express');
const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');
const { google } = require('googleapis');

const app = express();
app.use(express.json());

const BOT_TOKEN = process.env.BOT_TOKEN;
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;
const GOOGLE_DRIVE_FOLDER_ID = process.env.GOOGLE_DRIVE_FOLDER_ID;
const CHAT_ID = -1002582747660;

const userState = {};
const messageMap = {};

const auth = new google.auth.GoogleAuth({
  keyFile: path.join(__dirname, 'credentials.json'),
  scopes: ['https://www.googleapis.com/auth/drive'],
});
const drive = google.drive({ version: 'v3', auth });

async function downloadFile(fileId) {
  const fileUrlResp = await axios.get(`${TELEGRAM_API}/getFile?file_id=${fileId}`);
  const filePath = fileUrlResp.data.result.file_path;
  const downloadUrl = `${TELEGRAM_FILE_API}/${filePath}`;
  const response = await axios.get(downloadUrl, { responseType: 'stream' });

  const tempPath = path.join(__dirname, 'temp', `${fileId}.jpg`);
  await new Promise((resolve, reject) => {
    const writer = fs.createWriteStream(tempPath);
    response.data.pipe(writer);
    writer.on('finish', resolve);
    writer.on('error', reject);
  });

  return tempPath;
}

async function uploadToDrive(filePath) {
  const fileName = path.basename(filePath);
  const fileMetadata = {
    name: fileName,
    parents: [GOOGLE_DRIVE_FOLDER_ID],
  };
  const media = {
    mimeType: 'image/jpeg',
    body: fs.createReadStream(filePath),
  };

  const file = await drive.files.create({
    resource: fileMetadata,
    media,
    fields: 'id',
  });

  await drive.permissions.create({
    fileId: file.data.id,
    requestBody: { role: 'reader', type: 'anyone' },
  });

  fs.unlinkSync(filePath);
  return `https://drive.google.com/uc?id=${file.data.id}`;
}

async function sendTelegramMessage(chat_id, text, options = {}) {
  await axios.post(`${TELEGRAM_API}/sendMessage`, {
    chat_id,
    text,
    parse_mode: 'HTML',
    ...options,
  });
}

async function deleteMessage(chat_id, message_id, delay = 60000) {
  setTimeout(() => {
    axios.post(`${TELEGRAM_API}/deleteMessage`, {
      chat_id,
      message_id,
    }).catch(() => {});
  }, delay);
}

app.post('/webhook', async (req, res) => {
  const body = req.body;

  if (body.callback_query) {
    const { message, data, from } = body.callback_query;
    const message_id = message.message_id;
    const username = from.username || from.first_name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

    const row = parseInt(data.split(':')[1]);
    const action = data.split(':')[0];

    if (action === 'start') {
      userState[from.id] = { step: 'awaiting_photo', row, username, message_id };
      await sendTelegramMessage(from.id, 'üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç.');
    }

    if (action === 'accept') {
      await axios.post(GAS_WEB_APP_URL, {
        message_id,
        status: '–í —Ä–∞–±–æ—Ç–µ',
        executor: `@${username}`,
      });

      await axios.post(`${TELEGRAM_API}/editMessageReplyMarkup`, {
        chat_id: message.chat.id,
        message_id: message.message_id,
        reply_markup: {
          inline_keyboard: [[
            { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `start:${row}` },
            { text: 'üöö –û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏', callback_data: `wait:${row}` },
            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel:${row}` }
          ]]
        }
      });

      await sendTelegramMessage(message.chat.id, `üîß –ó–∞—è–≤–∫–∞ ‚Ññ${row} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É @${username}`, {
        reply_to_message_id: message.message_id
      });
    }

    res.sendStatus(200);
    return;
  }

  if (body.message && body.message.photo && userState[body.message.from.id]?.step === 'awaiting_photo') {
    const { row, username, message_id } = userState[body.message.from.id];
    const photoArray = body.message.photo;
    const fileId = photoArray[photoArray.length - 1].file_id;

    try {
      const tempPath = await downloadFile(fileId);
      const driveUrl = await uploadToDrive(tempPath);

      userState[body.message.from.id].step = 'awaiting_sum';
      userState[body.message.from.id].photoUrl = driveUrl;

      const reply = await axios.post(`${TELEGRAM_API}/sendMessage`, {
        chat_id: body.message.chat.id,
        text: 'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç:',
      });

      messageMap[from.id] = [body.message.message_id, reply.data.result.message_id];
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:', e.message);
    }

    res.sendStatus(200);
    return;
  }

  if (body.message && userState[body.message.from.id]?.step === 'awaiting_sum') {
    const sum = body.message.text;
    userState[body.message.from.id].sum = sum;
    userState[body.message.from.id].step = 'awaiting_comment';

    const reply = await axios.post(`${TELEGRAM_API}/sendMessage`, {
      chat_id: body.message.chat.id,
      text: 'üìù –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:',
    });

    messageMap[body.message.from.id].push(body.message.message_id, reply.data.result.message_id);

    res.sendStatus(200);
    return;
  }

  if (body.message && userState[body.message.from.id]?.step === 'awaiting_comment') {
    const comment = body.message.text;
    const { row, username, message_id, sum, photoUrl } = userState[body.message.from.id];

    try {
      await axios.post(GAS_WEB_APP_URL, {
        row,
        photo: photoUrl,
        sum,
        comment,
        username,
        message_id
      });

      const result = await axios.post(`${TELEGRAM_API}/sendMessage`, {
        chat_id: body.message.chat.id,
        text: `‚úÖ –ó–∞—è–≤–∫–∞ #${row} –∑–∞–∫—Ä—ã—Ç–∞. üí∞ –°—É–º–º–∞: ${sum} —Å—É–º üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @${username}`,
      });

      // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      messageMap[body.message.from.id].forEach(mid => {
        deleteMessage(body.message.chat.id, mid);
      });
      deleteMessage(body.message.chat.id, result.data.result.message_id);

      delete userState[body.message.from.id];
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏:', e.message);
    }

    res.sendStatus(200);
    return;
  }

  res.sendStatus(200);
});

app.listen(process.env.PORT || 3000, () => {
  console.log(`Bot server is running`);
});
