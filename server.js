require('dotenv').config();
const express = require('express');
const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');
const app = express();
app.use(express.json());

const BOT_TOKEN = process.env.BOT_TOKEN;
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;
const GAS_UPLOAD_URL = process.env.GAS_UPLOAD_URL;

const PORT = process.env.PORT || 3000;

const userSessions = {};

function sendTelegramMessage(chat_id, text, options = {}) {
  return axios.post(`${TELEGRAM_API}/sendMessage`, {
    chat_id,
    text,
    parse_mode: 'HTML',
    ...options,
  });
}

function editTelegramMessage(chat_id, message_id, text, options = {}) {
  return axios.post(`${TELEGRAM_API}/editMessageText`, {
    chat_id,
    message_id,
    text,
    parse_mode: 'HTML',
    ...options,
  });
}

function deleteMessage(chat_id, message_id) {
  return axios.post(`${TELEGRAM_API}/deleteMessage`, {
    chat_id,
    message_id,
  });
}

async function uploadPhotoToDrive(file_id) {
  const { data: fileInfo } = await axios.get(`${TELEGRAM_API}/getFile?file_id=${file_id}`);
  const filePath = fileInfo.result.file_path;
  const fileUrl = `${TELEGRAM_FILE_API}/${filePath}`;
  const response = await axios.get(fileUrl, { responseType: 'stream' });

  const formData = new FormData();
  formData.append('photo', response.data, 'photo.jpg');

  const uploadRes = await axios.post(GAS_UPLOAD_URL, formData, {
    headers: formData.getHeaders(),
  });

  return uploadRes.data.photoUrl;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
app.post(`/webhook`, async (req, res) => {
  const body = req.body;

  if (body.message) {
    const msg = body.message;
    const chat_id = msg.chat.id;
    const user_id = msg.from.id;
    const username = msg.from.username || `${msg.from.first_name} ${msg.from.last_name || ''}`;
    const text = msg.text;
    const photo = msg.photo;

    if (userSessions[user_id]?.expecting === 'photo') {
      const file_id = photo?.[photo.length - 1]?.file_id;
      if (!file_id) return;

      try {
        const photoUrl = await uploadPhotoToDrive(file_id);
        userSessions[user_id].photoUrl = photoUrl;
        userSessions[user_id].expecting = 'sum';
        sendTelegramMessage(chat_id, 'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:');
      } catch (err) {
        sendTelegramMessage(chat_id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ.');
      }
      return;
    }

    if (userSessions[user_id]?.expecting === 'sum') {
      userSessions[user_id].sum = text;
      userSessions[user_id].expecting = 'comment';
      sendTelegramMessage(chat_id, '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:');
      return;
    }

    if (userSessions[user_id]?.expecting === 'comment') {
      userSessions[user_id].comment = text;
      userSessions[user_id].expecting = null;

      const { row, message_id, photoUrl, sum, comment, executor } = userSessions[user_id];

      await axios.post(GAS_WEB_APP_URL, {
        row,
        photo: photoUrl,
        sum,
        comment,
        username: executor,
        message_id,
        status: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
      });

      const deadlineText = userSessions[user_id].overdue || '‚Äî';
      const summaryText = `
üìå –ó–∞—è–≤–∫–∞ #${row} –∑–∞–∫—Ä—ã—Ç–∞.
üìé –§–æ—Ç–æ: <a href="${photoUrl}">—Å—Å—ã–ª–∫–∞</a>
üí∞ –°—É–º–º–∞: ${sum} —Å—É–º
üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @${executor}
‚úÖ –°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–æ
–ü—Ä–æ—Å—Ä–æ—á–∫–∞: ${deadlineText}
      `.trim();

      await editTelegramMessage(chat_id, message_id, summaryText);
      sendTelegramMessage(chat_id, `‚úÖ –ó–∞—è–≤–∫–∞ #${row} –∑–∞–∫—Ä—ã—Ç–∞. –°–ø–∞—Å–∏–±–æ!`);

      delete userSessions[user_id];
      return;
    }
  }

  if (body.callback_query) {
    const cb = body.callback_query;
    const data = cb.data;
    const chat_id = cb.message.chat.id;
    const message_id = cb.message.message_id;
    const user_id = cb.from.id;
    const username = cb.from.username || `${cb.from.first_name} ${cb.from.last_name || ''}`;

    const [action, row] = data.split('_');

    if (action === 'start') {
      await axios.post(GAS_WEB_APP_URL, {
        row,
        status: '–í —Ä–∞–±–æ—Ç–µ',
        executor: username,
        message_id,
      });

      const newButtons = {
        inline_keyboard: [[
          { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `done_${row}` },
          { text: 'üöö –û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏', callback_data: `wait_${row}` },
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel_${row}` },
        ]],
      };

      await editTelegramMessage(chat_id, message_id, `üë∑ –ó–∞—è–≤–∫–∞ #${row} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º: @${username}`, {
        reply_markup: newButtons,
      });

      return res.sendStatus(200);
    }

    if (action === 'done') {
      userSessions[user_id] = {
        expecting: 'photo',
        row,
        message_id,
        executor: username,
        overdue: '', // –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      };
      sendTelegramMessage(chat_id, 'üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç:');
      return res.sendStatus(200);
    }

    if (action === 'wait' || action === 'cancel') {
      const statusMap = {
        wait: '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏',
        cancel: '–û—Ç–º–µ–Ω–∞',
      };
      const status = statusMap[action];

      await axios.post(GAS_WEB_APP_URL, {
        row,
        status,
        executor: username,
        message_id,
      });

      await editTelegramMessage(chat_id, message_id, `üîÑ –ó–∞—è–≤–∫–∞ #${row}: ${status} @${username}`);
      return res.sendStatus(200);
    }
  }

  res.sendStatus(200);
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
app.get('/setWebhook', async (req, res) => {
  const url = `${req.protocol}://${req.get('host')}/webhook`;
  const response = await axios.get(`${TELEGRAM_API}/setWebhook?url=${url}`);
  res.json(response.data);
});

app.listen(PORT, () => {
  console.log(`Telegram Bot Server running on port ${PORT}`);
});
