require('dotenv').config();
console.log('GAS_WEB_APP_URL:', process.env.GAS_WEB_APP_URL);

const express = require('express');
const axios = require('axios');
const { google } = require('googleapis');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());

const BOT_TOKEN = process.env.BOT_TOKEN;
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;
const PORT = process.env.PORT || 3000;

const FOLDER_ID = '1lYjywHLtUgVRhV9dxW0yIhCJtEfl30ClaYSECjrD8ENyh1YDLEYEvbnegKe4_-HK2QlLWzVF';

// Google Drive API setup
const KEYFILEPATH = './credentials.json';
const SCOPES = ['https://www.googleapis.com/auth/drive'];
const auth = new google.auth.GoogleAuth({ keyFile: KEYFILEPATH, scopes: SCOPES });
const drive = google.drive({ version: 'v3', auth });

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ Google –î–∏—Å–∫ (–∫–∞–∫ —Ä–∞–Ω–µ–µ)
async function uploadFileToDrive(fileUrl, filename) {
  try {
    const response = await axios({ method: 'GET', url: fileUrl, responseType: 'stream' });
    const fileMetadata = { name: filename, parents: [FOLDER_ID] };
    const media = { mimeType: response.headers['content-type'], body: response.data };
    const file = await drive.files.create({ resource: fileMetadata, media, fields: 'id' });
    const fileId = file.data.id;

    await drive.permissions.create({ fileId, requestBody: { role: 'reader', type: 'anyone' } });
    const result = await drive.files.get({ fileId, fields: 'webViewLink, webContentLink' });
    return result.data.webViewLink || result.data.webContentLink;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ Google –î–∏—Å–∫:', error.message);
    return null;
  }
}

const EXECUTORS = ['@EvelinaB87', '@Olim19', '@Oblayor_04_09', '–¢–µ–∫—Å—Ç–æ–≤–æ–π –ø–æ–¥—Ä—è–¥—á–∏–∫'];

// userStates –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const userStates = {};

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º message_id
async function sendMessage(chatId, text, options = {}) {
  try {
    const res = await axios.post(`${TELEGRAM_API}/sendMessage`, {
      chat_id: chatId,
      text,
      parse_mode: 'HTML',
      ...options,
    });
    return res.data.result.message_id;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err.response?.data || err.message);
    return null;
  }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async function editMessageText(chatId, messageId, text, reply_markup) {
  try {
    await axios.post(`${TELEGRAM_API}/editMessageText`, {
      chat_id: chatId,
      message_id: messageId,
      text,
      parse_mode: 'HTML',
      reply_markup,
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:", err.response?.data || err.message);
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
async function deleteMessage(chatId, messageId) {
  try {
    await axios.post(`${TELEGRAM_API}/deleteMessage`, { chat_id: chatId, message_id: messageId });
  } catch (err) {
    console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId} –≤ —á–∞—Ç–µ ${chatId}:`, err.response?.data || err.message);
  }
}

// –ó–∞–ø—Ä–æ—Å—ã —Ñ–æ—Ç–æ, —Å—É–º–º—ã, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
async function askForPhoto(chatId) {
  const messageId = await sendMessage(chatId, "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç.");
  if (messageId) userStates[chatId].messagesToDelete.push(messageId);
}
async function askForSum(chatId) {
  const messageId = await sendMessage(chatId, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞–±–æ—Ç –≤ —Å—É–º–∞—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).");
  if (messageId) userStates[chatId].messagesToDelete.push(messageId);
}
async function askForComment(chatId) {
  const messageId = await sendMessage(chatId, "üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ.");
  if (messageId) userStates[chatId].messagesToDelete.push(messageId);
}

// –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
function scheduleDeleteMessages(chatId) {
  const messages = userStates[chatId]?.messagesToDelete || [];
  if (messages.length === 0) return;

  setTimeout(() => {
    messages.forEach((msgId) => deleteMessage(chatId, msgId));
  }, 60000);
}

app.post('/webhook', async (req, res) => {
  const body = req.body;

  try {
    if (body.callback_query) {
      const dataRaw = body.callback_query.data;
      const chatId = body.callback_query.message.chat.id;
      const messageId = body.callback_query.message.message_id;
      const username = '@' + (body.callback_query.from.username || body.callback_query.from.first_name);

      let data;
      try {
        data = JSON.parse(dataRaw);
      } catch {
        console.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_data:", dataRaw);
        return res.sendStatus(200);
      }

      const { action, row, messageId: originalMessageId } = data;

      if (action === 'in_progress' && row) {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        const buttons = EXECUTORS.map((ex) => [{ text: ex, callback_data: JSON.stringify({ action: 'select_executor', row, executor: ex, messageId: originalMessageId }) }]);
        await editMessageText(chatId, messageId, `–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}:`, { inline_keyboard: buttons });
        return res.sendStatus(200);
      }

      if (action === 'select_executor' && row) {
        const executor = data.executor;
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GAS —Å—Ç–∞—Ç—É—Å "–í —Ä–∞–±–æ—Ç–µ" –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        await axios.post(GAS_WEB_APP_URL, {
          data: {
            action: 'markInProgress',
            row,
            executor
          }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –∏ —Å—Ç–∞—Ç—É—Å–æ–º, –∞ –∫–Ω–æ–ø–∫–∏ ‚Äî –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ
        await editMessageText(
          chatId,
          messageId,
          `üü¢ –ó–∞—è–≤–∫–∞ #${row} –≤ —Ä–∞–±–æ—Ç–µ.\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executor}`,
          {
            inline_keyboard: [
              [
                { text: "–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ", callback_data: JSON.stringify({ action: "completed", row, messageId: originalMessageId }) },
                { text: "–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏ ‚è≥", callback_data: JSON.stringify({ action: "delayed", row, messageId: originalMessageId }) },
                { text: "–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data: JSON.stringify({ action: "cancelled", row, messageId: originalMessageId }) }
              ]
            ]
          }
        );

        // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - –≤ –≤–∏–¥–µ reply –Ω–∞ –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await sendMessage(chatId, `‚úÖ –ó–∞—è–≤–∫–∞ #${row} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º ${executor}`, { reply_to_message_id: messageId });

        return res.sendStatus(200);
      }

      if (action === 'completed' && row) {
        userStates[chatId] = { stage: 'awaiting_photo', row, messageId, username, messagesToDelete: [] };
        await askForPhoto(chatId);
        return res.sendStatus(200);
      }

      if ((action === 'delayed' || action === 'cancelled') && row) {
        await axios.post(GAS_WEB_APP_URL, {
          data: {
            action,
            row,
            executor: username
          }
        });

        await editMessageText(
          chatId,
          messageId,
          `üìå –ó–∞—è–≤–∫–∞ #${row}\n‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: ${action === 'delayed' ? '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏' : '–û—Ç–º–µ–Ω–µ–Ω–∞'}\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${username}`
        );
        return res.sendStatus(200);
      }
    } else if (body.message) {
      const chatId = body.message.chat.id;
      const state = userStates[chatId];
      if (!state) return res.sendStatus(200);

      // –§–æ—Ç–æ
      if (state.stage === 'awaiting_photo' && body.message.photo) {
        const fileId = body.message.photo.at(-1).file_id;
        const fileRes = await axios.get(`${TELEGRAM_API}/getFile?file_id=${fileId}`);
        const filePath = fileRes.data.result.file_path;
        const telegramFileUrl = `${TELEGRAM_FILE_API}/${filePath}`;

        const googleDriveUrl = await uploadFileToDrive(telegramFileUrl, `photo_${Date.now()}.jpg`);
        if (!googleDriveUrl) {
          const msgId = await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –Ω–∞ Google –î–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
          if (msgId) state.messagesToDelete.push(msgId);
          return res.sendStatus(200);
        }

        state.photo = googleDriveUrl;
        state.stage = 'awaiting_sum';

        await askForSum(chatId);
        return res.sendStatus(200);
      }

      // –°—É–º–º–∞
      if (state.stage === 'awaiting_sum' && body.message.text) {
        const sum = body.message.text.trim();
        if (!/^\d+$/.test(sum)) {
          const msgId = await sendMessage(chatId, "‚ùó –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤.");
          if (msgId) state.messagesToDelete.push(msgId);
          return res.sendStatus(200);
        }

        state.sum = sum;
        state.stage = 'awaiting_comment';

        await askForComment(chatId);
        return res.sendStatus(200);
      }

      // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
      if (state.stage === 'awaiting_comment' && body.message.text) {
        const comment = body.message.text.trim();
        const { row, photo, sum, username, messageId, messagesToDelete } = state;

        await axios.post(GAS_WEB_APP_URL, {
          data: {
            action: 'updateAfterCompletion',
            row,
            photoUrl: photo,
            sum,
            comment,
            executor: username,
            message_id: messageId
          }
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
        const finalMsgId = await sendMessage(
          chatId,
          `üìå –ó–∞—è–≤–∫–∞ #${row} –∑–∞–∫—Ä—ã—Ç–∞.\nüìé –§–æ—Ç–æ: <a href="${photo}">—Å—Å—ã–ª–∫–∞</a>\nüí∞ –°—É–º–º–∞: ${sum} —Å—É–º\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${username}\n‚úÖ –°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–æ\n‚è∞ –ü—Ä–æ—Å—Ä–æ—á–∫–∞: (–¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã)`,
          { parse_mode: 'HTML' }
        );

        if (finalMsgId) messagesToDelete.push(finalMsgId);

        // –ó–∞–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
        scheduleDeleteMessages(chatId);

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        delete userStates[chatId];

        return res.sendStatus(200);
      }
    }

    return res.sendStatus(200);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:", err);
    res.sendStatus(500);
  }
});

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

