const express = require('express');
const axios = require('axios');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());

const BOT_TOKEN = process.env.BOT_TOKEN;
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;

const PORT = process.env.PORT || 3000;

// userStates: chatId -> { stage, row, messageId, username, photo, sum, comment }
const userStates = {};

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç—É
const buildFollowUpButtons = (row) => ({
  inline_keyboard: [
    [
      { text: "–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ", callback_data: JSON.stringify({ action: "completed", row }) },
      { text: "–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏ ‚è≥", callback_data: JSON.stringify({ action: "delayed", row }) },
      { text: "–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data: JSON.stringify({ action: "cancelled", row }) }
    ]
  ]
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage(chatId, text, options = {}) {
  try {
    await axios.post(`${TELEGRAM_API}/sendMessage`, {
      chat_id: chatId,
      text,
      parse_mode: 'HTML',
      ...options
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err.response?.data || err.message);
  }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
async function editMessageText(chatId, messageId, text, reply_markup) {
  try {
    await axios.post(`${TELEGRAM_API}/editMessageText`, {
      chat_id: chatId,
      message_id: messageId,
      text,
      parse_mode: 'HTML',
      reply_markup
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:", err.response?.data || err.message);
  }
}

// –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ç–æ
async function askForPhoto(chatId) {
  await sendMessage(chatId, "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç.");
}

// –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—É–º–º—É
async function askForSum(chatId) {
  await sendMessage(chatId, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞–±–æ—Ç –≤ —Å—É–º–∞—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).");
}

// –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
async function askForComment(chatId) {
  await sendMessage(chatId, "üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ.");
}

app.post('/webhook', async (req, res) => {
  const body = req.body;

  try {
    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (–Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫)
    if (body.callback_query) {
      const dataRaw = body.callback_query.data;
      const chatId = body.callback_query.message.chat.id;
      const messageId = body.callback_query.message.message_id;
      const username = '@' + (body.callback_query.from.username || body.callback_query.from.first_name);

      let data;
      try {
        data = JSON.parse(dataRaw);
      } catch {
        console.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_data:", dataRaw);
        return res.sendStatus(200);
      }

      const { action, row, messageId: originalMessageId } = data;

      if (action === 'in_progress' && row) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GAS —Å—Ç–∞—Ç—É—Å "–í —Ä–∞–±–æ—Ç–µ"
        await axios.post(GAS_WEB_APP_URL, {
          data: {
            action: 'markInProgress',
            row,
            executor: username
          }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await editMessageText(
          chatId,
          messageId,
          `üü¢ –ó–∞—è–≤–∫–∞ #${row} –≤ —Ä–∞–±–æ—Ç–µ.\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${username}`,
          buildFollowUpButtons(row)
        );

        return res.sendStatus(200);
      }

      if (action === 'completed' && row) {
        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—Ä–æ—Å–∞ —Ñ–æ—Ç–æ ‚Üí —Å—É–º–º—ã ‚Üí –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        userStates[chatId] = { stage: 'awaiting_photo', row, messageId, username };
        await askForPhoto(chatId);
        return res.sendStatus(200);
      }

      if ((action === 'delayed' || action === 'cancelled') && row) {
        await axios.post(GAS_WEB_APP_URL, {
          data: {
            action,
            row,
            executor: username
          }
        });

        await editMessageText(
          chatId,
          messageId,
          `üìå –ó–∞—è–≤–∫–∞ #${row}\n‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: ${action === 'delayed' ? '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏' : '–û—Ç–º–µ–Ω–µ–Ω–∞'}\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${username}`
        );
        return res.sendStatus(200);
      }
    }

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç)
    else if (body.message) {
      const chatId = body.message.chat.id;
      const state = userStates[chatId];
      if (!state) return res.sendStatus(200);

      // –§–æ—Ç–æ
      if (state.stage === 'awaiting_photo' && body.message.photo) {
        const fileId = body.message.photo.at(-1).file_id;
        // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
        const fileRes = await axios.get(`${TELEGRAM_API}/getFile?file_id=${fileId}`);
        const filePath = fileRes.data.result.file_path;
        const fileUrl = `${TELEGRAM_FILE_API}/${filePath}`;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        state.photo = fileUrl;
        state.stage = 'awaiting_sum';

        await askForSum(chatId);
        return res.sendStatus(200);
      }

      // –°—É–º–º–∞
      if (state.stage === 'awaiting_sum' && body.message.text) {
        const sum = body.message.text.trim();
        if (!/^\d+$/.test(sum)) {
          await sendMessage(chatId, "‚ùó –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤.");
          return res.sendStatus(200);
        }

        state.sum = sum;
        state.stage = 'awaiting_comment';

        await askForComment(chatId);
        return res.sendStatus(200);
      }

      // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
      if (state.stage === 'awaiting_comment' && body.message.text) {
        const comment = body.message.text.trim();

        const { row, photo, sum, username, messageId } = state;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GAS –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞—è–≤–∫–∏
        await axios.post(GAS_WEB_APP_URL, {
          data: {
            action: 'updateAfterCompletion',
            row,
            photoUrl: photo,
            sum,
            comment,
            executor: username,
            message_id: messageId
          }
        });

        // –°–æ–æ–±—â–∞–µ–º –≤ —á–∞—Ç –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞—è–≤–∫–∏
        await sendMessage(
          chatId,
          `üìå –ó–∞—è–≤–∫–∞ #${row} –∑–∞–∫—Ä—ã—Ç–∞.\nüìé –§–æ—Ç–æ: <a href="${photo}">—Å—Å—ã–ª–∫–∞</a>\nüí∞ –°—É–º–º–∞: ${sum} —Å—É–º\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${username}`
        );

        delete userStates[chatId];
        return res.sendStatus(200);
      }
    }

    return res.sendStatus(200);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:", err);
    res.sendStatus(500);
  }
});

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
