app.post('/webhook', async (req, res) => {
  const body = req.body;

  try {
    // === 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ (callback_query)
    if (body.callback_query) {
      console.log('‚û°Ô∏è –ü–æ–ª—É—á–µ–Ω callback_query:', body.callback_query);

      const dataRaw = body.callback_query.data;
      const chatId = body.callback_query.message.chat.id;
      const messageId = body.callback_query.message.message_id;
      const username = '@' + (body.callback_query.from.username || body.callback_query.from.first_name);

      // --- –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞: –≤—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      if (dataRaw.startsWith('select_executor:')) {
        const parts = dataRaw.split(':');
        const row = parts[1];
        const executor = parts[2];

        if (!row || !executor) {
          console.warn("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç select_executor:", dataRaw);
          return res.sendStatus(200);
        }

        console.log(`üë§ –í—ã–±—Ä–∞–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ${executor} –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}`);

        await axios.post(GAS_WEB_APP_URL, {
          data: {
            action: 'markInProgress',
            row,
            executor
          }
        });

        const originalText = body.callback_query.message.text;
        const cleanedText = originalText
          .replace(/üü¢ –ó–∞—è–≤–∫–∞ #\d+ –≤ —Ä–∞–±–æ—Ç–µ\.\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @\S+/g, '')
          .replace(/‚úÖ –ó–∞—è–≤–∫–∞ #\d+ –∑–∞–∫—Ä—ã—Ç–∞\..*/gs, '')
          .replace(/üü¢ –í —Ä–∞–±–æ—Ç–µ\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:.*(\n)?/g, '')
          .trim();

        const updatedText = `${cleanedText}\n\nüü¢ –í —Ä–∞–±–æ—Ç–µ\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executor}`;

        await editMessageText(
          chatId,
          messageId,
          updatedText,
          buildFollowUpButtons(row)
        );

        await sendMessage(chatId, `üìå –ó–∞—è–≤–∫–∞ ‚Ññ${row} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º ${executor}`, {
          reply_to_message_id: messageId
        });

        return res.sendStatus(200);
      }

      // --- –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –æ—Ç–º–µ–Ω–∞, –∑–∞–¥–µ—Ä–∂–∫–∞)
      let data;
      try {
        data = JSON.parse(dataRaw);
      } catch (e) {
        console.warn("‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ callback_data:", dataRaw);
        return res.sendStatus(200);
      }

      const { action, row, messageId: originalMessageId } = data;

      if (action === 'in_progress' && row) {
        await axios.post(GAS_WEB_APP_URL, {
          data: {
            action: 'markInProgress',
            row,
            executor: username
          }
        });

        const originalText = body.callback_query.message.text;
        const cleanedText = originalText
          .replace(/üü¢ –ó–∞—è–≤–∫–∞ #\d+ –≤ —Ä–∞–±–æ—Ç–µ\.\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @\S+/g, '')
          .replace(/‚úÖ –ó–∞—è–≤–∫–∞ #\d+ –∑–∞–∫—Ä—ã—Ç–∞\..*/gs, '')
          .replace(/üü¢ –í —Ä–∞–±–æ—Ç–µ\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:.*(\n)?/g, '')
          .trim();

        const updatedText = `${cleanedText}\n\nüü¢ –í —Ä–∞–±–æ—Ç–µ\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${username}`;

        await editMessageText(
          chatId,
          messageId,
          updatedText,
          buildFollowUpButtons(row)
        );

        return res.sendStatus(200);
      }

      if (action === 'completed' && row) {
        userStates[chatId] = { stage: 'awaiting_photo', row, messageId, username };
        console.log(`üì∏ –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ –æ—Ç ${username} –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}`);
        await askForPhoto(chatId);
        return res.sendStatus(200);
      }

      if ((action === 'delayed' || action === 'cancelled') && row) {
        await axios.post(GAS_WEB_APP_URL, {
          data: {
            action,
            row,
            executor: username
          }
        });

        const updatedText = `${body.callback_query.message.text}\n\nüìå –°—Ç–∞—Ç—É—Å: ${action === 'delayed' ? '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏' : '–û—Ç–º–µ–Ω–µ–Ω–∞'}\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${username}`;

        await editMessageText(
          chatId,
          messageId,
          updatedText
        );

        return res.sendStatus(200);
      }
    }

    // === 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ñ–æ—Ç–æ, —Å—É–º–º–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
    else if (body.message) {
      console.log('‚úâÔ∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', body.message);

      const chatId = body.message.chat.id;
      const state = userStates[chatId];
      if (!state) return res.sendStatus(200);

      // --- –§–æ—Ç–æ
      if (state.stage === 'awaiting_photo' && body.message.photo) {
        const fileId = body.message.photo.at(-1).file_id;

        const fileRes = await axios.get(`${TELEGRAM_API}/getFile?file_id=${fileId}`);
        const filePath = fileRes.data.result.file_path;
        const fileUrl = `${TELEGRAM_FILE_API}/${filePath}`;

        state.photo = fileUrl;
        state.stage = 'awaiting_sum';

        console.log(`üì• –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. URL: ${fileUrl}`);
        await askForSum(chatId);
        return res.sendStatus(200);
      }

      // --- –°—É–º–º–∞
      if (state.stage === 'awaiting_sum' && body.message.text) {
        const sum = body.message.text.trim();
        if (!/^d+$/.test(sum)) {
          await sendMessage(chatId, "‚ùó –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏.");
          return res.sendStatus(200);
        }

        state.sum = sum;
        state.stage = 'awaiting_comment';

        console.log(`üí∞ –°—É–º–º–∞ –ø–æ–ª—É—á–µ–Ω–∞: ${sum}`);
        await askForComment(chatId);
        return res.sendStatus(200);
      }

      // --- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
      if (state.stage === 'awaiting_comment' && body.message.text) {
        const comment = body.message.text.trim();
        const { row, photo, sum, username, messageId } = state;

        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ GAS:', {
          action: 'updateAfterCompletion',
          row,
          photoUrl: photo,
          sum,
          comment,
          executor: username,
          message_id: messageId
        });

        await axios.post(GAS_WEB_APP_URL, {
          data: {
            action: 'updateAfterCompletion',
            row,
            photoUrl: photo,
            sum,
            comment,
            executor: username,
            message_id: messageId
          }
        });

        const originalText = state.originalText || body.message.reply_to_message?.text || '';
        const cleanedText = originalText
          .replace(/\n?üü¢ –í —Ä–∞–±–æ—Ç–µ.*?(\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:.*)?/, '')
          .replace(/\n?üìé –§–æ—Ç–æ: .*$/m, '')
          .replace(/\n?üí∞ –°—É–º–º–∞: .*$/m, '')
          .replace(/\n?üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: .*$/m, '')
          .replace(/\n?‚úÖ –°—Ç–∞—Ç—É—Å: .*$/m, '')
          .replace(/\n?‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞\..*$/m, '');

        const updatedText = `${cleanedText}
üìé –§–æ—Ç–æ: <a href="${photo}">—Å—Å—ã–ª–∫–∞</a>
üí∞ –°—É–º–º–∞: ${sum} —Å—É–º
üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${username}
‚úÖ –°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–æ
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`.trim();

        await editMessageText(chatId, messageId, updatedText, { inline_keyboard: [] });
        await sendMessage(chatId, `üìå –ó–∞—è–≤–∫–∞ ‚Ññ${row} –∑–∞–∫—Ä—ã—Ç–∞.`, { reply_to_message_id: messageId });

        delete userStates[chatId];
        return res.sendStatus(200);
      }
    }

    console.log('‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —è–≤–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç 200 OK');
    return res.sendStatus(200);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ webhook:", err);
    return res.sendStatus(500);
  }
});
