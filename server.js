require('dotenv').config();
console.log('GAS_WEB_APP_URL:', process.env.GAS_WEB_APP_URL);

const express = require('express');
const axios = require('axios');
const fs = require('fs');
const path = require('path');
const { google } = require('googleapis');

const app = express();
app.use(express.json());

// Telegram API setup
const BOT_TOKEN = process.env.BOT_TOKEN;
const TELEGRAM_API = "https://api.telegram.org/bot" + BOT_TOKEN;
const TELEGRAM_FILE_API = "https://api.telegram.org/file/bot" + BOT_TOKEN;

// GAS Web App URL and Drive folder ID
const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;
const FOLDER_ID = process.env.GOOGLE_DRIVE_FOLDER_ID;
const PORT = process.env.PORT || 3000;

// In-memory user state for multi-step flows
const userStates = {}; // chatId -> { stage, row, messageId, username, photo, sum, comment, serviceMessages, lastUserMessageId, originalText }

// Google Drive API auth using service account (credentials.json mounted at /etc/secrets)
const auth = new google.auth.GoogleAuth({
  keyFile: '/etc/secrets/credentials.json',
  scopes: ['https://www.googleapis.com/auth/drive'],
});
const driveService = google.drive({ version: 'v3', auth });

// Upload a file from URL to Google Drive and return public link
async function uploadToDriveFromUrl(fileUrl, fileName) {
  const tempPath = path.join(__dirname, fileName);
  const response = await axios.get(fileUrl, { responseType: 'stream' });
  const writer = fs.createWriteStream(tempPath);
  response.data.pipe(writer);
  await new Promise((resolve, reject) => writer.on('finish', resolve).on('error', reject));

  const file = await driveService.files.create({
    requestBody: { name: fileName, parents: [FOLDER_ID] },
    media: { mimeType: 'image/jpeg', body: fs.createReadStream(tempPath) },
    fields: 'id',
  });
  await driveService.permissions.create({ fileId: file.data.id, requestBody: { role: 'reader', type: 'anyone' } });
  fs.unlinkSync(tempPath);
  return `https://drive.google.com/uc?id=${file.data.id}`;
}

// Buttons for follow-up actions ‚Äî callback_data –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
const buildFollowUpButtons = row => ({
  inline_keyboard: [[
    { text: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ', callback_data: `completed:${row}` },
    { text: '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏ ‚è≥', callback_data: `delayed:${row}` },
    { text: '–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data: `cancelled:${row}` },
  ]]
});

// List of executors and buttons for selection ‚Äî callback_data –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
const EXECUTORS = ['@EvelinaB87','@Olim19','@Oblayor_04_09','–¢–µ–∫—Å—Ç–æ–≤–æ–π –ø–æ–¥—Ä—è–¥—á–∏–∫'];
const buildExecutorButtons = row => ({
  inline_keyboard: EXECUTORS.map(ex => [
    { text: ex, callback_data: `select_executor:${row}:${ex}` }
  ])
});

// Helpers for Telegram
async function sendMessage(chatId, text, options = {}) {
  try {
    const res = await axios.post(`${TELEGRAM_API}/sendMessage`, { chat_id: chatId, text, parse_mode: 'HTML', ...options });
    return res.data.result.message_id; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', e.response?.data || e.message);
  }
}
async function editMessageText(chatId, messageId, text, reply_markup) {
  try {
    await axios.post(`${TELEGRAM_API}/editMessageText`, { chat_id: chatId, message_id: messageId, text, parse_mode: 'HTML', reply_markup });
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', e.response?.data || e.message);
  }
}

// Multi-step prompts ‚Äî —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π
async function askForPhoto(chatId) {
  const msgId = await sendMessage(chatId, 'üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç.');
  if (!userStates[chatId]) userStates[chatId] = {};
  if (!userStates[chatId].serviceMessages) userStates[chatId].serviceMessages = [];
  userStates[chatId].serviceMessages.push(msgId);
}
async function askForSum(chatId) {
  const msgId = await sendMessage(chatId, 'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞–±–æ—Ç –≤ —Å—É–º–∞—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).');
  if (!userStates[chatId]) userStates[chatId] = {};
  if (!userStates[chatId].serviceMessages) userStates[chatId].serviceMessages = [];
  userStates[chatId].serviceMessages.push(msgId);
}
async function askForComment(chatId) {
  const msgId = await sendMessage(chatId, 'üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ.');
  if (!userStates[chatId]) userStates[chatId] = {};
  if (!userStates[chatId].serviceMessages) userStates[chatId].serviceMessages = [];
  userStates[chatId].serviceMessages.push(msgId);
}

// Webhook endpoint (configured at /callback)
app.post('/callback', async (req, res) => {
  console.log('üì• Webhook –ø–æ–ª—É—á–µ–Ω:', JSON.stringify(req.body, null, 2));
  try {
    const body = req.body;

    // Handle button presses
    if (body.callback_query) {
      const { data: raw, message, from } = body.callback_query;
      const chatId = message.chat.id;
      const messageId = message.message_id;
      const username = '@' + (from.username || from.first_name);

      // –†–∞–∑–±–æ—Ä callback_data —Å —Ñ–æ—Ä–º–∞—Ç–æ–º "action:row[:executor]"
      const parts = raw.split(':');
      const action = parts[0];
      const row = parts[1] ? parseInt(parts[1], 10) : null;
      const executor = parts[2] || null;

      if (action === 'in_progress' && row) {
        await editMessageText(chatId, messageId,
          `–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}:`, buildExecutorButtons(row)
        );
        return res.sendStatus(200);
      }

      if (action === 'select_executor' && row && executor) {
        await axios.post(GAS_WEB_APP_URL, { data: { action: 'markInProgress', row, executor } });
        const newText = `${message.text}\n\nüü¢ –í —Ä–∞–±–æ—Ç–µ\nüë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executor}`;
        await editMessageText(chatId, messageId, newText, buildFollowUpButtons(row));
        await sendMessage(chatId, `‚úÖ –ó–∞—è–≤–∫–∞ #${row} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º ${executor}`, { reply_to_message_id: messageId });
        return res.sendStatus(200);
      }

      if (action === 'completed' && row) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è originalText –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        userStates[chatId] = { stage: 'awaiting_photo', row, messageId, username, serviceMessages: [], originalText: message.text };
        await askForPhoto(chatId);
        return res.sendStatus(200);
      }

      if ((action === 'delayed' || action === 'cancelled') && row) {
        await axios.post(GAS_WEB_APP_URL, { data: { action, row, executor: username } });
        const status = action === 'delayed' ? '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏' : '–û—Ç–º–µ–Ω–µ–Ω–∞';
        const updated = `${message.text}\n\nüìå –°—Ç–∞—Ç—É—Å: ${status}\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${username}`;
        await editMessageText(chatId, messageId, updated);
        return res.sendStatus(200);
      }
    }

    // Handle user replies in flows
    if (body.message) {
      const chatId = body.message.chat.id;
      const state = userStates[chatId]; if (!state) return res.sendStatus(200);
      const text = body.message.text;
      const userMessageId = body.message.message_id;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
      state.lastUserMessageId = userMessageId;

      // Photo received
      if (state.stage === 'awaiting_photo' && body.message.photo) {
        const fileId = body.message.photo.slice(-1)[0].file_id;
        const fileRes = await axios.get(`${TELEGRAM_API}/getFile?file_id=${fileId}`);
        const fileUrl = `${TELEGRAM_FILE_API}/${fileRes.data.result.file_path}`;
        const driveLink = await uploadToDriveFromUrl(fileUrl, `work_${state.row}_${Date.now()}.jpg`);
        state.photo = driveLink;
        state.stage = 'awaiting_sum';
        await askForSum(chatId);
        return res.sendStatus(200);
      }

      // Sum entered
      if (state.stage === 'awaiting_sum' && text) {
        if (!/^\d+$/.test(text.trim())) {
          await sendMessage(chatId, '‚ùó –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏.');
          return res.sendStatus(200);
        }
        state.sum = text.trim();
        state.stage = 'awaiting_comment';
        await askForComment(chatId);
        return res.sendStatus(200);
      }

      // Comment entered
      if (state.stage === 'awaiting_comment' && text) {
        const comment = text.trim();
        const { row, photo, sum, username, messageId, serviceMessages, originalText } = state;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Google Apps Script (—Ç–∞–±–ª–∏—Ü–µ)
        await axios.post(GAS_WEB_APP_URL, { data: { action: 'updateAfterCompletion', row, photoUrl: photo, sum, comment, executor: username, message_id: messageId } });

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const textForParse = originalText || '';
        const –Ω–æ–º–µ—Ä–ü–∏—Ü—Ü–µ—Ä–∏–∏ = (textForParse.match(/üè™ \*–ü–∏—Ü—Ü–µ—Ä–∏—è:\* (.+)/) || [])[1] || '‚Äî';
        const —Å—É—Ç—å–ü—Ä–æ–±–ª–µ–º—ã = (textForParse.match(/üìé \*–°—É—Ç—å:\*([\s\S]*?)\n/) || [])[1]?.trim() || '‚Äî';
        const –ø—Ä–æ—Å—Ä–æ—á–∫–∞ = (textForParse.match(/‚è∞ \*–ü—Ä–æ—Å—Ä–æ—á–∫–∞:\* (\d+)/) || [])[1] || 0;

        const updatedText =
          `üìå –ó–∞—è–≤–∫–∞ ‚Ññ${row} –∑–∞–∫—Ä—ã—Ç–∞.\n` +
          `üè™ –ü–∏—Ü—Ü–µ—Ä–∏—è: ${–Ω–æ–º–µ—Ä–ü–∏—Ü—Ü–µ—Ä–∏–∏}\n` +
          `üìé –°—É—Ç—å: ${—Å—É—Ç—å–ü—Ä–æ–±–ª–µ–º—ã}\n` +
          `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}\n\n` +
          `üìé –§–æ—Ç–æ: <a href="${photo}">—Å—Å—ã–ª–∫–∞</a>\n` +
          `üí∞ –°—É–º–º–∞: ${sum} —Å—É–º\n` +
          `üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${username}\n` +
          `‚úÖ –°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–æ\n` +
          `‚è∞ –ü—Ä–æ—Å—Ä–æ—á–∫–∞: ${–ø—Ä–æ—Å—Ä–æ—á–∫–∞} –¥–Ω.`;

        // 1) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await sendMessage(chatId,
          `üìå –ó–∞—è–≤–∫–∞ ‚Ññ${row} –∑–∞–∫—Ä—ã—Ç–∞.`,
          { reply_to_message_id: messageId }
        );

        // 2) –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        await editMessageText(chatId, messageId, updatedText, { inline_keyboard: [] });

        // 3) –£–¥–∞–ª—è–µ–º —Å–µ—Ä–≤–∏—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
        setTimeout(async () => {
          try {
            for (const msgId of serviceMessages) {
              await axios.post(`${TELEGRAM_API}/deleteMessage`, { chat_id: chatId, message_id: msgId }).catch(() => {});
            }
            if (state.lastUserMessageId) {
              await axios.post(`${TELEGRAM_API}/deleteMessage`, { chat_id: chatId, message_id: state.lastUserMessageId }).catch(() => {});
            }
          } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', err.message);
          }
        }, 60000);

        // 4) –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        delete userStates[chatId];
        return res.sendStatus(200);
      }
    }

    res.sendStatus(200);
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', e);
    res.sendStatus(500);
  }
});

app.listen(PORT, () => console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
