// telegram-handlers.js
module.exports = (app, userStates) => {
  const axios = require('axios');
  const BOT_TOKEN = process.env.BOT_TOKEN;
  const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
  const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
  const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;

  const EXECUTORS = ['@EvelinaB87', '@Olim19', '@Oblayor_04_09', '–¢–µ–∫—Å—Ç–æ–≤–æ–π –ø–æ–¥—Ä—è–¥—á–∏–∫'];
  const AUTHORIZED_USERS = ['@EvelinaB87', '@Olim19', '@Oblayor_04_09', '@Andrey_Tkach_MB'];

  function buildExecutorButtons(row) {
    return {
      inline_keyboard: EXECUTORS.map(ex => [
        { text: ex, callback_data: `select_executor:${row}:${ex}` }
      ])
    };
  }

  function buildFinalButtons(row) {
    return {
      inline_keyboard: [
        [
          { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `done:${row}` },
          { text: '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏', callback_data: `delayed:${row}` },
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancelled:${row}` }
        ]
      ]
    };
  }

  async function sendMessage(chatId, text, options = {}) {
    const res = await axios.post(`${TELEGRAM_API}/sendMessage`, {
      chat_id: chatId,
      text,
      parse_mode: 'HTML',
      ...options
    });
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${text}`);
    return res.data.result.message_id;
  }

  async function editMessageText(chatId, messageId, text, reply_markup) {
    try {
      await axios.post(`${TELEGRAM_API}/editMessageText`, {
        chat_id: chatId,
        message_id: messageId,
        text,
        parse_mode: 'HTML',
        ...(reply_markup && { reply_markup })
      });
    } catch (error) {
      const desc = error.response?.data?.description || error.message;
      if (!desc.includes('message is not modified')) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}:`, desc);
      }
    }
  }

  async function deleteMessage(chatId, msgId) {
    try {
      await axios.post(`${TELEGRAM_API}/deleteMessage`, {
        chat_id: chatId,
        message_id: msgId
      });
    } catch (e) {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${msgId}:`, e.message);
    }
  }

  function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async function deleteMessageWithDelay(chatId, msgId, delayMs = 15000) {
    await delay(delayMs);
    await deleteMessage(chatId, msgId);
  }

  async function getFileLink(fileId) {
    const file = await axios.get(`${TELEGRAM_API}/getFile?file_id=${fileId}`);
    const filePath = file.data.result.file_path;
    return `${TELEGRAM_FILE_API}/${filePath}`;
  }

  async function cleanupMessages(chatId, state) {
    const messages = [...(state.serviceMessages || []), ...(state.userResponses || [])];
    for (const msg of messages) {
      await deleteMessage(chatId, msg);
    }
  }

  async function completeRequest(chatId, state, commentMessageId, commentText) {
    let { row, executor, amount, photoUrl, originalMessageId } = state;
    const comment = commentText || '';

    if (!row) {
      const recovery = await axios.post(GAS_WEB_APP_URL, {
        action: 'recoverRowByMessageId',
        message_id: originalMessageId
      });
      if (recovery.data?.row) {
        row = recovery.data.row;
        state.row = row;
      } else {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏.');
        return;
      }
    }

    const [idRes, textRes, delayRes, driveUrlRes, commentRes] = await Promise.all([
      axios.post(GAS_WEB_APP_URL, { action: 'getMessageId', row }),
      axios.post(GAS_WEB_APP_URL, { action: 'getRequestText', row }),
      axios.post(GAS_WEB_APP_URL, { action: 'getDelayInfo', row }),
      axios.post(GAS_WEB_APP_URL, { action: 'getDriveLink', row }),
      axios.post(GAS_WEB_APP_URL, { action: 'getExecutorComment', row })
    ]);

// 1. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü—É
await axios.post(GAS_WEB_APP_URL, {
  action: 'complete',
  row,
  photoUrl,
  amount,
  comment,
  completed_at: new Date().toISOString(),
  message_id: resolvedMessageId
});

// 2. –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
const [idRes, textRes, delayRes, driveUrlRes, commentRes] = await Promise.all([
  axios.post(GAS_WEB_APP_URL, { action: 'getMessageId', row }),
  axios.post(GAS_WEB_APP_URL, { action: 'getRequestText', row }),
  axios.post(GAS_WEB_APP_URL, { action: 'getDelayInfo', row }),
  axios.post(GAS_WEB_APP_URL, { action: 'getDriveLink', row }),
  axios.post(GAS_WEB_APP_URL, { action: 'getExecutorComment', row })
]);

const resolvedMessageId = idRes.data?.message_id;
const originalText = textRes.data?.text || '';
const delayDays = delayRes.data?.delay || '0';
const driveUrl = driveUrlRes.data?.driveUrl || photoUrl;
const commentR = commentRes.data?.comment || '';
const updatedText = `üìå –ó–∞—è–≤–∫–∞ #${row} –∑–∞–∫—Ä—ã—Ç–∞.\nüìé –§–æ—Ç–æ: <a href="${driveUrl}">—Å—Å—ã–ª–∫–∞</a>\nüí∞ –°—É–º–º–∞: ${amount || '0'} —Å—É–º\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executor}\n‚úÖ –°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–æ\nüî¥ –ü—Ä–æ—Å—Ä–æ—á–∫–∞: ${delayDays} –¥–Ω.\n\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${commentR}\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n${originalText}`;

if (resolvedMessageId) {
  await editMessageText(chatId, resolvedMessageId, updatedText);
  state.originalMessageId = resolvedMessageId;
}


    setTimeout(async () => {
      try {
        const driveUpdateRes = await axios.post(GAS_WEB_APP_URL, {
          action: 'getDriveLink',
          row
        });
        const updatedDriveUrl = driveUpdateRes.data?.driveUrl;

        if (updatedDriveUrl && updatedDriveUrl !== driveUrl) {
          const refreshedText = `üìå –ó–∞—è–≤–∫–∞ #${row} –∑–∞–∫—Ä—ã—Ç–∞.\nüìé –§–æ—Ç–æ: <a href="${updatedDriveUrl}">—Å—Å—ã–ª–∫–∞</a>\nüí∞ –°—É–º–º–∞: ${amount || '0'} —Å—É–º\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executor}\n‚úÖ –°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–æ\nüî¥ –ü—Ä–æ—Å—Ä–æ—á–∫–∞: ${delayDays} –¥–Ω.\n\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${commentR}\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n${originalText}`;
          await editMessageText(chatId, resolvedMessageId, refreshedText);
        }
      } catch (err) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ Google –î–∏—Å–∫:', err.message);
      }
    }, 3 * 60 * 1000);

    await deleteMessageWithDelay(chatId, commentMessageId);
    await cleanupMessages(chatId, state);
    delete userStates[chatId];
  }

  app.post('/webhook', async (req, res) => {
    try {
      const body = req.body;

      if (body.message) {
        const msg = body.message;
        const chatId = msg.chat.id;
        const state = userStates[chatId];
if (msg.text && msg.text.toLowerCase().startsWith('/—Å–≤–æ–¥–∫–∞')) {
  try {
    const summaryRes = await axios.post(GAS_WEB_APP_URL, { action: 'getGroupedSummary' });
    const summary = summaryRes.data;

    let report = '<b>üìä –°–≤–æ–¥–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º</b>\n\n';
    const sections = {
      notAccepted: 'üÜï <b>–ù–µ –ø—Ä–∏–Ω—è—Ç—ã</b>',
      inProgress: 'üîß <b>–í —Ä–∞–±–æ—Ç–µ</b>',
      overdue: '‚è∞ <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω—ã</b>'
    };

    for (const key of Object.keys(sections)) {
      const block = summary[key];
      if (block && Object.keys(block).length > 0) {
        report += `${sections[key]}:\n`;
        for (const pizzeria in block) {
          const items = block[pizzeria].join(', ');
          report += `üçï ${pizzeria}: ${items}\n`;
        }
        report += '\n';
      }
    }

    await axios.post(`${TELEGRAM_API}/sendMessage`, {
      chat_id: chatId,
      text: report,
      parse_mode: 'HTML'
    });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏:', err.message);
    await axios.post(`${TELEGRAM_API}/sendMessage`, {
      chat_id: chatId,
      text: '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É.',
    });
  }

  return res.sendStatus(200);
}



        if (state?.stage === 'awaiting_photo' && msg.photo) {
          const photo = msg.photo[msg.photo.length - 1];
          const fileLink = await getFileLink(photo.file_id);
          state.photoUrl = fileLink;
          state.stage = 'awaiting_amount';
          const prompt = await sendMessage(chatId, 'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:');
          state.serviceMessages.push(prompt);
          state.userResponses.push(msg.message_id);
          return res.sendStatus(200);
        }

        if (state?.stage === 'awaiting_amount' && msg.text) {
          state.amount = msg.text.trim();
          state.stage = 'awaiting_comment';
          const prompt = await sendMessage(chatId, '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:');
          state.serviceMessages.push(prompt);
          state.userResponses.push(msg.message_id);
          return res.sendStatus(200);
        }

        if (state?.stage === 'awaiting_comment' && msg.text) {
          state.userResponses.push(msg.message_id);
          await completeRequest(chatId, state, msg.message_id, msg.text);
          return res.sendStatus(200);
        }
      }

      if (body.callback_query) {
        const { data: raw, message, id: callbackId, from } = body.callback_query;
        const chatId = message.chat.id;
        const messageId = message.message_id;
        const [action, row, executor] = raw.split(':');
        const username = from.username ? `@${from.username}` : '';

        if (!AUTHORIZED_USERS.includes(username)) {
          await axios.post(`${TELEGRAM_API}/answerCallbackQuery`, {
            callback_query_id: callbackId,
            text: '‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.',
            show_alert: true
          });
          return res.sendStatus(200);
        }

        await axios.post(`${TELEGRAM_API}/answerCallbackQuery`, { callback_query_id: callbackId });

        if (action === 'in_progress') {
          const keyboard = buildExecutorButtons(row);
          await editMessageText(chatId, messageId, `${message.text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:`, keyboard);
          userStates[chatId] = { row, originalMessageId: messageId, serviceMessages: [] };
          return res.sendStatus(200);
        }

        if (action === 'select_executor') {
          if (!userStates[chatId]) userStates[chatId] = {};
          userStates[chatId].row = row;
          userStates[chatId].executor = executor;

          if (executor === '–¢–µ–∫—Å—Ç–æ–≤–æ–π –ø–æ–¥—Ä—è–¥—á–∏–∫') {
            const prompt = await sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞:');
            userStates[chatId].awaiting_manual_executor = true;
            userStates[chatId].serviceMessages = [prompt];
            return res.sendStatus(200);
          }

          const [idRes, textRes] = await Promise.all([
            axios.post(GAS_WEB_APP_URL, { action: 'getMessageId', row }),
            axios.post(GAS_WEB_APP_URL, { action: 'getRequestText', row })
          ]);

          const originalMessageId = idRes.data?.message_id;
          const originalText = textRes.data?.text || '';

          await axios.post(GAS_WEB_APP_URL, {
            action: 'in_progress',
            row,
            executor,
            message_id: originalMessageId
          });

          const updatedText = `${originalText}\n\nüü¢ –í —Ä–∞–±–æ—Ç–µ\nüë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executor}`;
          const buttons = buildFinalButtons(row);
          await editMessageText(chatId, originalMessageId, updatedText, buttons);

          userStates[chatId] = {
            ...userStates[chatId],
            row,
            executor,
            originalMessageId,
            serviceMessages: []
          };

          return res.sendStatus(200);
        }

        if (action === 'done') {
          if (!userStates[chatId]) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
            return res.sendStatus(200);
          }

          userStates[chatId] = {
            ...userStates[chatId],
            stage: 'awaiting_photo',
            serviceMessages: [],
            userResponses: []
          };

          const prompt = await sendMessage(chatId, 'üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:');
          userStates[chatId].serviceMessages.push(prompt);
          deleteMessageWithDelay(chatId, prompt);
          return res.sendStatus(200);
        }
      }

      res.sendStatus(200);
    } catch (err) {
      console.error('‚ùå Webhook error:', err);
      res.sendStatus(500);
    }
  });
};
