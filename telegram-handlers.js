// telegram-handlers.js
module.exports = (app, userStates) => {
  const axios = require('axios');
  const BOT_TOKEN = process.env.BOT_TOKEN;
  const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
  const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
  const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;

  const EXECUTORS = ['@EvelinaB87', '@Olim19', '@Oblayor_04_09', '–¢–µ–∫—Å—Ç–æ–≤–æ–π –ø–æ–¥—Ä—è–¥—á–∏–∫'];

  function buildExecutorButtons(row) {
    return {
      inline_keyboard: EXECUTORS.map(ex => [
        { text: ex, callback_data: `select_executor:${row}:${ex}` }
      ])
    };
  }

  async function sendMessage(chatId, text, options = {}) {
    const res = await axios.post(`${TELEGRAM_API}/sendMessage`, {
      chat_id: chatId,
      text,
      parse_mode: 'HTML',
      ...options
    });
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${text}`);
    return res.data.result.message_id;
  }

  async function editMessageText(chatId, messageId, text, reply_markup) {
    try {
      const updatedText = text
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;");

      console.log(`üìù –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId}`);
      console.log('‚û°Ô∏è –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:', updatedText);
      console.log('‚û°Ô∏è –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏:', JSON.stringify(reply_markup, null, 2));

      await axios.post(`${TELEGRAM_API}/editMessageText`, {
        chat_id: chatId,
        message_id: messageId,
        text: updatedText,
        parse_mode: 'HTML',
        ...(reply_markup && { reply_markup })
      });
      console.log(`‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId} –≤ —á–∞—Ç–µ ${chatId}`);
    } catch (error) {
      const desc = error.response?.data?.description || error.message;
      if (desc.includes('message is not modified')) {
        console.log(`‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ ${messageId} –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ (—Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç/markup)`);
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}:`, error.response?.data || error.message);
      }
    }
  }

  async function deleteMessage(chatId, msgId, finalId) {
    if (msgId === finalId) return;
    try {
      await axios.post(`${TELEGRAM_API}/deleteMessage`, {
        chat_id: chatId,
        message_id: msgId
      });
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${msgId}`);
    } catch (e) {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${msgId}:`, e.message);
    }
  }

  app.post('/webhook', async (req, res) => {
    try {
      const body = req.body;

      if (body.callback_query) {
        const { data: raw, message, from, id: callbackId } = body.callback_query;
        const chatId = message.chat.id;
        const messageId = message.message_id;
        const username = '@' + (from.username || from.first_name);

        try {
          await axios.post(`${TELEGRAM_API}/answerCallbackQuery`, { callback_query_id: callbackId });
        } catch (err) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback_query:", err.message);
        }

        const parts = raw.split(':');
        const action = parts[0];
        const row = parts[1];
        const executor = parts[2];

        console.log(`‚û°Ô∏è Callback: ${action}, row: ${row}, executor: ${executor}`);

        if (action === 'in_progress') {
          console.log('üßº –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É"');
          await editMessageText(chatId, messageId, message.text, { inline_keyboard: [] });

          console.log('üß± –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è');
          const keyboard = buildExecutorButtons(row);
          const newText = message.text + '\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:';
          await editMessageText(chatId, messageId, newText, keyboard);

          userStates[chatId] = { row, sourceMessageId: messageId, serviceMessages: [] };
          return res.sendStatus(200);
        }

        if (action === 'select_executor') {
          if (!userStates[chatId]) return res.sendStatus(200);

          if (executor === '–¢–µ–∫—Å—Ç–æ–≤–æ–π –ø–æ–¥—Ä—è–¥—á–∏–∫') {
            userStates[chatId].awaiting_manual_executor = true;
            const prompt = await sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –≤—Ä—É—á–Ω—É—é:', {
              reply_to_message_id: userStates[chatId].sourceMessageId
            });
            userStates[chatId].serviceMessages.push(prompt);
            return res.sendStatus(200);
          }

          console.log(`üë§ –í—ã–±—Ä–∞–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executor}`);

          console.log('üì° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É GAS');
          const [originalIdRes, originalTextRes] = await Promise.all([
            axios.post(GAS_WEB_APP_URL, {
              action: 'getMessageId',
              row
            }),
            axios.post(GAS_WEB_APP_URL, {
              action: 'getOriginalText',
              row
            })
          ]);

          console.log('üì© –û—Ç–≤–µ—Ç –æ—Ç GAS:', originalIdRes.data, originalTextRes.data);

          const originalMessageId = originalIdRes.data?.message_id;
          const originalText = originalTextRes.data?.originalText || '';

          if (!originalMessageId) {
            console.error(`‚ùå GAS –Ω–µ –≤–µ—Ä–Ω—É–ª message_id –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${row}:`, originalIdRes.data);
            return res.sendStatus(200);
          }

          console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–í —Ä–∞–±–æ—Ç–µ" –≤ GAS');
          await axios.post(GAS_WEB_APP_URL, { action: 'in_progress', row, executor, message_id: originalMessageId });

          const updatedText = `${originalText}\n\n<b>üü¢ –í —Ä–∞–±–æ—Ç–µ</b>\nüë∑ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> ${executor}`;

          const buttons = {
            inline_keyboard: [
              [
                { text: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ', callback_data: `done:${row}` },
                { text: '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏ ‚è≥', callback_data: `delayed:${row}` },
                { text: '–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data: `cancelled:${row}` }
              ]
            ]
          };

          console.log('‚úèÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏');
          console.log('‚û°Ô∏è updatedText:', updatedText);
          console.log('‚û°Ô∏è buttons:', JSON.stringify(buttons, null, 2));

          await editMessageText(chatId, originalMessageId, updatedText, buttons);

          if (originalMessageId !== messageId) {
            await editMessageText(chatId, messageId, message.text, { inline_keyboard: [] });
          }

          userStates[chatId].executor = executor;
          userStates[chatId].sourceMessageId = originalMessageId;
          userStates[chatId].originalMessageId = originalMessageId;
          return res.sendStatus(200);
        }

        if (action === 'done') {
          const originalIdRes = await axios.post(GAS_WEB_APP_URL, {
            action: 'getMessageId',
            row
          });
          const originalMessageId = originalIdRes.data?.message_id;

          if (!originalMessageId) {
            console.error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω originalMessageId –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${row}`);
            return res.sendStatus(200);
          }

          userStates[chatId] = {
            row,
            stage: 'awaiting_photo',
            messageId,
            serviceMessages: [],
            sourceMessageId: originalMessageId,
            executor: userStates[chatId]?.executor || null,
            originalMessageId
          };

          const prompt = await sendMessage(chatId, 'üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.', {
            reply_to_message_id: originalMessageId
          });
          userStates[chatId].serviceMessages.push(prompt);

          await editMessageText(chatId, originalMessageId, 'üìå –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ...', { inline_keyboard: [] });

          return res.sendStatus(200);
        }
      }

      if (body.message) {
        console.log('üì• –ü–æ–ª—É—á–µ–Ω–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        // ... –æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
      }

      res.sendStatus(200);
    } catch (err) {
      console.error('‚ùå Webhook error:', err);
      res.sendStatus(500);
    }
  });
};
