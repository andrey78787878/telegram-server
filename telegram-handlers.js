const axios = require('axios');
const FormData = require('form-data');

const BOT_TOKEN = process.env.BOT_TOKEN;
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;

// –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const MANAGERS = ['@EvelinaB87', '@Andrey_Tkach_MB', '@Davr_85'];
const EXECUTORS = ['@EvelinaB87', '@Olim19', '@Oblayor_04_09', '@Andrey_Tkach_MB', '@Davr_85'];
const AUTHORIZED_USERS = [...new Set([...MANAGERS, ...EXECUTORS])];

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è username ‚Üí user_id
const userStorage = new Map();

module.exports = (app, userStates) => {
  app.post('/webhook', async (req, res) => {
    try {
      const body = req.body;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      if (body.message?.from) {
        const user = body.message.from;
        if (user.username) {
          userStorage.set(`@${user.username}`, user.id);
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (–∫–Ω–æ–ø–∫–∏)
      if (body.callback_query) {
        const { callback_query } = body;
        const user = callback_query.from;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id
        if (user.username) {
          userStorage.set(`@${user.username}`, user.id);
        }

        if (!callback_query || !callback_query.message || !callback_query.data || !user) {
          return res.sendStatus(200);
        }

        const msg = callback_query.message;
        const chatId = msg.chat.id;
        const messageId = msg.message_id;
        const username = user.username ? `@${user.username}` : null;
        const data = callback_query.data;

        // –û—Ç–≤–µ—Ç –Ω–∞ callback_query
        try {
          await axios.post(`${TELEGRAM_API}/answerCallbackQuery`, {
            callback_query_id: callback_query.id
          });
        } catch (e) {
          console.error('Answer callback error:', e.response?.data);
        }

        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏
        const row = extractRowFromCallbackData(data) || extractRowFromMessage(msg.text || msg.caption);
        
        if (!row) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏');
          return res.sendStatus(200);
        }

        console.log('Callback received:', { username, data, row });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if (!AUTHORIZED_USERS.includes(username)) {
          await sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.');
          return res.sendStatus(200);
        }

        // === –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É" ===
        if (data === 'accept') {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ MANAGERS)
          if (!MANAGERS.includes(username)) {
            await sendMessage(chatId, '‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∑–∞—è–≤–∫–∏.');
            return res.sendStatus(200);
          }

          const updatedText = `${msg.text || msg.caption}\n\nüü¢ –ó–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ`;
          await editMessageSafe(chatId, messageId, updatedText);

          const buttons = EXECUTORS.map(e => [
            { text: e, callback_data: `executor:${e}:${row}` }
          ]);

          await sendMessage(chatId, `üë∑ –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}:`, {
            reply_to_message_id: messageId
          });

          await sendButtonsWithRetry(chatId, messageId, buttons, `–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}:`);
          return res.sendStatus(200);
        }

        // === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ===
        if (data.startsWith('executor:')) {
          const executorUsername = data.split(':')[1];
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
          const originalText = msg.text || msg.caption;
          const updatedText = `${originalText}\n\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executorUsername}\nüü¢ –ó–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ`;
          
          await editMessageSafe(chatId, messageId, updatedText);

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ GAS
          await sendToGAS({
            row,
            status: '–í —Ä–∞–±–æ—Ç–µ',
            executor: executorUsername,
            message_id: messageId,
          });

          // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
          await sendMessage(
            chatId,
            `üì¢ ${executorUsername}, –≤–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #${row}!`,
            { reply_to_message_id: messageId }
          );

          // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –õ–° –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
          try {
            const executorId = userStorage.get(executorUsername);
            if (executorId) {
              await sendMessage(
                executorId,
                `üìå –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #${row}\n\n` +
                `${originalText}\n\n` +
                `‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é!`
              );
            } else {
              console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', executorUsername);
              await sendMessage(
                chatId,
                `${executorUsername}, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –õ–° —Å –±–æ—Ç–æ–º! –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #${row}`,
                { reply_to_message_id: messageId }
              );
            }
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', e);
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ (–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è EXECUTORS)
          const buttons = [
            [
              { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `done:${row}` },
              { text: 'üïê –û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏', callback_data: `wait:${row}` },
              { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel:${row}` },
            ]
          ];
          
          await sendButtonsWithRetry(chatId, messageId, buttons, `–ó–∞—è–≤–∫–∞ #${row} –≤ —Ä–∞–±–æ—Ç–µ`);
          return res.sendStatus(200);
        }

        // === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ ===
        if (data.startsWith('done:')) {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ EXECUTORS)
          if (!EXECUTORS.includes(username)) {
            await sendMessage(chatId, '‚ùå –¢–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏.');
            return res.sendStatus(200);
          }

          userStates[chatId] = { 
            stage: 'waiting_photo', 
            row: parseInt(data.split(':')[1]), 
            username, 
            messageId,
            originalRequest: parseRequestMessage(msg.text || msg.caption),
            serviceMessages: [] 
          };
          await sendMessage(chatId, 'üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç');
          return res.sendStatus(200);
        }

        // ... (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è wait: –∏ cancel:)
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏)
      if (body.message) {
        const msg = body.message;
        const chatId = msg.chat.id;
        const state = userStates[chatId];

        if (!state) return res.sendStatus(200);

        try {
          if (state.stage === 'waiting_photo' && msg.photo) {
            const fileId = msg.photo.at(-1).file_id;
            const fileLink = await getTelegramFileUrl(fileId);

            state.photoUrl = fileLink;
            state.stage = 'waiting_sum';
            state.serviceMessages.push(msg.message_id);

            await sendMessage(chatId, 'üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Ä–∞–±–æ—Ç (–≤ —Å—É–º–∞—Ö)');
            return res.sendStatus(200);
          }

          if (state.stage === 'waiting_sum' && msg.text) {
            state.sum = msg.text;
            state.stage = 'waiting_comment';
            state.serviceMessages.push(msg.message_id);

            await sendMessage(chatId, 'üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π');
            return res.sendStatus(200);
          }

          if (state.stage === 'waiting_comment' && msg.text) {
            state.comment = msg.text;
            state.serviceMessages.push(msg.message_id);

            const completionData = {
              row: state.row,
              sum: state.sum,
              comment: state.comment,
              photoUrl: state.photoUrl,
              executor: state.username,
              originalRequest: state.originalRequest,
              delayDays: calculateDelayDays(state.originalRequest?.deadline)
            };

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ GAS
            await sendToGAS({
              ...completionData,
              status: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'
            });

            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            const completionMessage = formatCompletionMessage(completionData);
            await editMessageSafe(chatId, state.messageId, completionMessage);

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ Google Disk
            setTimeout(async () => {
              try {
                const diskUrl = await getGoogleDiskLink(state.row);
                if (diskUrl) {
                  const updatedMessage = formatCompletionMessage({
                    ...completionData,
                    photoUrl: diskUrl
                  }, diskUrl);
                  await editMessageSafe(chatId, state.messageId, updatedMessage);
                }
              } catch (e) {
                console.error('Error updating disk link:', e);
              }
            }, 3 * 60 * 1000);

            // –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
            setTimeout(async () => {
              try {
                for (const msgId of state.serviceMessages) {
                  await deleteMessageSafe(chatId, msgId);
                }
                // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await deleteMessageSafe(chatId, state.messageId); 
              } catch (e) {
                console.error('Error deleting messages:', e);
              }
            }, 60 * 1000);

            delete userStates[chatId];
            return res.sendStatus(200);
          }
        } catch (e) {
          console.error('Error handling user message:', e);
          return res.sendStatus(500);
        }
      }

      return res.sendStatus(200);
    } catch (error) {
      console.error('Webhook error:', error);
      return res.sendStatus(500);
    }
  });

  // ... (–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ formatCompletionMessage, parseRequestMessag
  // ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)

  async function getTelegramFileUrl(fileId) {
    try {
      const { data } = await axios.get(`${TELEGRAM_API}/getFile?file_id=${fileId}`);
      return `${TELEGRAM_FILE_API}/${data.result.file_path}`;
    } catch (error) {
      console.error('Get file URL error:', error.response?.data);
      return null;
    }
  }

  async function sendToGAS(data) {
    try {
      return await axios.post(GAS_WEB_APP_URL, data);
    } catch (error) {
      console.error('Send to GAS error:', error.response?.data);
      throw error;
    }
  }

  async function getGoogleDiskLink(row) {
    try {
      const res = await axios.post(`${GAS_WEB_APP_URL}?getDiskLink=true`, { row });
      return res.data.diskLink || null;
    } catch (error) {
      console.error('Get Google Disk link error:', error.response?.data);
      return null;
    }
  }

  function extractRowFromMessage(text) {
    if (!text) return null;
    const match = text.match(/#(\d+)/);
    return match ? parseInt(match[1], 10) : null;
  }
};
