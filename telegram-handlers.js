// telegram-handlers.js
// telegram-handlers.js
module.exports = (app, userStates) => {
  const axios = require('axios');
  const BOT_TOKEN = process.env.BOT_TOKEN;
  const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
  const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
  const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;

  const EXECUTORS = ['@EvelinaB87', '@Olim19', '@Oblayor_04_09', '–¢–µ–∫—Å—Ç–æ–≤–æ–π –ø–æ–¥—Ä—è–¥—á–∏–∫'];
  const DELAY_BEFORE_DELETE = 15000; // 15 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º

  // –§—É–Ω–∫—Ü–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
  function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
  function buildExecutorButtons(row) {
    return {
      inline_keyboard: EXECUTORS.map(ex => [
        { text: ex, callback_data: `select_executor:${row}:${ex}` }
      ])
    };
  }

  // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏"
  function buildDelayedButtons(row) {
    return {
      inline_keyboard: [
        [
          { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `done:${row}` },
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancelled:${row}` }
        ]
      ]
    };
  }

  async function sendMessage(chatId, text, options = {}) {
    try {
      const res = await axios.post(`${TELEGRAM_API}/sendMessage`, {
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
        ...options
      });
      return res.data.result.message_id;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
      return null;
    }
  }

  async function editMessageText(chatId, messageId, text, reply_markup) {
    try {
      await axios.post(`${TELEGRAM_API}/editMessageText`, {
        chat_id: chatId,
        message_id: messageId,
        text,
        parse_mode: 'HTML',
        ...(reply_markup && { reply_markup })
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    }
  }

  async function deleteMessageWithDelay(chatId, msgId) {
    try {
      await delay(DELAY_BEFORE_DELETE);
      await axios.post(`${TELEGRAM_API}/deleteMessage`, {
        chat_id: chatId,
        message_id: msgId
      });
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message);
    }
  }

  async function cleanupMessages(chatId, state) {
    try {
      const messagesToDelete = [
        ...(state.serviceMessages || []),
        ...(state.userResponses || [])
      ];
      
      if (messagesToDelete.length) {
        await Promise.all(messagesToDelete.map(msgId => 
          deleteMessageWithDelay(chatId, msgId)
        ));
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
  }

  async function handlePhoto(chatId, photo, messageId, state) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
      const fileRes = await axios.get(`${TELEGRAM_API}/getFile?file_id=${photo[photo.length - 1].file_id}`);
      const filePath = fileRes.data.result.file_path;
      state.photoUrl = `${TELEGRAM_FILE_API}/${filePath}`;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
      state.userResponses = [messageId];

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
      const prompt = await sendMessage(chatId, 'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã:');
      state.serviceMessages = [prompt];
      state.stage = 'awaiting_amount';
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:', error);
      await sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  async function completeRequest(chatId, text, messageId, state) {
    try {
      state.comment = text;
      state.userResponses.push(messageId);

      // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
      const originalTextRes = await axios.post(GAS_WEB_APP_URL, {
        action: 'getRequestText',
        row: state.row
      });
      
      const originalText = originalTextRes.data?.text || '';
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
      const updatedText = `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ
üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${state.executor}
üí∞ –°—É–º–º–∞: ${state.amount}
üì∏ –§–æ—Ç–æ: ${state.photoUrl}
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${state.comment || '–Ω–µ —É–∫–∞–∑–∞–Ω'}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

${originalText}`;

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
      const gasResponse = await axios.post(GAS_WEB_APP_URL, {
        action: 'updateAfterCompletion',
        row: state.row,
        photoUrl: state.photoUrl,
        sum: state.amount,
        comment: state.comment,
        executor: state.executor,
        message_id: state.originalMessageId
      });

      console.log('GAS Response:', gasResponse.data);

      if (gasResponse.data.error) {
        throw new Error(gasResponse.data.error);
      }

      await editMessageText(chatId, state.originalMessageId, updatedText);
      await cleanupMessages(chatId, state);
      delete userStates[chatId];
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
      await sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  app.post('/webhook', async (req, res) => {
    try {
      const body = req.body;
      res.sendStatus(200); // –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä—É Telegram

      if (body.callback_query) {
        const { data: raw, message, from, id: callbackId } = body.callback_query;
        const chatId = message.chat.id;
        const messageId = message.message_id;

        await axios.post(`${TELEGRAM_API}/answerCallbackQuery`, { 
          callback_query_id: callbackId 
        }).catch(console.error);

        const parts = raw.split(':');
        const action = parts[0];
        const row = parts[1];
        const executor = parts[2];

        if (action === 'select_executor') {
          if (!userStates[chatId]) userStates[chatId] = {};

          if (executor === '–¢–µ–∫—Å—Ç–æ–≤–æ–π –ø–æ–¥—Ä—è–¥—á–∏–∫') {
            userStates[chatId].awaiting_manual_executor = true;
            const prompt = await sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞:');
            userStates[chatId].serviceMessages = [prompt];
            return;
          }

          const [originalIdRes, originalTextRes] = await Promise.all([
            axios.post(GAS_WEB_APP_URL, { action: 'getMessageId', row }),
            axios.post(GAS_WEB_APP_URL, { action: 'getRequestText', row })
          ]);

          const originalMessageId = originalIdRes.data?.message_id;
          const originalText = originalTextRes.data?.text || '';

          if (!originalMessageId) return;

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Google Sheets
          const markResponse = await axios.post(GAS_WEB_APP_URL, { 
            action: 'markInProgress', 
            row, 
            executor, 
            message_id: originalMessageId 
          });

          if (markResponse.data.error) {
            throw new Error(markResponse.data.error);
          }

          const updatedText = `${originalText}\n\nüü¢ –í —Ä–∞–±–æ—Ç–µ\nüë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executor}`;
          const buttons = {
            inline_keyboard: [
              [
                { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `done:${row}` },
                { text: '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏', callback_data: `delayed:${row}` },
                { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancelled:${row}` }
              ]
            ]
          };

          await editMessageText(chatId, originalMessageId, updatedText, buttons);
          
          userStates[chatId] = {
            executor,
            row,
            sourceMessageId: originalMessageId,
            originalMessageId,
            serviceMessages: [],
            userResponses: []
          };
        }
        else if (action === 'delayed') {
          const markResponse = await axios.post(GAS_WEB_APP_URL, { 
            action: 'markInProgress', 
            row,
            status: '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏'
          });

          if (markResponse.data.error) {
            throw new Error(markResponse.data.error);
          }
          
          const buttons = buildDelayedButtons(row);
          const updatedText = `${message.text}\n\n‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏`;
          await editMessageText(chatId, messageId, updatedText, buttons);
        }
        else if (action === 'done') {
          if (userStates[chatId]?.stage === 'awaiting_photo') return;

          const originalIdRes = await axios.post(GAS_WEB_APP_URL, {
            action: 'getMessageId',
            row
          });
          const originalMessageId = originalIdRes.data?.message_id;

          if (!originalMessageId) return;

          userStates[chatId] = {
            row,
            stage: 'awaiting_photo',
            originalMessageId,
            serviceMessages: [],
            userResponses: []
          };

          const prompt = await sendMessage(chatId, 'üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:');
          userStates[chatId].serviceMessages = [prompt];
          await editMessageText(chatId, originalMessageId, 'üìå –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ...');
        }
        else if (action === 'cancelled') {
          await axios.post(GAS_WEB_APP_URL, { 
            action: 'markInProgress', 
            row,
            status: '–û—Ç–º–µ–Ω–µ–Ω–æ'
          });
          const updatedText = `${message.text}\n\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ`;
          await editMessageText(chatId, messageId, updatedText);
        }
      }
      else if (body.message) {
        const { chat, message_id, text, photo } = body.message;
        const chatId = chat.id;
        const state = userStates[chatId];

        if (!state) return;

        if (state.awaiting_manual_executor) {
          const [originalIdRes, originalTextRes] = await Promise.all([
            axios.post(GAS_WEB_APP_URL, { action: 'getMessageId', row: state.row }),
            axios.post(GAS_WEB_APP_URL, { action: 'getRequestText', row: state.row })
          ]);

          const originalMessageId = originalIdRes.data?.message_id;
          const originalText = originalTextRes.data?.text || '';

          if (!originalMessageId) return;

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Google Sheets
          const markResponse = await axios.post(GAS_WEB_APP_URL, { 
            action: 'markInProgress', 
            row: state.row, 
            executor: text, 
            message_id: originalMessageId 
          });

          if (markResponse.data.error) {
            throw new Error(markResponse.data.error);
          }

          const updatedText = `${originalText}\n\nüü¢ –í —Ä–∞–±–æ—Ç–µ\nüë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${text}`;
          const buttons = {
            inline_keyboard: [
              [
                { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `done:${state.row}` },
                { text: '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏', callback_data: `delayed:${state.row}` },
                { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancelled:${state.row}` }
              ]
            ]
          };

          await editMessageText(chatId, originalMessageId, updatedText, buttons);
          await cleanupMessages(chatId, state);

          userStates[chatId] = {
            ...state,
            executor: text,
            sourceMessageId: originalMessageId,
            originalMessageId,
            awaiting_manual_executor: false
          };
        }
        else if (state.stage === 'awaiting_photo' && photo) {
          await handlePhoto(chatId, photo, message_id, state);
        }
        else if (state.stage === 'awaiting_amount') {
          state.amount = text;
          state.userResponses = [message_id];
          
          const prompt = await sendMessage(chatId, 'üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞–±–æ—Ç–µ:');
          state.serviceMessages = [prompt];
          state.stage = 'awaiting_comment';
        }
        else if (state.stage === 'awaiting_comment') {
          await completeRequest(chatId, text, message_id, state);
        }
      }
    } catch (err) {
      console.error('Webhook error:', err);
    }
  });
};
