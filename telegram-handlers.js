const axios = require('axios');
const FormData = require('form-data');

const BOT_TOKEN = process.env.BOT_TOKEN;
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;
const AUTHORIZED_USERS = [
  '@EvelinaB87', '@Olim19', '@Oblayor_04_09', '@Andrey_Tkach_MB', '@Davr_85'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Google Apps Script
async function sendToGAS(data) {
  try {
    const response = await axios.post(GAS_WEB_APP_URL, data);
    console.log('üì§ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ GAS:', response.status);
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ GAS:', error.message);
    throw error;
  }
}

module.exports = (app, userStates) => {
  app.post('/webhook', async (req, res) => {
    try {
      const body = req.body;
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (–∫–Ω–æ–ø–∫–∏)
      if (body.callback_query) {
        const { callback_query } = body;
        
        if (!callback_query || !callback_query.message || !callback_query.data || !callback_query.from) {
          return res.sendStatus(200);
        }

        const msg = callback_query.message;
        const chatId = msg.chat.id;
        const messageId = msg.message_id;
        const username = callback_query.from.username ? `@${callback_query.from.username}` : null;
        const data = callback_query.data;

        // –û—Ç–≤–µ—Ç –Ω–∞ callback_query
        try {
          await axios.post(`${TELEGRAM_API}/answerCallbackQuery`, {
            callback_query_id: callback_query.id
          });
        } catch (e) {
          console.error('Answer callback error:', e.response?.data);
        }

        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏
        const row = extractRowFromCallbackData(data) || extractRowFromMessage(msg.text || msg.caption);
        
        if (!row) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏');
          return res.sendStatus(200);
        }

        console.log('Callback received:', { 
          username, 
          data, 
          row
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if (!AUTHORIZED_USERS.includes(username)) {
          await sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.');
          return res.sendStatus(200);
        }

        // === –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É" ===
        if (data === 'accept') {
          const updatedText = `${msg.text || msg.caption}\n\nüü¢ –ó–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ`;
          await editMessageSafe(chatId, messageId, updatedText);

          const buttons = AUTHORIZED_USERS.map(e => [
            { text: e, callback_data: `executor:${e}:${row}` }
          ]);

          await sendMessage(chatId, `üë∑ –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}:`, {
            reply_to_message_id: messageId
          });

          await sendButtonsWithRetry(chatId, messageId, buttons, `–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}:`);
          return res.sendStatus(200);
        }

        // === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ===
        if (data.startsWith('executor:')) {
          const executor = data.split(':')[1];
          const executorUsername = executor.startsWith('@') ? executor : `@${executor}`;

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
          const originalText = msg.text || msg.caption;
          const updatedText = `${originalText}\n\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executorUsername}\nüü¢ –ó–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ`;
          
          await editMessageSafe(chatId, messageId, updatedText);

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ GAS
          await sendToGAS({
            row,
            status: '–í —Ä–∞–±–æ—Ç–µ',
            executor: executorUsername,
            message_id: messageId,
          });

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
          try {
            const userId = callback_query.from.id;
            await sendMessage(
              userId, 
              `üìå –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #${row}\n\n` +
              `${originalText}\n\n` +
              `‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é!`
            );
          } catch (e) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é:', e);
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
          const buttons = [
            [
              { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `done:${row}` },
              { text: 'üïê –û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏', callback_data: `wait:${row}` },
              { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel:${row}` },
            ]
          ];
          
          await sendButtonsWithRetry(chatId, messageId, buttons, `–ó–∞—è–≤–∫–∞ #${row} –≤ —Ä–∞–±–æ—Ç–µ`);
          return res.sendStatus(200);
        }

        // ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ done/wait/cancel –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        if (data.startsWith('done:')) {
          userStates[chatId] = { 
            stage: 'waiting_photo', 
            row: parseInt(data.split(':')[1]), 
            username, 
            messageId, 
            serviceMessages: [] 
          };
          await sendMessage(chatId, 'üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç');
          return res.sendStatus(200);
        }

        if (data.startsWith('wait:')) {
          await sendMessage(chatId, '‚è≥ –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å "–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏"', { 
            reply_to_message_id: messageId 
          });
          await sendToGAS({ 
            row: parseInt(data.split(':')[1]), 
            status: '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏' 
          });
          return res.sendStatus(200);
        }

        if (data.startsWith('cancel:')) {
          await sendMessage(chatId, 'üö´ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', { 
            reply_to_message_id: messageId 
          });
          await sendToGAS({ 
            row: parseInt(data.split(':')[1]), 
            status: '–û—Ç–º–µ–Ω–µ–Ω–æ' 
          });
          return res.sendStatus(200);
        }

        return res.sendStatus(200);
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
      if (body.message) {
        // ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π)
      }

      return res.sendStatus(200);
    } catch (error) {
      console.error('Webhook error:', error);
      return res.sendStatus(500);
    }
  });

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

  function extractRowFromCallbackData(callbackData) {
    const match = callbackData.match(/:(\d+)$/);
    return match ? parseInt(match[1], 10) : null;
  }

  function extractRowFromMessage(text) {
    if (!text) return null;
    const match = text.match(/#(\d+)/);
    return match ? parseInt(match[1], 10) : null;
  }

  async function sendMessage(chatId, text, options = {}) {
    try {
      return await axios.post(`${TELEGRAM_API}/sendMessage`, {
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
        ...options
      });
    } catch (error) {
      console.error('Send message error:', error.response?.data);
      throw error;
    }
  }

  async function editMessageSafe(chatId, messageId, text) {
    try {
      return await axios.post(`${TELEGRAM_API}/editMessageText`, {
        chat_id: chatId,
        message_id: messageId,
        text,
        parse_mode: 'HTML'
      });
    } catch (error) {
      if (error.response?.data?.description?.includes('no text in the message') || 
          error.response?.data?.description?.includes('message to edit not found')) {
        return await sendMessage(chatId, text);
      }
      console.error('Edit message error:', error.response?.data);
      throw error;
    }
  }

  async function sendButtonsWithRetry(chatId, messageId, buttons, fallbackText) {
    try {
      const response = await axios.post(`${TELEGRAM_API}/editMessageReplyMarkup`, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: { inline_keyboard: buttons }
      });
      return response;
    } catch (error) {
      if (error.response?.data?.description?.includes('not modified')) {
        return { ok: true };
      }
      return await sendMessage(chatId, fallbackText, {
        reply_markup: { inline_keyboard: buttons }
      });
    }
  }

  // ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)

  async function getTelegramFileUrl(fileId) {
    try {
      const { data } = await axios.get(`${TELEGRAM_API}/getFile?file_id=${fileId}`);
      return `${TELEGRAM_FILE_API}/${data.result.file_path}`;
    } catch (error) {
      console.error('Get file URL error:', error.response?.data);
      return null;
    }
  }

  async function sendToGAS(data) {
    try {
      return await axios.post(GAS_WEB_APP_URL, data);
    } catch (error) {
      console.error('Send to GAS error:', error.response?.data);
      throw error;
    }
  }

  async function getGoogleDiskLink(row) {
    try {
      const res = await axios.post(`${GAS_WEB_APP_URL}?getDiskLink=true`, { row });
      return res.data.diskLink || null;
    } catch (error) {
      console.error('Get Google Disk link error:', error.response?.data);
      return null;
    }
  }

  function extractRowFromMessage(text) {
    if (!text) return null;
    const match = text.match(/#(\d+)/);
    return match ? parseInt(match[1], 10) : null;
  }
};
