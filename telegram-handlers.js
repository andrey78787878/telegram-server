// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  SHEET_ID: '1u48GTrioEVs_3P3fxcX0e7pKZmYwZyE8HioWJHgRZTc',
  SHEET_NAME: '–ó–∞—è–≤–∫–∏',
  BOT_TOKEN: '8005595415:AAHxAw2UlTYwhSiEcMu5CpTBRT_3-epH12Q',
  CHAT_ID: '-1002582747660',
  EXECUTORS: ['@EvelinaB87', '@Olim19', '@Oblayor_04_09', '–¢–µ–∫—Å—Ç–æ–≤–æ–π –ø–æ–¥—Ä—è–¥—á–∏–∫'],
  STATUS_COL: 10, // –ö–æ–ª–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ (K)
  EXECUTOR_COL: 16, // –ö–æ–ª–æ–Ω–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (P)
  MESSAGE_ID_COL: 17 // –ö–æ–ª–æ–Ω–∫–∞ ID —Å–æ–æ–±—â–µ–Ω–∏—è (Q)
};

// –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
function doPost(e) {
  try {
    if (!e?.postData?.contents) {
      return createErrorResponse("Invalid request");
    }
    
    const data = JSON.parse(e.postData.contents);
    
    if (data.callback_query) {
      return handleCallback(data.callback_query);
    }
    
    if (data.action) {
      return handleWebhook(data);
    }
    
    return createErrorResponse("No valid data structure found");
  } catch (error) {
    console.error('Error:', error);
    return createErrorResponse(error.message);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞
function handleWebhook(data) {
  const sheet = getSheet();
  
  switch(data.action) {
    case 'complete':
      return handleComplete(sheet, data);
    case 'in_progress':
      return handleInProgress(sheet, data);
    default:
      return createErrorResponse('Unknown action');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback
function handleCallback(callback) {
  try {
    const [action, row, ...rest] = callback.data.split(':');
    const sheet = getSheet();

    switch(action) {
      case 'show_executors':
        return showExecutors(callback, row);
      case 'select_executor':
        return assignExecutor(sheet, callback, row, rest[0]);
      default:
        return createErrorResponse('Unknown callback action');
    }
  } catch (error) {
    console.error('Callback error:', error);
    return createErrorResponse(error.message);
  }
}

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showExecutors(callback, row) {
  const keyboard = {
    inline_keyboard: CONFIG.EXECUTORS.map(executor => [{
      text: executor,
      callback_data: `select_executor:${row}:${encodeURIComponent(executor)}`
    }])
  };

  editMessage(callback.message.chat.id, callback.message.message_id, {reply_markup: keyboard});
  return createSuccessResponse();
}

function assignExecutor(sheet, callback, row, executor) {
  try {
    const decodedExecutor = decodeURIComponent(executor);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    sheet.getRange(row, CONFIG.EXECUTOR_COL).setValue(decodedExecutor);
    sheet.getRange(row, CONFIG.STATUS_COL).setValue("–í —Ä–∞–±–æ—Ç–µ");
    
    // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    editMessage(callback.message.chat.id, callback.message.message_id, {
      reply_markup: {inline_keyboard: []}
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    sendMessage(
      callback.message.chat.id, 
      `‚úÖ ${decodedExecutor} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞—è–≤–∫—É #${row}`,
      callback.message.message_id
    );
    
    return createSuccessResponse();
  } catch (error) {
    console.error('Error assigning executor:', error);
    return createErrorResponse(error.message);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getSheet() {
  const spreadsheet = SpreadsheetApp.openById(CONFIG.SHEET_ID);
  const sheet = spreadsheet.getSheetByName(CONFIG.SHEET_NAME);
  
  if (!sheet) {
    throw new Error(`Sheet ${CONFIG.SHEET_NAME} not found`);
  }
  
  return sheet;
}

function createSuccessResponse(data = {}) {
  return ContentService.createTextOutput(JSON.stringify({ok: true, ...data}))
    .setMimeType(ContentService.MimeType.JSON);
}

function createErrorResponse(message) {
  return ContentService.createTextOutput(JSON.stringify({error: message}))
    .setMimeType(ContentService.MimeType.JSON);
}

// Telegram API —Ñ—É–Ω–∫—Ü–∏–∏
function sendMessage(chatId, text, replyTo, replyMarkup) {
  const url = `https://api.telegram.org/bot${CONFIG.BOT_TOKEN}/sendMessage`;
  const payload = {
    chat_id: chatId,
    text: text,
    parse_mode: 'HTML'
  };
  
  if (replyTo) payload.reply_to_message_id = replyTo;
  if (replyMarkup) payload.reply_markup = replyMarkup;
  
  const response = UrlFetchApp.fetch(url, {
    method: 'post',
    contentType: 'application/json',
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  });
  
  const result = JSON.parse(response.getContentText());
  if (!result.ok) {
    console.error('Telegram API error:', result);
    throw new Error(result.description || 'Telegram API error');
  }
  
  return result;
}

function editMessage(chatId, messageId, params) {
  const url = `https://api.telegram.org/bot${CONFIG.BOT_TOKEN}/editMessageReplyMarkup`;
  const response = UrlFetchApp.fetch(url, {
    method: 'post',
    contentType: 'application/json',
    payload: JSON.stringify({
      chat_id: chatId,
      message_id: messageId,
      ...params
    }),
    muteHttpExceptions: true
  });
  
  const result = JSON.parse(response.getContentText());
  if (!result.ok) {
    console.error('Telegram API edit error:', result);
    throw new Error(result.description || 'Telegram API edit error');
  }
  
  return result;
}

// –¢—Ä–∏–≥–≥–µ—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
function checkNewRequests() {
  const sheet = getSheet();
  const lastRow = sheet.getLastRow();
  
  if (lastRow < 2) return; // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö
  
  const data = sheet.getRange(2, 1, lastRow - 1, 18).getValues();
  
  data.forEach((rowData, index) => {
    const row = index + 2; // +2 –ø–æ—Ç–æ–º—É —á—Ç–æ header –∏ –Ω—É–º–µ—Ä–∞—Ü–∏—è —Å 1
    
    try {
      if (!rowData[CONFIG.EXECUTOR_COL - 1] && rowData[CONFIG.STATUS_COL - 1] === '–≤ –æ—á–µ—Ä–µ–¥–∏') {
        sendRequestToTelegram(sheet, row, rowData);
        Utilities.sleep(1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
      }
    } catch (error) {
      console.error(`Error processing row ${row}:`, error);
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ Telegram
function sendRequestToTelegram(sheet, row, rowData) {
  const isEmergency = rowData[2] && rowData[2].toString().toLowerCase().includes('–∞–≤–∞—Ä–∏–π–Ω–∞—è');
  const photoUrl = rowData[14]; // –°—Ç–æ–ª–±–µ—Ü O (15)
  
  let message = `üìç <b>–ó–∞—è–≤–∫–∞ #${row}</b>\n\n` +
    `üçï <b>–ü–∏—Ü—Ü–µ—Ä–∏—è:</b> ${rowData[1] || '‚Äî'}\n` +
    `üîß <b>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:</b> ${rowData[2] || '‚Äî'}\n` +
    `üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${rowData[3] || '‚Äî'}\n` +
    `üìã <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> ${rowData[4] || '‚Äî'}\n` +
    `üë§ <b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:</b> ${rowData[5] || '‚Äî'}\n` +
    `üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${rowData[6] || '‚Äî'}\n` +
    `üì∏ <b>–§–æ—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã:</b> ${photoUrl ? `<a href="${photoUrl}">–°—Å—ã–ª–∫–∞</a>` : '–Ω–µ—Ç'}\n` +
    `üïì <b>–°—Ä–æ–∫:</b> ${rowData[8] ? Utilities.formatDate(new Date(rowData[8]), "GMT+5", "dd.MM.yyyy") : '‚Äî'}`;

  if (isEmergency) {
    message = `üö®üö®üö® <b>–ê–í–ê–†–ò–ô–ù–ê–Ø –ó–ê–Ø–í–ö–ê!</b> üö®üö®üö®\n\n${message}`;
    sheet.getRange(row, 1, 1, 18).setBackground('#FFCCCC');
  }

  const keyboard = {
    inline_keyboard: [[{
      text: '–ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É',
      callback_data: `show_executors:${row}`
    }]]
  };

  try {
    const response = sendMessage(CONFIG.CHAT_ID, message, null, keyboard);
    
    sheet.getRange(row, CONFIG.MESSAGE_ID_COL).setValue(response.result.message_id);
    sheet.getRange(row, CONFIG.STATUS_COL).setValue('–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
  } catch (error) {
    console.error(`Error sending request #${row}:`, error);
    sheet.getRange(row, CONFIG.STATUS_COL).setValue('–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
  }
}
