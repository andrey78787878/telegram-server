// telegram-handlers.js
module.exports = (app, userStates) => {
  const axios = require('axios');
  const BOT_TOKEN = process.env.BOT_TOKEN;
  const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
  const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
  const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;
  const AUTHORIZED_USERS = ['@EvelinaB87', '@Olim19', '@Oblayor_04_09', '@Andrey_Tkach_MB'];

  app.post('/webhook', async (req, res) => {
    const body = req.body;
    res.sendStatus(200);

    if (!body.message && !body.callback_query) return;

    const message = body.message || body.callback_query.message;
    const chat = message.chat;
    const text = body.message?.text;
    const from = body.message?.from || body.callback_query?.from;
    const callbackData = body.callback_query?.data;
    const username = from?.username ? `@${from.username}` : '';

    // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    if (text === '/start') {
      await axios.post(`${TELEGRAM_API}/sendMessage`, {
        chat_id: chat.id,
        text: '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏ üõ†Ô∏è\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∞–º–∏.',
      });
      return;
    }

    // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /–º–æ–∏
    if (text === '/–º–æ–∏') {
      if (chat.type !== 'private') {
        await axios.post(`${TELEGRAM_API}/sendMessage`, {
          chat_id: chat.id,
          text: 'üëã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –ª–∏—á–∫—É –±–æ—Ç—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏.',
        });
        return;
      }

      await axios.post(`${TELEGRAM_API}/sendMessage`, {
        chat_id: chat.id,
        text: 'üîç –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞—à–∏ –∑–∞—è–≤–∫–∏... (—Ç—É—Ç –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫)',
      });
      // üîª –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥–∞ –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ username
      return;
    }

    // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    if (callbackData) {
      const [action, row, messageId] = callbackData.split('|');
      if (!AUTHORIZED_USERS.includes(username)) {
        await axios.post(`${TELEGRAM_API}/answerCallbackQuery`, {
          callback_query_id: body.callback_query.id,
          text: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.',
          show_alert: true,
        });
        return;
      }

      userStates[from.id] = userStates[from.id] || {};
      const state = userStates[from.id];

      if (action === 'in_progress') {
        state.row = row;
        state.username = username;

        await axios.post(`${GAS_WEB_APP_URL}`, {
          row,
          status: '–í —Ä–∞–±–æ—Ç–µ üü¢',
          executor: username,
          message_id: messageId,
        });

        await axios.post(`${TELEGRAM_API}/editMessageReplyMarkup`, {
          chat_id: chat.id,
          message_id: message.message_id,
          reply_markup: {
            inline_keyboard: [[
              { text: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ', callback_data: `done|${row}|${messageId}` },
              { text: '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏ üïê', callback_data: `wait|${row}|${messageId}` },
              { text: '–û—Ç–º–µ–Ω–∞ ‚õîÔ∏è', callback_data: `cancel|${row}|${messageId}` },
            ]],
          },
        });

        return;
      }

      if (action === 'done') {
        state.expectingPhoto = true;
        await axios.post(`${TELEGRAM_API}/sendMessage`, {
          chat_id: chat.id,
          text: 'üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç',
        });
        return;
      }

      if (action === 'wait') {
        await axios.post(`${GAS_WEB_APP_URL}`, {
          row,
          status: '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏ üïê',
          executor: username,
          message_id: messageId,
        });
        await axios.post(`${TELEGRAM_API}/sendMessage`, {
          chat_id: chat.id,
          text: '‚è≥ –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å "–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏"',
        });
        return;
      }

      if (action === 'cancel') {
        await axios.post(`${GAS_WEB_APP_URL}`, {
          row,
          status: '–û—Ç–º–µ–Ω–µ–Ω–æ ‚ùå',
          executor: username,
          message_id: messageId,
        });
        await axios.post(`${TELEGRAM_API}/sendMessage`, {
          chat_id: chat.id,
          text: 'üö´ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
        });
        return;
      }
    }

    // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ, —Å—É–º–º—ã, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ—Å–ª–µ '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'
    const state = userStates[from.id];
    if (!state) return;

    if (state.expectingPhoto && message.photo) {
      const fileId = message.photo[message.photo.length - 1].file_id;
      state.photoFileId = fileId;
      state.expectingPhoto = false;
      state.expectingSum = true;

      await axios.post(`${TELEGRAM_API}/sendMessage`, {
        chat_id: chat.id,
        text: 'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞–±–æ—Ç',
      });
      return;
    }

    if (state.expectingSum && text && !isNaN(Number(text))) {
      state.sum = text;
      state.expectingSum = false;
      state.expectingComment = true;

      await axios.post(`${TELEGRAM_API}/sendMessage`, {
        chat_id: chat.id,
        text: '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è',
      });
      return;
    }

    if (state.expectingComment && text) {
      state.comment = text;
      state.expectingComment = false;

      // ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª
      const fileUrl = `${TELEGRAM_API}/getFile?file_id=${state.photoFileId}`;
      const fileRes = await axios.get(fileUrl);
      const filePath = fileRes.data.result.file_path;
      const fileLink = `${TELEGRAM_FILE_API}/${filePath}`;

      // ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ GAS
      await axios.post(`${GAS_WEB_APP_URL}`, {
        row: state.row,
        photo: fileLink,
        sum: state.sum,
        comment: state.comment,
        username: state.username,
      });

      await axios.post(`${TELEGRAM_API}/sendMessage`, {
        chat_id: chat.id,
        text: '‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ –∑–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞',
      });

      delete userStates[from.id];
    }
  });
};
