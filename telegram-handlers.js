const axios = require('axios');

module.exports = (app, userStates) => {
  const BOT_TOKEN = process.env.BOT_TOKEN;
  const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
  const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;
  const EXECUTORS = ['@EvelinaB87', '@Olim19', '@Oblayor_04_09', '–¢–µ–∫—Å—Ç–æ–≤–æ–π –ø–æ–¥—Ä—è–¥—á–∏–∫'];
  const DELAY_BEFORE_DELETE = 15000;

  // ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================
  const sendMessage = async (chatId, text, options = {}) => {
    try {
      const res = await axios.post(`${TELEGRAM_API}/sendMessage`, {
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
        ...options
      });
      return res.data.result.message_id;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
      return null;
    }
  };

  const editMessage = async (chatId, messageId, text, replyMarkup) => {
    try {
      await axios.post(`${TELEGRAM_API}/editMessageText`, {
        chat_id: chatId,
        message_id: messageId,
        text,
        parse_mode: 'HTML',
        reply_markup: replyMarkup
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    }
  };

  const deleteMessage = async (chatId, messageId) => {
    try {
      await new Promise(resolve => setTimeout(resolve, DELAY_BEFORE_DELETE));
      await axios.post(`${TELEGRAM_API}/deleteMessage`, {
        chat_id: chatId,
        message_id: messageId
      });
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    }
  };

  const cleanupMessages = async (chatId, state) => {
    try {
      const messagesToDelete = [
        ...(state.serviceMessages || []),
        ...(state.userResponses || [])
      ];
      
      await Promise.all(messagesToDelete.map(msgId => 
        deleteMessage(chatId, msgId)
      ));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
  };

  // ==================== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================
  const handleNewRequest = async (chatId, row) => {
    try {
      const keyboard = {
        inline_keyboard: [
          [{
            text: '–ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É',
            callback_data: `show_executors:${row}`
          }]
        ]
      };
      
      await sendMessage(chatId, `üìç –ó–∞—è–≤–∫–∞ #${row} –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ`, { reply_markup: keyboard });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏:', error);
    }
  };

  const showExecutors = async (chatId, messageId, row) => {
    try {
      const keyboard = {
        inline_keyboard: EXECUTORS.map(executor => [
          { text: executor, callback_data: `select_executor:${row}:${executor}` }
        ])
      };
      
      await editMessage(chatId, messageId, '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', keyboard);
      userStates[chatId] = { row, serviceMessages: [messageId] };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:', error);
    }
  };

  const assignExecutor = async (chatId, row, executor, originalMessageId) => {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets
      const gasResponse = await axios.post(GAS_WEB_APP_URL, {
        action: 'in_progress',
        row,
        executor,
        message_id: originalMessageId
      });

      if (gasResponse.data?.error) throw new Error(gasResponse.data.error);

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
      const textRes = await axios.post(GAS_WEB_APP_URL, {
        action: 'getRequestText',
        row
      });

      const updatedText = `${textRes.data?.text || ''}\n\nüü¢ –í —Ä–∞–±–æ—Ç–µ\nüë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executor}`;
      
      const buttons = {
        inline_keyboard: [
          [
            { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `done:${row}` },
            { text: '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏', callback_data: `delayed:${row}` },
            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancelled:${row}` }
          ]
        ]
      };

      await editMessage(chatId, originalMessageId, updatedText, buttons);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      userStates[chatId] = {
        executor,
        row,
        originalMessageId,
        stage: 'awaiting_photo',
        serviceMessages: [],
        userResponses: []
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', error);
      await sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è');
    }
  };

  const handlePhoto = async (chatId, photo, messageId) => {
    try {
      const fileRes = await axios.get(`${TELEGRAM_API}/getFile?file_id=${photo[photo.length-1].file_id}`);
      const photoUrl = `${TELEGRAM_API.replace('/bot', '/file/bot')}/${fileRes.data.result.file_path}`;
      
      userStates[chatId] = {
        ...userStates[chatId],
        photoUrl,
        userResponses: [...(userStates[chatId].userResponses || []), messageId],
        stage: 'awaiting_amount'
      };

      const prompt = await sendMessage(chatId, 'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã:');
      userStates[chatId].serviceMessages = [prompt];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ:', error);
      await sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ');
    }
  };

  const handleAmount = async (chatId, text, messageId) => {
    try {
      userStates[chatId] = {
        ...userStates[chatId],
        amount: text,
        userResponses: [...(userStates[chatId].userResponses || []), messageId],
        stage: 'awaiting_comment'
      };
      
      const prompt = await sendMessage(chatId, 'üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞–±–æ—Ç–µ:');
      userStates[chatId].serviceMessages = [...(userStates[chatId].serviceMessages || []), prompt];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã:', error);
      await sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  };

  const completeRequest = async (chatId, comment, messageId) => {
    try {
      const state = userStates[chatId];
      if (!state) throw new Error('–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!state.executor || !state.row || !state.originalMessageId) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
      const gasResponse = await axios.post(GAS_WEB_APP_URL, {
        action: 'complete',
        row: state.row,
        photoUrl: state.photoUrl || '',
        amount: state.amount || '',
        comment: comment || '',
        executor: state.executor,
        message_id: state.originalMessageId
      });

      if (gasResponse.data?.error) throw new Error(gasResponse.data.error);

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const textRes = await axios.post(GAS_WEB_APP_URL, {
        action: 'getRequestText',
        row: state.row
      });

      const completedText = `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ\n` +
        `üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${state.executor}\n` +
        `üí∞ –°—É–º–º–∞: ${state.amount || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
        `üì∏ –§–æ—Ç–æ: ${state.photoUrl ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}\n` +
        `üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
        (textRes.data?.text || '');

      await editMessage(chatId, state.originalMessageId, completedText);
      await cleanupMessages(chatId, state);
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      delete userStates[chatId];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
      await sendMessage(chatId, `‚ö†Ô∏è –û—à–∏–±–∫–∞: ${error.message}`);
    }
  };

  // ==================== –û–ë–†–ê–ë–û–¢–ö–ê –í–•–û–î–Ø–©–ò–• –°–û–û–ë–©–ï–ù–ò–ô ====================
  app.post('/webhook', async (req, res) => {
    try {
      const { body } = req;
      res.sendStatus(200);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (–Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫)
      if (body.callback_query) {
        const { data, message, id: callbackId } = body.callback_query;
        const chatId = message.chat.id;
        const messageId = message.message_id;
        const [action, row, executor] = data.split(':');

        // –û—Ç–≤–µ—Ç –Ω–∞ callback
        await axios.post(`${TELEGRAM_API}/answerCallbackQuery`, {
          callback_query_id: callbackId
        });

        switch(action) {
          case 'show_executors':
            await showExecutors(chatId, messageId, row);
            break;

          case 'select_executor':
            if (executor === '–¢–µ–∫—Å—Ç–æ–≤–æ–π –ø–æ–¥—Ä—è–¥—á–∏–∫') {
              userStates[chatId] = { row, awaitingManualExecutor: true };
              await sendMessage(chatId, '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞:');
              break;
            }

            const messageIdRes = await axios.post(GAS_WEB_APP_URL, {
              action: 'getMessageId',
              row
            });

            if (messageIdRes.data?.message_id) {
              await assignExecutor(chatId, row, executor, messageIdRes.data.message_id);
            }
            break;

          case 'done':
            const msgIdRes = await axios.post(GAS_WEB_APP_URL, {
              action: 'getMessageId',
              row
            });

            if (msgIdRes.data?.message_id) {
              userStates[chatId] = {
                row,
                originalMessageId: msgIdRes.data.message_id,
                stage: 'awaiting_photo'
              };
              await sendMessage(chatId, 'üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:');
            }
            break;

          case 'delayed':
            await axios.post(GAS_WEB_APP_URL, { action: 'delayed', row });
            await editMessage(chatId, messageId, `${message.text}\n\n‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏`, {
              inline_keyboard: [
                [{ text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `done:${row}` }]
              ]
            });
            break;

          case 'cancelled':
            await axios.post(GAS_WEB_APP_URL, { action: 'cancelled', row });
            await editMessage(chatId, messageId, `${message.text}\n\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ`);
            break;
        }
      } 
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      else if (body.message) {
        const { chat, text, photo, message_id } = body.message;
        const chatId = chat.id;
        const state = userStates[chatId];

        if (!state) return;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
        if (state.awaitingManualExecutor) {
          const messageIdRes = await axios.post(GAS_WEB_APP_URL, {
            action: 'getMessageId',
            row: state.row
          });

          if (messageIdRes.data?.message_id) {
            await assignExecutor(chatId, state.row, text, messageIdRes.data.message_id);
          }
          return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —ç—Ç–∞–ø–∞–º —Ä–∞–±–æ—Ç—ã
        switch(state.stage) {
          case 'awaiting_photo':
            if (photo) {
              await handlePhoto(chatId, photo, message_id);
            } else {
              await sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.');
            }
            break;

          case 'awaiting_amount':
            await handleAmount(chatId, text, message_id);
            break;

          case 'awaiting_comment':
            await completeRequest(chatId, text, message_id);
            break;
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ webhook:', error);
    }
  });

  // ==================== –ò–ù–¢–ï–†–§–ï–ô–° –î–õ–Ø GAS ====================
  return {
    handleNewRequest,
    cleanupMessages
  };
};
