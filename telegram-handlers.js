const axios = require('axios');
const FormData = require('form-data');

const BOT_TOKEN = process.env.BOT_TOKEN;
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;

const MESSAGE_LIFETIME = 60000;
const MANAGERS = ['@Andrey_Tkach_MB', '@Andrey_tkach_y'];
const EXECUTORS = ['@Andrey_Tkach_MB', '@Andrey_tkach_y'];
const AUTHORIZED_USERS = [...new Set([...MANAGERS, ...EXECUTORS])];
const userStorage = new Map();
const userStates = {};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function extractRowFromCallbackData(callbackData) {
  if (!callbackData) return null;
  const parts = callbackData.split(':');
  return parts.length > 1 ? parseInt(parts[1], 10) : null;
}

function extractRowFromMessage(text) {
  if (!text) return null;
  const match = text.match(/#(\d+)/);
  return match ? parseInt(match[1], 10) : null;
}

function parseRequestMessage(text) {
  if (!text) return null;
  
  const result = {};
  const lines = text.split('\n');
  
  lines.forEach(line => {
    if (line.includes('–ü–∏—Ü—Ü–µ—Ä–∏—è:')) result.pizzeria = line.split(':')[1].trim();
    if (line.includes('–ü—Ä–æ–±–ª–µ–º–∞:')) result.problem = line.split(':')[1].trim();
    if (line.includes('–°—Ä–æ–∫:')) result.deadline = line.split(':')[1].trim();
  });
  
  return result;
}

function formatInProgressMessage(row, requestData, executor) {
  return `
üìå –ó–∞—è–≤–∫–∞ #${row}
üè¢ –ü–∏—Ü—Ü–µ—Ä–∏—è: ${requestData?.pizzeria || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üîß –ü—Ä–æ–±–ª–µ–º–∞: ${requestData?.problem || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üïì –°—Ä–æ–∫: ${requestData?.deadline || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üü¢ –í —Ä–∞–±–æ—Ç–µ (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executor})
  `.trim();
}

function formatCompletionMessage(data, photoUrl = null) {
  return `
‚úÖ –ó–∞—è–≤–∫–∞ #${data.row} ${data.isEmergency ? 'üö® (–ê–í–ê–†–ò–ô–ù–ê–Ø)' : ''} –∑–∞–∫—Ä—ã—Ç–∞
${photoUrl ? `\nüì∏ ${photoUrl}\n` : ''}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${data.comment || '–Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}
üí∞ –°—É–º–º–∞: ${data.sum || '0'} —Å—É–º
üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${data.executor}
${data.delayDays > 0 ? `üî¥ –ü—Ä–æ—Å—Ä–æ—á–∫–∞: ${data.delayDays} –¥–Ω.` : ''}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üè¢ –ü–∏—Ü—Ü–µ—Ä–∏—è: ${data.originalRequest?.pizzeria || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üîß –ü—Ä–æ–±–ª–µ–º–∞: ${data.originalRequest?.problem || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
  `.trim();
}

async function sendMessage(chatId, text, options = {}) {
  try {
    return await axios.post(`${TELEGRAM_API}/sendMessage`, {
      chat_id: chatId,
      text,
      parse_mode: 'HTML',
      ...options
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.response?.data);
    throw error;
  }
}

async function editMessageSafe(chatId, messageId, text, options = {}) {
  try {
    return await axios.post(`${TELEGRAM_API}/editMessageText`, {
      chat_id: chatId,
      message_id: messageId,
      text,
      parse_mode: 'HTML',
      ...options
    });
  } catch (error) {
    if (error.response?.data?.description?.includes('message to edit not found')) {
      return await sendMessage(chatId, text, options);
    }
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error.response?.data);
    throw error;
  }
}

async function deleteMessageSafe(chatId, messageId) {
  try {
    return await axios.post(`${TELEGRAM_API}/deleteMessage`, {
      chat_id: chatId,
      message_id: messageId
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error.response?.data);
    return null;
  }
}

async function sendToGAS(data) {
  try {
    const response = await axios.post(GAS_WEB_APP_URL, data);
    console.log('–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ GAS:', response.data);
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ GAS:', error.message);
    throw error;
  }
}

async function notifyManagers(row, requestData) {
  const emergencyMessage = `
üö®üö®üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –ó–ê–Ø–í–ö–ê #${row} üö®üö®üö®
üè¢ –ü–∏—Ü—Ü–µ—Ä–∏—è: ${requestData?.pizzeria || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üîß –ü—Ä–æ–±–ª–µ–º–∞: ${requestData?.problem || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üïì –°—Ä–æ–∫: ${requestData?.deadline || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚ÄºÔ∏è –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –†–ï–ê–ö–¶–ò–Ø!
  `.trim();

  for (const manager of MANAGERS) {
    const managerId = userStorage.get(manager);
    if (managerId) {
      await sendMessage(managerId, emergencyMessage, {
        disable_notification: false
      }).catch(console.error);
    }
  }
}

module.exports = (app) => {
  app.post('/webhook', async (req, res) => {
    try {
      const body = req.body;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      if (body.message?.from) {
        const user = body.message.from;
        if (user.username) {
          userStorage.set(`@${user.username}`, user.id);
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
      if (body.callback_query) {
        const { callback_query } = body;
        const user = callback_query.from;
        const username = user.username ? `@${user.username}` : null;
        const chatId = callback_query.message.chat.id;
        const messageId = callback_query.message.message_id;
        const data = callback_query.data;
        const row = extractRowFromCallbackData(data) || extractRowFromMessage(callback_query.message.text);

        await axios.post(`${TELEGRAM_API}/answerCallbackQuery`, {
          callback_query_id: callback_query.id
        }).catch(console.error);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if (!AUTHORIZED_USERS.includes(username)) {
          const msg = await sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏');
          setTimeout(() => deleteMessageSafe(chatId, msg.data.result.message_id), 30000);
          return res.sendStatus(200);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –≤ —Ä–∞–±–æ—Ç—É
        if (data === 'accept') {
          if (!MANAGERS.includes(username)) {
            const msg = await sendMessage(chatId, '‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫–∏');
            setTimeout(() => deleteMessageSafe(chatId, msg.data.result.message_id), 30000);
            return res.sendStatus(200);
          }

          const isEmergency = callback_query.message.text?.includes('üö®');
          const requestData = parseRequestMessage(callback_query.message.text);

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
          const updatedText = callback_query.message.text.replace('üö®', '') + 
            `\n\nüü¢ –ü—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É (–º–µ–Ω–µ–¥–∂–µ—Ä: ${username})`;

          await editMessageSafe(chatId, messageId, updatedText, {
            reply_markup: {
              inline_keyboard: [
                [{ text: '–ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è', callback_data: `assign:${row}` }]
              ]
            }
          });

          // –î–ª—è –∞–≤–∞—Ä–∏–π–Ω—ã—Ö - —É–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
          if (isEmergency) {
            await notifyManagers(row, requestData);
            await sendToGAS({
              row,
              status: '–ê–≤–∞—Ä–∏–π–Ω–∞—è',
              isEmergency: true
            });
          } else {
            await sendToGAS({
              row,
              status: '–ü—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É',
              manager: username
            });
          }

          return res.sendStatus(200);
        }

        // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        if (data.startsWith('assign:')) {
          const buttons = EXECUTORS.map(executor => [{
            text: executor,
            callback_data: `set_executor:${executor}:${row}`
          }]);

          await editMessageSafe(chatId, messageId, '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', {
            reply_markup: { inline_keyboard: buttons }
          });

          return res.sendStatus(200);
        }

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        if (data.startsWith('set_executor:')) {
          const executor = data.split(':')[1];
          const requestData = parseRequestMessage(callback_query.message.text);
          const isEmergency = callback_query.message.text?.includes('üö®');

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
          await editMessageSafe(chatId, messageId, formatInProgressMessage(row, requestData, executor), {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `done:${row}` },
                  { text: '‚è≥ –û–∂–∏–¥–∞–µ—Ç', callback_data: `wait:${row}` },
                  { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel:${row}` }
                ]
              ]
            }
          });

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
          const executorId = userStorage.get(executor);
          if (executorId) {
            await sendMessage(executorId, `üìå –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #${row}\n\n` +
              `üè¢ –ü–∏—Ü—Ü–µ—Ä–∏—è: ${requestData?.pizzeria || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
              `üîß –ü—Ä–æ–±–ª–µ–º–∞: ${requestData?.problem || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
              `üïì –°—Ä–æ–∫: ${requestData?.deadline || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
          }

          await sendToGAS({
            row,
            status: '–í —Ä–∞–±–æ—Ç–µ',
            executor,
            isEmergency
          });

          return res.sendStatus(200);
        }

        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
        if (data.startsWith('done:')) {
          if (!EXECUTORS.includes(username)) {
            const msg = await sendMessage(chatId, '‚ùå –¢–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å –∑–∞—è–≤–∫–∏');
            setTimeout(() => deleteMessageSafe(chatId, msg.data.result.message_id), 30000);
            return res.sendStatus(200);
          }

          const requestData = parseRequestMessage(callback_query.message.text);
          const isEmergency = callback_query.message.text?.includes('üö®');

          userStates[chatId] = {
            stage: 'waiting_photo',
            row,
            username,
            messageId,
            originalRequest: requestData,
            isEmergency
          };

          await sendMessage(chatId, 'üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç', {
            reply_to_message_id: messageId
          });

          return res.sendStatus(200);
        }

        // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏
        if (data.startsWith('wait:')) {
          await sendToGAS({
            row,
            status: '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏'
          });

          await editMessageSafe(chatId, messageId, callback_query.message.text + '\n\n‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏');
          return res.sendStatus(200);
        }

        // –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏
        if (data.startsWith('cancel:')) {
          await sendToGAS({
            row,
            status: '–û—Ç–º–µ–Ω–µ–Ω–æ'
          });

          await editMessageSafe(chatId, messageId, callback_query.message.text + '\n\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞');
          return res.sendStatus(200);
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
      if (body.message && userStates[body.message.chat.id]) {
        const chatId = body.message.chat.id;
        const state = userStates[chatId];
        const msg = body.message;

        if (state.stage === 'waiting_photo' && msg.photo) {
          const fileId = msg.photo[msg.photo.length - 1].file_id;
          state.photoUrl = `${TELEGRAM_FILE_API}/${fileId}`;
          state.stage = 'waiting_sum';

          await sendMessage(chatId, 'üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Ä–∞–±–æ—Ç (–≤ —Å—É–º–∞—Ö)', {
            reply_to_message_id: state.messageId
          });
          return res.sendStatus(200);
        }

        if (state.stage === 'waiting_sum' && msg.text) {
          state.sum = msg.text;
          state.stage = 'waiting_comment';

          await sendMessage(chatId, 'üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', {
            reply_to_message_id: state.messageId
          });
          return res.sendStatus(200);
        }

        if (state.stage === 'waiting_comment' && msg.text) {
          state.comment = msg.text;

          const completionData = {
            row: state.row,
            status: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
            sum: state.sum,
            comment: state.comment,
            photoUrl: state.photoUrl,
            executor: state.username,
            originalRequest: state.originalRequest,
            isEmergency: state.isEmergency
          };

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
          await editMessageSafe(
            chatId,
            state.messageId,
            formatCompletionMessage(completionData),
            { disable_web_page_preview: false }
          );

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
          await sendToGAS(completionData);

          // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          delete userStates[chatId];

          return res.sendStatus(200);
        }
      }

      return res.sendStatus(200);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ webhook:', error);
      return res.status(500).send('Internal Server Error');
    }
  });
};
