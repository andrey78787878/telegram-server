const axios = require('axios');
const FormData = require('form-data');

const BOT_TOKEN = process.env.BOT_TOKEN;
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;

// –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const MANAGERS = ['@Andrey_Tkach_MB', '@Andrey_tkach_y'];
const EXECUTORS = ['@Andrey_Tkach_MB', '@Andrey_tkach_y'];
const AUTHORIZED_USERS = [...new Set([...MANAGERS, ...EXECUTORS])];

// –•—Ä–∞–Ω–∏–ª–∏—â–∞
const userStorage = new Map();
const userStates = {};
const requestLinks = new Map();
const activeOperations = new Set();

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function extractRowFromCallbackData(callbackData) {
  if (!callbackData) return null;
  const parts = callbackData.split(':');
  return parts.length > 1 ? parseInt(parts[parts.length - 1], 10) : null;
}

function extractRowFromMessage(text) {
  if (!text) return null;
  const match = text.match(/#(\d+)/);
  return match ? parseInt(match[1], 10) : null;
}

function parseRequestMessage(text) {
  if (!text) return null;
  
  const result = {};
  const lines = text.split('\n');
  
  lines.forEach(line => {
    if (line.includes('–ü–∏—Ü—Ü–µ—Ä–∏—è:')) result.pizzeria = line.split(':')[1].trim();
    if (line.includes('–ö–∞—Ç–µ–≥–æ—Ä–∏—è:')) result.category = line.split(':')[1].trim();
    if (line.includes('–ü—Ä–æ–±–ª–µ–º–∞:')) result.problem = line.split(':')[1].trim();
    if (line.includes('–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:')) result.initiator = line.split(':')[1].trim();
    if (line.includes('–¢–µ–ª–µ—Ñ–æ–Ω:')) result.phone = line.split(':')[1].trim();
    if (line.includes('–°—Ä–æ–∫:')) result.deadline = line.split(':')[1].trim();
  });
  
  return result;
}

function calculateDelayDays(deadline) {
  if (!deadline) return 0;
  try {
    const deadlineDate = new Date(deadline);
    const today = new Date();
    const diffTime = today - deadlineDate;
    return Math.max(0, Math.ceil(diffTime / (1000 * 60 * 60 * 24)));
  } catch (e) {
    console.error('Error calculating delay:', e);
    return 0;
  }
}

function formatCompletionMessage(data, diskUrl = null) {
  const photoLink = diskUrl ? diskUrl : (data.photoUrl ? data.photoUrl : null);
  return `
‚úÖ –ó–∞—è–≤–∫–∞ #${data.row} ${data.isEmergency ? 'üö® (–ê–í–ê–†–ò–ô–ù–ê–Ø)' : ''} –∑–∞–∫—Ä—ã—Ç–∞
${photoLink ? `\nüì∏ ${photoLink}\n` : ''}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${data.comment || '–Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}
üí∞ –°—É–º–º–∞: ${data.sum || '0'} —Å—É–º
üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${data.executor}
${data.delayDays > 0 ? `üî¥ –ü—Ä–æ—Å—Ä–æ—á–∫–∞: ${data.delayDays} –¥–Ω.` : ''}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üè¢ –ü–∏—Ü—Ü–µ—Ä–∏—è: ${data.originalRequest?.pizzeria || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üîß –ü—Ä–æ–±–ª–µ–º–∞: ${data.originalRequest?.problem || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
  `.trim();
}

async function sendMessage(chatId, text, options = {}) {
  try {
    return await axios.post(`${TELEGRAM_API}/sendMessage`, {
      chat_id: chatId,
      text,
      parse_mode: 'HTML',
      ...options
    });
  } catch (error) {
    console.error('Send message error:', error.response?.data);
    throw error;
  }
}

async function editMessageSafe(chatId, messageId, text, options = {}) {
  try {
    return await axios.post(`${TELEGRAM_API}/editMessageText`, {
      chat_id: chatId,
      message_id: messageId,
      text,
      parse_mode: 'HTML',
      ...options
    });
  } catch (error) {
    if (error.response?.data?.description?.includes('no text in the message') || 
        error.response?.data?.description?.includes('message to edit not found')) {
      return await sendMessage(chatId, text, options);
    }
    console.error('Edit message error:', error.response?.data);
    throw error;
  }
}

async function sendButtonsWithRetry(chatId, messageId, buttons, fallbackText) {
  try {
    const response = await axios.post(`${TELEGRAM_API}/editMessageReplyMarkup`, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: { inline_keyboard: buttons }
    });
    return response;
  } catch (error) {
    if (error.response?.data?.description?.includes('not modified')) {
      return { ok: true };
    }
    return await sendMessage(chatId, fallbackText, {
      reply_markup: { inline_keyboard: buttons }
    });
  }
}

async function deleteMessageSafe(chatId, messageId) {
  try {
    return await axios.post(`${TELEGRAM_API}/deleteMessage`, {
      chat_id: chatId,
      message_id: messageId
    });
  } catch (error) {
    console.error('Delete message error:', error.response?.data);
    return null;
  }
}

async function getTelegramFileUrl(fileId) {
  try {
    const { data } = await axios.get(`${TELEGRAM_API}/getFile?file_id=${fileId}`);
    return `${TELEGRAM_FILE_API}/${data.result.file_path}`;
  } catch (error) {
    console.error('Get file URL error:', error.response?.data);
    return null;
  }
}

async function sendToGAS(data) {
  try {
    const response = await axios.post(GAS_WEB_APP_URL, data);
    console.log('Data sent to GAS:', response.status);
    return response.data;
  } catch (error) {
    console.error('Error sending to GAS:', error.message);
    throw error;
  }
}

async function getGoogleDiskLink(row) {
  try {
    const res = await axios.post(`${GAS_WEB_APP_URL}?getDiskLink=true`, { row });
    return res.data.diskLink || null;
  } catch (error) {
    console.error('Get Google Disk link error:', error.response?.data);
    return null;
  }
}

async function notifyExecutor(executorUsername, row, chatId, messageId, requestData) {
  try {
    const executorId = userStorage.get(executorUsername);
    if (!executorId) {
      console.error(`–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ${executorUsername} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ`);
      return false;
    }

    requestLinks.set(`chat:${chatId}:${messageId}`, {
      executorId,
      executorUsername
    });

    const message = await sendMessage(
      executorId,
      `üìå –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #${row}\n\n` +
      `üçï –ü–∏—Ü—Ü–µ—Ä–∏—è: ${requestData?.pizzeria || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `üîß –ü—Ä–æ–±–ª–µ–º–∞: ${requestData?.problem || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `üïì –°—Ä–æ–∫: ${requestData?.deadline || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
      `‚ö†Ô∏è –ü—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é`,
      { 
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `done:${row}:${chatId}:${messageId}` },
              { text: '‚è≥ –û–∂–∏–¥–∞–µ—Ç', callback_data: `wait:${row}:${chatId}:${messageId}` },
              { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel:${row}:${chatId}:${messageId}` }
            ]
          ]
        },
        disable_notification: false 
      }
    );

    requestLinks.set(`ls:${executorId}:${message.result.message_id}`, {
      chatId,
      messageId
    });

    return true;
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –õ–°:', e);
    return false;
  }
}

async function clearUserState(chatId) {
  const state = userStates[chatId];
  if (!state) return;

  await Promise.all(
    state.serviceMessages.map(id => 
      deleteMessageSafe(chatId, id).catch(console.error)
    )
  );
  
  delete userStates[chatId];
}

async function syncRequestStatus(chatId, messageId, completionData) {
  const operationKey = `sync-${chatId}-${messageId}`;
  
  if (activeOperations.has(operationKey)) {
    console.log(`–û–ø–µ—Ä–∞—Ü–∏—è ${operationKey} —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è`);
    return;
  }
  
  activeOperations.add(operationKey);
  
  try {
    // 1. –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const messageText = formatCompletionMessage(completionData, completionData.photoUrl);
    const editResult = await editMessageSafe(chatId, messageId, messageText, {
      disable_web_page_preview: false
    });

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º –õ–° –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    if (completionData.isFromLS) {
      const lsEntries = Array.from(requestLinks.entries())
        .filter(([key, val]) => key.startsWith('ls:') && 
               val.chatId === chatId && 
               val.messageId === messageId);
      
      for (const [lsKey, lsVal] of lsEntries) {
        const [, lsChatId, lsMessageId] = lsKey.split(':');
        await editMessageSafe(
          lsChatId, 
          lsMessageId,
          `‚úÖ –ó–∞—è–≤–∫–∞ #${completionData.row} –∑–∞–∫—Ä—ã—Ç–∞\n` +
          `üì∏ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n` +
          `üí∞ –°—É–º–º–∞: ${completionData.sum || '0'} —Å—É–º\n` +
          `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${completionData.comment || '–Ω–µ—Ç'}`,
          { disable_web_page_preview: false }
        ).catch(e => console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –õ–°:', e));
      }
    }

    // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GAS
    await sendToGAS(completionData).catch(e => console.error("–û—à–∏–±–∫–∞ GAS:", e));

    // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–∏—Å–∫ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã
    setTimeout(async () => {
      try {
        const diskUrl = await getGoogleDiskLink(completionData.row);
        if (diskUrl) {
          await editMessageSafe(
            chatId, 
            messageId, 
            formatCompletionMessage(completionData, diskUrl),
            { disable_web_page_preview: false }
          );
        }
      } catch (e) {
        console.error('Error updating disk link:', e);
      } finally {
        activeOperations.delete(operationKey);
      }
    }, 180000);

    await sendButtonsWithRetry(chatId, messageId, []);
  } catch (e) {
    console.error('Error syncing request status:', e);
    activeOperations.delete(operationKey);
  }
}

module.exports = (app) => {
  app.post('/webhook', async (req, res) => {
    try {
      const body = req.body;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      if (body.message?.from) {
        const user = body.message.from;
        if (user.username) {
          userStorage.set(`@${user.username}`, user.id);
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query
      if (body.callback_query) {
        const { callback_query } = body;
        const user = callback_query.from;
        
        if (user.username) {
          userStorage.set(`@${user.username}`, user.id);
        }

        const msg = callback_query.message;
        const chatId = msg.chat.id;
        const messageId = msg.message_id;
        const username = user.username ? `@${user.username}` : null;
        const data = callback_query.data;

        // –û—Ç–≤–µ—Ç –Ω–∞ callback_query
        try {
          await axios.post(`${TELEGRAM_API}/answerCallbackQuery`, {
            callback_query_id: callback_query.id
          });
        } catch (e) {
          console.error('Answer callback error:', e.message);
        }

        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏
        const row = extractRowFromCallbackData(data) || extractRowFromMessage(msg.text || msg.caption);
        if (!row || isNaN(row)) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏');
          return res.sendStatus(200);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if (!AUTHORIZED_USERS.includes(username)) {
          const accessDeniedMsg = await sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.');
          setTimeout(() => deleteMessageSafe(chatId, accessDeniedMsg.data.result.message_id), 3000);
          return res.sendStatus(200);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
        if (data.startsWith('accept') || data === 'accept') {
          if (!MANAGERS.includes(username)) {
            const notManagerMsg = await sendMessage(chatId, '‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∑–∞—è–≤–∫–∏.');
            setTimeout(() => deleteMessageSafe(chatId, notManagerMsg.data.result.message_id), 3000);
            return res.sendStatus(200);
          }

          const isEmergency = msg.text?.includes('üö®') || msg.caption?.includes('üö®');
          
          // –î–ª—è –∞–≤–∞—Ä–∏–π–Ω—ã—Ö –∑–∞—è–≤–æ–∫
          if (isEmergency) {
            const requestData = parseRequestMessage(msg.text || msg.caption);
            
            const updatedText = `${msg.text || msg.caption}\n\nüö® –ê–í–ê–†–ò–ô–ù–ê–Ø –ó–ê–Ø–í–ö–ê - –¢–†–ï–ë–£–ï–¢–°–Ø –°–†–û–ß–ù–ê–Ø –†–ï–ê–ö–¶–ò–Ø!`;
            await editMessageSafe(chatId, messageId, updatedText);
            
            const allRecipients = [...new Set([...MANAGERS, ...EXECUTORS])];
            
            for (const recipient of allRecipients) {
              const recipientId = userStorage.get(recipient);
              if (recipientId) {
                await sendMessage(
                  recipientId,
                  `üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –ó–ê–Ø–í–ö–ê #${row}\n\n` +
                  `üè¢ –ü–∏—Ü—Ü–µ—Ä–∏—è: ${requestData?.pizzeria || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                  `üîß –ü—Ä–æ–±–ª–µ–º–∞: ${requestData?.problem || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                  `üïì –°—Ä–æ–∫: ${requestData?.deadline || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
                  `‚ÄºÔ∏è –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –†–ï–ê–ö–¶–ò–Ø!`,
                  {
                    reply_markup: {
                      inline_keyboard: [
                        [
                          { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `done:${row}:${chatId}:${messageId}` },
                          { text: '‚è≥ –û–∂–∏–¥–∞–µ—Ç', callback_data: `wait:${row}:${chatId}:${messageId}` },
                          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel:${row}:${chatId}:${messageId}` }
                        ]
                      ]
                    },
                    disable_notification: false
                  }
                ).catch(e => console.error(`Error sending to ${recipient}:`, e));
              }
            }
            
            await sendToGAS({
              row,
              status: '–ê–≤–∞—Ä–∏–π–Ω–∞—è',
              message_id: messageId,
              isEmergency: true
            });
            
            return res.sendStatus(200);
          }
  
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
          const buttons = EXECUTORS.map(e => [
            { text: e, callback_data: `executor:${e}:${row}:${chatId}:${messageId}` }
          ]);

          const chooseExecutorMsg = await sendMessage(chatId, `üë∑ –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}:`, {
            reply_to_message_id: messageId
          });

          setTimeout(async () => {
            try {
              await deleteMessageSafe(chatId, chooseExecutorMsg.data.result.message_id);
            } catch (e) {
              console.error('Error deleting choose executor message:', e);
            }
          }, 20000);

          await sendButtonsWithRetry(chatId, messageId, buttons, `–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}:`);
          return res.sendStatus(200);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        if (data.startsWith('executor:')) {
          const parts = data.split(':');
          const executorUsername = parts[1];
          const row = parts[2];
          const chatId = parts[3];
          const messageId = parts[4];
          
          // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
          if (msg.reply_to_message) {
            await deleteMessageSafe(chatId, msg.reply_to_message.message_id).catch(console.error);
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          const newText = `${msg.text || msg.caption}\n\nüü¢ –ó–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executorUsername})`;
          await editMessageSafe(chatId, messageId, newText);

          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
          const actionButtons = [
            [
              { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `done:${row}:${chatId}:${messageId}` },
              { text: '‚è≥ –û–∂–∏–¥–∞–µ—Ç', callback_data: `wait:${row}:${chatId}:${messageId}` },
              { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel:${row}:${chatId}:${messageId}` }
            ]
          ];

          await sendButtonsWithRetry(chatId, messageId, actionButtons, `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}:`);

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É —á–∞—Ç–æ–º –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
          const executorId = userStorage.get(executorUsername);
          if (executorId) {
            requestLinks.set(`chat:${chatId}:${messageId}`, { executorId, executorUsername });
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
          const notificationMsg = await sendMessage(
            chatId,
            `üì¢ ${executorUsername}, –≤–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #${row}!`,
            { reply_to_message_id: messageId }
          );

          // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥
          setTimeout(() => {
            deleteMessageSafe(chatId, notificationMsg.data.result.message_id).catch(console.error);
          }, 20000);

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –õ–°
          try {
            if (executorId) {
              const requestData = parseRequestMessage(msg.text || msg.caption);
              
              const lsMessage = await sendMessage(
                executorId,
                `üìå –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #${row}\n\n` +
                `üçï –ü–∏—Ü—Ü–µ—Ä–∏—è: ${requestData?.pizzeria || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                `üîß –ü—Ä–æ–±–ª–µ–º–∞: ${requestData?.problem || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                `üïì –°—Ä–æ–∫: ${requestData?.deadline || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
                `‚ö†Ô∏è –ü—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é`,
                { 
                  reply_markup: {
                    inline_keyboard: [
                      [
                        { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `done:${row}:${chatId}:${messageId}` },
                        { text: '‚è≥ –û–∂–∏–¥–∞–µ—Ç', callback_data: `wait:${row}:${chatId}:${messageId}` },
                        { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel:${row}:${chatId}:${messageId}` }
                      ]
                    ]
                  },
                  disable_notification: false 
                }
              );

              // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –õ–° —Å —á–∞—Ç–æ–º
              requestLinks.set(`ls:${executorId}:${lsMessage.data.result.message_id}`, { chatId, messageId });
            }
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –õ–°:', e);
          }

          await sendToGAS({
            row,
            status: '–í —Ä–∞–±–æ—Ç–µ',
            executor: executorUsername,
            message_id: messageId
          });

          return res.sendStatus(200);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
        if (data.startsWith('done:')) {
          const parts = data.split(':');
          const row = parseInt(parts[1]);
          const sourceChatId = parts[2] || msg.chat.id;
          const sourceMessageId = parts[3] || msg.message_id;

          if (!EXECUTORS.includes(username)) {
            const notExecutorMsg = await sendMessage(msg.chat.id, '‚ùå –¢–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å –∑–∞—è–≤–∫–∏.');
            setTimeout(() => deleteMessageSafe(msg.chat.id, notExecutorMsg.data.result.message_id), 3000);
            return res.sendStatus(200);
          }

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ –¥–µ–π—Å—Ç–≤–∏–µ (—á–∞—Ç –∏–ª–∏ –õ–°)
          const isFromLS = msg.chat.id !== sourceChatId;
          let targetChatId = sourceChatId;
          let targetMessageId = sourceMessageId;

          // –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –õ–°, –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
          if (isFromLS) {
            const link = requestLinks.get(`ls:${msg.chat.id}:${msg.message_id}`);
            if (link) {
              targetChatId = link.chatId;
              targetMessageId = link.messageId;
            }
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∞–ª–∏ –ª–∏ —É–∂–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
          if (userStates[msg.chat.id]?.stage) {
            return res.sendStatus(200);
          }

          // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏
          const operationId = `done_${targetChatId}_${targetMessageId}_${Date.now()}`;
          
          // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
          const photoMsg = await sendMessage(
            msg.chat.id, 
            'üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç\n\n' +
            '‚ö†Ô∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel'
          );
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          userStates[msg.chat.id] = {
            operationId,
            stage: 'waiting_photo',
            row,
            username,
            messageId: targetMessageId,
            chatId: targetChatId,
            originalRequest: parseRequestMessage(msg.text || msg.caption),
            serviceMessages: [photoMsg.data.result.message_id],
            isEmergency: msg.text?.includes('üö®') || msg.caption?.includes('üö®'),
            isFromLS
          };

          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –æ—á–∏—Å—Ç–∫–∏
          setTimeout(() => {
            if (userStates[msg.chat.id]?.operationId === operationId) {
              delete userStates[msg.chat.id];
              deleteMessageSafe(msg.chat.id, photoMsg.data.result.message_id).catch(console.error);
            }
          }, 120000);

          return res.sendStatus(200);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏
        if (data.startsWith('wait:')) {
          if (!EXECUTORS.includes(username)) {
            const notExecutorMsg = await sendMessage(chatId, '‚ùå –¢–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏.');
            setTimeout(() => deleteMessageSafe(chatId, notExecutorMsg.data.result.message_id), 3000);
            return res.sendStatus(200);
          }

          const notificationMsg = await sendMessage(chatId, '‚è≥ –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å "–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏"', { 
            reply_to_message_id: messageId 
          });
          
          setTimeout(() => {
            deleteMessageSafe(chatId, notificationMsg.data.result.message_id).catch(console.error);
          }, 20000);
          
          await sendToGAS({ 
            row: parseInt(data.split(':')[1]), 
            status: '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏' 
          });
          
          return res.sendStatus(200);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏
        if (data.startsWith('cancel:')) {
          if (!EXECUTORS.includes(username)) {
            const notExecutorMsg = await sendMessage(chatId, '‚ùå –¢–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–º–µ–Ω—è—Ç—å –∑–∞—è–≤–∫–∏.');
            setTimeout(() => deleteMessageSafe(chatId, notExecutorMsg.data.result.message_id), 3000);
            return res.sendStatus(200);
          }

          const notificationMsg = await sendMessage(chatId, 'üö´ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', { 
            reply_to_message_id: messageId 
          });
          
          setTimeout(() => {
            deleteMessageSafe(chatId, notificationMsg.data.result.message_id).catch(console.error);
          }, 20000);
          
          await sendToGAS({ 
            row: parseInt(data.split(':')[1]), 
            status: '–û—Ç–º–µ–Ω–µ–Ω–æ' 
          });
          
          return res.sendStatus(200);
        }
      }

   // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ñ–æ—Ç–æ, —Å—É–º–º–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
if (body.message && userStates[body.message.chat.id]) {
  const msg = body.message;
  const chatId = msg.chat.id;
  const state = userStates[chatId];

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
  if (msg.text === '/cancel') {
    await clearUserState(chatId);
    await sendMessage(chatId, '‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω');
    return res.sendStatus(200);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
   // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ñ–æ—Ç–æ, —Å—É–º–º–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
if (body.message && userStates[body.message.chat.id]) {
  const msg = body.message;
  const chatId = msg.chat.id;
  const state = userStates[chatId];

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
  if (msg.text === '/cancel') {
    await clearUserState(chatId);
    await sendMessage(chatId, '‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω');
    return res.sendStatus(200);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
  if (state.stage === 'waiting_photo' && msg.photo) {
    try {
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ñ–æ—Ç–æ
      await deleteMessageSafe(chatId, state.serviceMessages[0]);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ
      const fileId = msg.photo[msg.photo.length - 1].file_id;
      const fileUrl = await getTelegramFileUrl(fileId);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
      state.photoUrl = fileUrl;
      state.stage = 'waiting_sum';
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É
      const sumMessage = await sendMessage(chatId, 'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:');
      state.serviceMessages = [sumMessage.data.result.message_id]; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
      
      return res.sendStatus(200);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ:', e);
      await clearUserState(chatId);
      await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return res.sendStatus(200);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã
  if (state.stage === 'waiting_sum' && msg.text) {
    try {
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Å—É–º–º—ã
      await deleteMessageSafe(chatId, state.serviceMessages[0]);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ - —á–∏—Å–ª–æ
      const sum = msg.text.trim();
      if (!/^\d+$/.test(sum)) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã');
      }
      
      state.sum = sum;
      state.stage = 'waiting_comment';
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
      const commentMessage = await sendMessage(chatId, 'üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:');
      state.serviceMessages = [commentMessage.data.result.message_id]; // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
      
      return res.sendStatus(200);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã:', e);
      await clearUserState(chatId);
      await sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.');
      return res.sendStatus(200);
    }
  }
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
if (state.stage === 'waiting_comment' && msg.text) {
  try {
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    await deleteMessageSafe(chatId, state.serviceMessages[0]);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    const comment = msg.text;
    state.comment = comment;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
    const completionData = {
      row: state.row,
      photoUrl: state.photoUrl,
      sum: state.sum,
      comment: comment,
      executor: state.username,
      originalRequest: state.originalRequest,
      isEmergency: state.isEmergency,
      isFromLS: state.isFromLS,
      delayDays: calculateDelayDays(state.originalRequest?.deadline),
      message_id: state.messageId,
      status: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'
    };

    // 1. –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
    await editMessageSafe(
      state.chatId, 
      state.messageId, 
      formatCompletionMessage(completionData, state.photoUrl),
      { disable_web_page_preview: false }
    );

    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Apps Script
    await sendToGAS(completionData);

    // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    const finalText = `üìå –ó–∞—è–≤–∫–∞ #${state.row} –∑–∞–∫—Ä—ã—Ç–∞.\n` +
                     (state.photoUrl ? `üìé –§–æ—Ç–æ: ${state.photoUrl}\n` : '') +
                     `üí∞ –°—É–º–º–∞: ${state.sum || '0'} —Å—É–º\n` +
                     `üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${state.username}\n` +
                     `üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`;

    await sendMessage(chatId, finalText);

    // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–∏—Å–∫ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã
    setTimeout(async () => {
      try {
        const diskUrl = await getGoogleDiskLink(state.row);
        if (diskUrl) {
          await editMessageSafe(
            state.chatId, 
            state.messageId, 
            formatCompletionMessage(completionData, diskUrl),
            { disable_web_page_preview: false }
          );
        }
      } catch (e) {
        console.error('Error updating disk link:', e);
      }
    }, 180000);

    // 5. –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await sendButtonsWithRetry(state.chatId, state.messageId, []);

    // 6. –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    delete userStates[chatId];
    
    return res.sendStatus(200);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', e);
    await clearUserState(chatId);
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
    return res.sendStatus(200);
  }
}
