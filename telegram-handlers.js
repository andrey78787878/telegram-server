module.exports = (app, userStates) => {
  const axios = require('axios');
  const BOT_TOKEN = process.env.BOT_TOKEN;
  const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
  const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
  const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;

  const AUTHORIZED_USERS = [
    '@EvelinaB87',
    '@Olim19',
    '@Oblayor_04_09',
    '@Andrey_Tkach_MB',
    '@Davr_85'
  ];

  app.post('/webhook', async (req, res) => {
    const body = req.body;

    if (body.message) {
      const msg = body.message;
      const chatId = msg.chat.id;
      const user = msg.from.username ? '@' + msg.from.username : '‚Äî';
      const text = msg.text || '';
      const replyTo = msg.reply_to_message;

      const state = userStates[chatId] || {};

      if (state.waitingFor === 'photo' && msg.photo) {
        const fileId = msg.photo.pop().file_id;
        userStates[chatId].photo = fileId;
        userStates[chatId].waitingFor = 'sum';

        await sendMessage(chatId, 'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞–±–æ—Ç:');
        return res.sendStatus(200);
      }

      if (state.waitingFor === 'sum') {
        userStates[chatId].sum = text;
        userStates[chatId].waitingFor = 'comment';

        await sendMessage(chatId, 'üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:');
        return res.sendStatus(200);
      }

      if (state.waitingFor === 'comment') {
        userStates[chatId].comment = text;
        const { photo, sum, row, message_id } = userStates[chatId];

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
        const fileLink = await getFileLink(photo);
        const uploadRes = await axios.post(GAS_WEB_APP_URL, {
          photo: fileLink,
          sum: sum,
          comment: text,
          message_id: message_id,
          row: row,
          username: user,
          executor: user
        });

        const {
          delayDays,
          pizzaname,
          category,
          problem,
          initiator,
          driveUrl,
          rowNumber
        } = uploadRes.data;

        const finalText = 
`üìå –ó–∞—è–≤–∫–∞ #${rowNumber} –∑–∞–∫—Ä—ã—Ç–∞.
üìé –§–æ—Ç–æ: —Å—Å—ã–ª–∫–∞ (${driveUrl})
üí∞ –°—É–º–º–∞: ${sum} —Å—É–º
üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${user}
‚úÖ –°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–æ
üî¥ –ü—Ä–æ—Å—Ä–æ—á–∫–∞: ${delayDays} –¥–Ω.

üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${text}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìç –ó–∞—è–≤–∫–∞ #${rowNumber}
üè¢ –ü–∏—Ü—Ü–µ—Ä–∏—è: ${pizzaname}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}
üõ† –ü—Ä–æ–±–ª–µ–º–∞: ${problem}
üôã –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${initiator}`;

        await sendMessage(chatId, finalText);
        delete userStates[chatId];
        return res.sendStatus(200);
      }

      return res.sendStatus(200);
    }

    if (body.callback_query) {
      const query = body.callback_query;
      const msg = query.message;
      const chatId = msg.chat.id;
      const user = query.from.username ? '@' + query.from.username : '‚Äî';
      const data = query.data;
      const message_id = msg.message_id;
      const rowMatch = msg.text.match(/#(\d+)/);
      const row = rowMatch ? rowMatch[1] : null;

      if (!AUTHORIZED_USERS.includes(user)) {
        await answerCallback(query.id, '‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
        return res.sendStatus(200);
      }

      if (data === 'accept') {
        // –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        const inlineKeyboard = AUTHORIZED_USERS.map(name => [{ text: name, callback_data: `executor_${name}` }]);
        await sendMessage(chatId, `üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞—è–≤–∫–∏ #${row}:`, {
          reply_markup: { inline_keyboard: inlineKeyboard }
        });

        await answerCallback(query.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è');
        return res.sendStatus(200);
      }

      if (data.startsWith('executor_')) {
        const executor = data.replace('executor_', '');
        await axios.post(GAS_WEB_APP_URL, {
          status: '–í —Ä–∞–±–æ—Ç–µ',
          message_id,
          row,
          executor
        });

        await editMessage(chatId, message_id, `${msg.text}\n\nüë∑ –ù–∞–∑–Ω–∞—á–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executor}`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: 'done' }],
              [{ text: 'üöö –û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏', callback_data: 'wait' }],
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]
            ]
          }
        });

        // –¢–µ–≥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        await sendMessage(chatId, `–ó–∞—è–≤–∫–∞ #${row} ‚Äî –Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ${executor}`, {
          reply_to_message_id: message_id
        });

        await answerCallback(query.id, '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω');
        return res.sendStatus(200);
      }

      if (data === 'done') {
        userStates[chatId] = {
          waitingFor: 'photo',
          message_id,
          row
        };

        await sendMessage(chatId, 'üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç:');
        await answerCallback(query.id);
        return res.sendStatus(200);
      }

      if (data === 'cancel' || data === 'wait') {
        await axios.post(GAS_WEB_APP_URL, {
          status: data === 'cancel' ? '–û—Ç–º–µ–Ω–µ–Ω–æ' : '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏',
          message_id,
          row
        });

        await editMessage(chatId, message_id, `${msg.text}\n\n‚èπ –°—Ç–∞—Ç—É—Å: ${data === 'cancel' ? '–û—Ç–º–µ–Ω–µ–Ω–æ' : '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏'}`);
        await answerCallback(query.id, '–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω');
        return res.sendStatus(200);
      }

      await answerCallback(query.id);
      return res.sendStatus(200);
    }

    res.sendStatus(200);
  });

  async function sendMessage(chatId, text, options = {}) {
    return axios.post(`${TELEGRAM_API}/sendMessage`, {
      chat_id: chatId,
      text,
      parse_mode: 'HTML',
      ...options
    });
  }

  async function editMessage(chatId, messageId, text, options = {}) {
    return axios.post(`${TELEGRAM_API}/editMessageText`, {
      chat_id: chatId,
      message_id: messageId,
      text,
      parse_mode: 'HTML',
      ...options
    });
  }

  async function answerCallback(callbackQueryId, text = '') {
    return axios.post(`${TELEGRAM_API}/answerCallbackQuery`, {
      callback_query_id: callbackQueryId,
      text,
      show_alert: false
    });
  }

  async function getFileLink(fileId) {
    const res = await axios.get(`${TELEGRAM_API}/getFile?file_id=${fileId}`);
    const path = res.data.result.file_path;
    return `${TELEGRAM_FILE_API}/${path}`;
  }
};
