const axios = require('axios');
const FormData = require('form-data');

const BOT_TOKEN = process.env.BOT_TOKEN;
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;

// –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const MANAGERS = ['@Andrey_Tkach_MB', '@Andrey_tkach_y'];
const EXECUTORS = ['@Andrey_Tkach_MB', '@Andrey_tkach_y'];
const AUTHORIZED_USERS = [...new Set([...MANAGERS, ...EXECUTORS])];

// –•—Ä–∞–Ω–∏–ª–∏—â–∞
const userStorage = new Map();
const userStates = {};
const requestLinks = new Map(); // –î–ª—è —Å–≤—è–∑–∏ —á–∞—Ç-–õ–°: { chatId: { executorId, messageId } }

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
// ... (–≤—Å–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ)

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
async function syncRequestStatus(chatId, messageId, completionData) {
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
    await editMessageSafe(
      chatId, 
      messageId, 
      formatCompletionMessage(completionData, completionData.photoUrl),
      { disable_web_page_preview: false }
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ GAS
    await sendToGAS(completionData);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Google Disk
    setTimeout(async () => {
      try {
        const diskUrl = await getGoogleDiskLink(completionData.row);
        if (diskUrl) {
          await editMessageSafe(
            chatId, 
            messageId, 
            formatCompletionMessage(completionData, diskUrl),
            { disable_web_page_preview: false }
          );
        }
      } catch (e) {
        console.error('Error updating disk link:', e);
      }
    }, 180000);

    await sendButtonsWithRetry(chatId, messageId, []);
  } catch (e) {
    console.error('Error syncing request status:', e);
  }
}

module.exports = (app) => {
  app.post('/webhook', async (req, res) => {
    try {
      const body = req.body;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      if (body.message?.from) {
        const user = body.message.from;
        if (user.username) {
          userStorage.set(`@${user.username}`, user.id);
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query
      if (body.callback_query) {
        const { callback_query } = body;
        const user = callback_query.from;
        
        if (user.username) {
          userStorage.set(`@${user.username}`, user.id);
        }

        const msg = callback_query.message;
        const chatId = msg.chat.id;
        const messageId = msg.message_id;
        const username = user.username ? `@${user.username}` : null;
        const data = callback_query.data;

        await axios.post(`${TELEGRAM_API}/answerCallbackQuery`, {
          callback_query_id: callback_query.id
        }).catch(e => console.error('Answer callback error:', e));

        const row = extractRowFromCallbackData(data) || extractRowFromMessage(msg.text || msg.caption);
        if (!row || isNaN(row)) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏');
          await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏');
          return res.sendStatus(200);
        }

        if (!AUTHORIZED_USERS.includes(username)) {
          const accessDeniedMsg = await sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.');
          setTimeout(() => deleteMessageSafe(chatId, accessDeniedMsg.data.result.message_id), 30000);
          return res.sendStatus(200);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
        if (data.startsWith('accept') || data === 'accept') {
          if (!MANAGERS.includes(username)) {
            const notManagerMsg = await sendMessage(chatId, '‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∑–∞—è–≤–∫–∏.');
            setTimeout(() => deleteMessageSafe(chatId, notManagerMsg.data.result.message_id), 30000);
            return res.sendStatus(200);
          }

          const isEmergency = msg.text?.includes('üö®') || msg.caption?.includes('üö®');
          
          if (isEmergency) {
            const requestData = parseRequestMessage(msg.text || msg.caption);
            
            const updatedText = `${msg.text || msg.caption}\n\nüö® –ê–í–ê–†–ò–ô–ù–ê–Ø –ó–ê–Ø–í–ö–ê - –¢–†–ï–ë–£–ï–¢–°–Ø –°–†–û–ß–ù–ê–Ø –†–ï–ê–ö–¶–ò–Ø!`;
            await editMessageSafe(chatId, messageId, updatedText);
            
            const allRecipients = [...new Set([...MANAGERS, ...EXECUTORS])];
            
            for (const recipient of allRecipients) {
              const recipientId = userStorage.get(recipient);
              if (recipientId) {
                await sendMessage(
                  recipientId,
                  `üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –ó–ê–Ø–í–ö–ê #${row}\n\n` +
                  `üè¢ –ü–∏—Ü—Ü–µ—Ä–∏—è: ${requestData?.pizzeria || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                  `üîß –ü—Ä–æ–±–ª–µ–º–∞: ${requestData?.problem || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                  `üïì –°—Ä–æ–∫: ${requestData?.deadline || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
                  `‚ÄºÔ∏è –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –†–ï–ê–ö–¶–ò–Ø!`,
                  {
                    reply_markup: {
                      inline_keyboard: [
                        [
                          { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `done:${row}:${chatId}:${messageId}` },
                          { text: '‚è≥ –û–∂–∏–¥–∞–µ—Ç', callback_data: `wait:${row}:${chatId}:${messageId}` },
                          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel:${row}:${chatId}:${messageId}` }
                        ]
                      ]
                    },
                    disable_notification: false
                  }
                ).catch(e => console.error(`Error sending to ${recipient}:`, e));
              }
            }
            
            await sendToGAS({
              row,
              status: '–ê–≤–∞—Ä–∏–π–Ω–∞—è',
              message_id: messageId,
              isEmergency: true
            });
            
            return res.sendStatus(200);
          }
          
          const updatedText = `${msg.text || msg.caption}\n\nüü¢ –ó–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ`;
          await editMessageSafe(chatId, messageId, updatedText);

          const buttons = EXECUTORS.map(e => [
            { text: e, callback_data: `executor:${e}:${row}:${chatId}:${messageId}` }
          ]);

          const chooseExecutorMsg = await sendMessage(chatId, `üë∑ –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}:`, {
            reply_to_message_id: messageId
          });

          setTimeout(async () => {
            try {
              await deleteMessageSafe(chatId, chooseExecutorMsg.data.result.message_id);
            } catch (e) {
              console.error('Error deleting choose executor message:', e);
            }
          }, 60000);

          await sendButtonsWithRetry(chatId, messageId, buttons, `–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}:`);
          return res.sendStatus(200);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        if (data.startsWith('executor:')) {
          const parts = data.split(':');
          const executorUsername = parts[1];
          const row = parts[2];
          const chatId = parts[3];
          const messageId = parts[4];
          
          if (msg.reply_to_message) {
            await deleteMessageSafe(chatId, msg.reply_to_message.message_id);
          }

          const newText = `${msg.text || msg.caption}\n\nüü¢ –ó–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executorUsername})`;
          await editMessageSafe(chatId, messageId, newText);

          const actionButtons = [
            [
              { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `done:${row}:${chatId}:${messageId}` },
              { text: '‚è≥ –û–∂–∏–¥–∞–µ—Ç', callback_data: `wait:${row}:${chatId}:${messageId}` },
              { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel:${row}:${chatId}:${messageId}` }
            ]
          ];

          await sendButtonsWithRetry(chatId, messageId, actionButtons, `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}:`);

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É —á–∞—Ç–æ–º –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
          const executorId = userStorage.get(executorUsername);
          if (executorId) {
            requestLinks.set(`chat:${chatId}:${messageId}`, { executorId, executorUsername });
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–î–ù–û —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
          await sendMessage(
            chatId,
            `üì¢ ${executorUsername}, –≤–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #${row}!`,
            { reply_to_message_id: messageId }
          );

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –õ–° (1 –ø–æ–ø—ã—Ç–∫–∞)
          try {
            if (executorId) {
              const requestData = parseRequestMessage(msg.text || msg.caption);
              
              const lsMessage = await sendMessage(
                executorId,
                `üìå –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #${row}\n\n` +
                `üçï –ü–∏—Ü—Ü–µ—Ä–∏—è: ${requestData?.pizzeria || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                `üîß –ü—Ä–æ–±–ª–µ–º–∞: ${requestData?.problem || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                `üïì –°—Ä–æ–∫: ${requestData?.deadline || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
                `‚ö†Ô∏è –ü—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é`,
                { 
                  reply_markup: {
                    inline_keyboard: [
                      [
                        { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `done:${row}:${chatId}:${messageId}` },
                        { text: '‚è≥ –û–∂–∏–¥–∞–µ—Ç', callback_data: `wait:${row}:${chatId}:${messageId}` },
                        { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel:${row}:${chatId}:${messageId}` }
                      ]
                    ]
                  },
                  disable_notification: false 
                }
              );

              // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –õ–° —Å —á–∞—Ç–æ–º
              requestLinks.set(`ls:${executorId}:${lsMessage.data.result.message_id}`, { chatId, messageId });
            }
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –õ–°:', e);
          }

          await sendToGAS({
            row,
            status: '–í —Ä–∞–±–æ—Ç–µ',
            executor: executorUsername,
            message_id: messageId
          });

          return res.sendStatus(200);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
        if (data.startsWith('done:')) {
          const parts = data.split(':');
          const row = parseInt(parts[1]);
          const sourceChatId = parts[2] || msg.chat.id;
          const sourceMessageId = parts[3] || msg.message_id;

          if (!EXECUTORS.includes(username)) {
            const notExecutorMsg = await sendMessage(msg.chat.id, '‚ùå –¢–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å –∑–∞—è–≤–∫–∏.');
            setTimeout(() => deleteMessageSafe(msg.chat.id, notExecutorMsg.data.result.message_id), 3000);
            return res.sendStatus(200);
          }

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ –¥–µ–π—Å—Ç–≤–∏–µ (—á–∞—Ç –∏–ª–∏ –õ–°)
          const isFromLS = msg.chat.id !== sourceChatId;
          let targetChatId = sourceChatId;
          let targetMessageId = sourceMessageId;

          // –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –õ–°, –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
          if (isFromLS) {
            const link = requestLinks.get(`ls:${msg.chat.id}:${msg.message_id}`);
            if (link) {
              targetChatId = link.chatId;
              targetMessageId = link.messageId;
            }
          }

          const photoMsg = await sendMessage(
            msg.chat.id, 
            'üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç\n\n' +
            '‚ö†Ô∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel'
          );
          
          userStates[msg.chat.id] = {
            stage: 'waiting_photo',
            row,
            username,
            messageId: targetMessageId,
            chatId: targetChatId,
            originalRequest: parseRequestMessage(msg.text || msg.caption),
            serviceMessages: [photoMsg.data.result.message_id],
            isEmergency: msg.text?.includes('üö®') || msg.caption?.includes('üö®'),
            isFromLS
          };

          setTimeout(() => {
            deleteMessageSafe(msg.chat.id, photoMsg.data.result.message_id).catch(console.error);
          }, 120000);

          return res.sendStatus(200);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏
        if (data.startsWith('wait:')) {
          if (!EXECUTORS.includes(username)) {
            const notExecutorMsg = await sendMessage(chatId, '‚ùå –¢–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏.');
            setTimeout(() => deleteMessageSafe(chatId, notExecutorMsg.data.result.message_id), 30000);
            return res.sendStatus(200);
          }

          await sendMessage(chatId, '‚è≥ –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å "–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏"', { 
            reply_to_message_id: messageId 
          });
          
          await sendToGAS({ 
            row: parseInt(data.split(':')[1]), 
            status: '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏' 
          });
          
          return res.sendStatus(200);
        }

        if (data.startsWith('cancel:')) {
          if (!EXECUTORS.includes(username)) {
            const notExecutorMsg = await sendMessage(chatId, '‚ùå –¢–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–º–µ–Ω—è—Ç—å –∑–∞—è–≤–∫–∏.');
            setTimeout(() => deleteMessageSafe(chatId, notExecutorMsg.data.result.message_id), 30000);
            return res.sendStatus(200);
          }

          await sendMessage(chatId, 'üö´ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', { 
            reply_to_message_id: messageId 
          });
          
          await sendToGAS({ 
            row: parseInt(data.split(':')[1]), 
            status: '–û—Ç–º–µ–Ω–µ–Ω–æ' 
          });
          
          return res.sendStatus(200);
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ñ–æ—Ç–æ, —Å—É–º–º–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
      if (body.message && userStates[body.message.chat.id]) {
        const msg = body.message;
        const chatId = msg.chat.id;
        const state = userStates[chatId];

        if (state.stage === 'waiting_photo' && msg.photo) {
          await deleteMessageSafe(chatId, state.serviceMessages[0]);
          
          const fileId = msg.photo.at(-1).file_id;
          state.photoUrl = await getTelegramFileUrl(fileId);
          
          const sumMsg = await sendMessage(chatId, 'üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Ä–∞–±–æ—Ç (–≤ —Å—É–º–∞—Ö)');
          state.stage = 'waiting_sum';
          state.serviceMessages = [sumMsg.data.result.message_id];
          
          setTimeout(() => {
            deleteMessageSafe(chatId, sumMsg.data.result.message_id).catch(e => console.error(e));
          }, 120000);
          
          return res.sendStatus(200);
        }

        if (state.stage === 'waiting_sum' && msg.text) {
          await deleteMessageSafe(chatId, state.serviceMessages[0]);
          
          state.sum = msg.text;
          
          const commentMsg = await sendMessage(chatId, 'üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π');
          state.stage = 'waiting_comment';
          state.serviceMessages = [commentMsg.data.result.message_id];
          
          setTimeout(() => {
            deleteMessageSafe(chatId, commentMsg.data.result.message_id).catch(e => console.error(e));
          }, 120000);
          
          return res.sendStatus(200);
        }

        if (state.stage === 'waiting_comment' && msg.text) {
          await deleteMessageSafe(chatId, state.serviceMessages[0]);
          
          state.comment = msg.text;

          const completionData = {
            row: state.row,
            sum: state.sum,
            comment: state.comment,
            photoUrl: state.photoUrl,
            executor: state.username,
            originalRequest: state.originalRequest,
            delayDays: calculateDelayDays(state.originalRequest?.deadline),
            status: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
            isEmergency: state.isEmergency
          };

          // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –≤ —á–∞—Ç–µ
          await syncRequestStatus(state.chatId, state.messageId, completionData);

          // –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –∏–∑ –õ–° - –æ–±–Ω–æ–≤–ª—è–µ–º –∏ —Ç–∞–º
          if (state.isFromLS) {
            await editMessageSafe(
              chatId,
              msg.message_id,
              `‚úÖ –ó–∞—è–≤–∫–∞ #${state.row} –∑–∞–∫—Ä—ã—Ç–∞\n` +
              `üì∏ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n` +
              `üí∞ –°—É–º–º–∞: ${state.sum || '0'} —Å—É–º\n` +
              `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${state.comment || '–Ω–µ—Ç'}`,
              { disable_web_page_preview: false }
            );
          }

          delete userStates[chatId];
          return res.sendStatus(200);
        }
      }

      return res.sendStatus(200);
    } catch (error) {
      console.error('Webhook error:', error);
      return res.sendStatus(500);
    }
  });
};
