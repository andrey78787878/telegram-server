// telegram-handlers.js
module.exports = (app, userStates) => {
  const axios = require('axios');
  const BOT_TOKEN = process.env.BOT_TOKEN;
  const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
  const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
  const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;

  const EXECUTORS = ['@EvelinaB87', '@Olim19', '@Oblayor_04_09', '–¢–µ–∫—Å—Ç–æ–≤–æ–π –ø–æ–¥—Ä—è–¥—á–∏–∫'];

  function buildFollowUpButtons(row) {
    return {
      inline_keyboard: [[
        { text: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ', callback_data: `completed:${row}` },
        { text: '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏ ‚è≥', callback_data: `delayed:${row}` },
        { text: '–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data: `cancelled:${row}` },
      ]]
    };
  }

  function buildExecutorButtons(row) {
    return {
      inline_keyboard: EXECUTORS.map(ex => [
        { text: ex, callback_data: `select_executor:${row}:${ex}` }
      ])
    };
  }

  async function sendMessage(chatId, text, options = {}) {
    const res = await axios.post(`${TELEGRAM_API}/sendMessage`, {
      chat_id: chatId,
      text,
      parse_mode: 'HTML',
      ...options
    });
    return res.data.result.message_id;
  }

  async function editMessageText(chatId, messageId, text, reply_markup) {
    await axios.post(`${TELEGRAM_API}/editMessageText`, {
      chat_id: chatId,
      message_id: messageId,
      text,
      parse_mode: 'HTML',
      ...(reply_markup && { reply_markup })
    });
  }

  async function askForPhoto(chatId) {
    const msgId = await sendMessage(chatId, 'üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç.');
    userStates[chatId] ??= { serviceMessages: [] };
    userStates[chatId].serviceMessages.push(msgId);
  }

  async function askForSum(chatId) {
    const msgId = await sendMessage(chatId, 'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞–±–æ—Ç –≤ —Å—É–º–∞—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).');
    userStates[chatId].serviceMessages.push(msgId);
  }

  async function deleteServiceMessages(chatId, messageId, serviceMessages) {
    for (const msgId of serviceMessages || []) {
      if (msgId === messageId) {
        console.log(`‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ${msgId}`);
        continue;
      }
      console.log(`üóë –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${msgId} (—Ñ–∏–Ω–∞–ª ${messageId})`);
      try {
        await axios.post(`${TELEGRAM_API}/deleteMessage`, {
          chat_id: chatId,
          message_id: msgId
        });
        console.log(`üóë –£–¥–∞–ª–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ${msgId} —á–∞—Ç–∞ ${chatId}`);
      } catch (err) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${msgId} —á–∞—Ç–∞ ${chatId}`, err.response?.data || err.message);
      }
    }
  }

  app.post('/webhook', async (req, res) => {
    try {
      const body = req.body;
      console.log('üì© –ü–æ–ª—É—á–µ–Ω update:', JSON.stringify(body, null, 2));

      if (body.callback_query) {
        const { data: raw, message, from } = body.callback_query;
        const chatId = message.chat.id;
        const messageId = message.message_id;
        const username = '@' + (from.username || from.first_name);

        let parts;
        try {
          parts = raw.startsWith('{') ? JSON.parse(raw) : raw.split(':');
        } catch (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data:', raw, err);
          return res.sendStatus(200);
        }

        const action = parts.action || parts[0];
        const row = Number(parts.row || parts[1]);
        const executor = parts.executor || parts[2] || null;

        if (action === 'in_progress') {
          userStates[chatId] = { row, messageId };
          try {
            const response = await axios.post(GAS_WEB_APP_URL, { action: 'getOriginalText', row });
            userStates[chatId].originalText = response.data.text || message.text;
          } catch {
            userStates[chatId].originalText = message.text;
          }

          const keyboard = buildExecutorButtons(row);
          const infoMsgId = await sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}:`, {
            reply_to_message_id: messageId,
            reply_markup: keyboard
          });

          setTimeout(() => {
            axios.post(`${TELEGRAM_API}/deleteMessage`, {
              chat_id: chatId,
              message_id: infoMsgId
            }).catch(() => { });
          }, 60000);

          return res.sendStatus(200);
        }

        if (action === 'select_executor' && executor) {
          if (executor === '–¢–µ–∫—Å—Ç–æ–≤–æ–π –ø–æ–¥—Ä—è–¥—á–∏–∫') {
            userStates[chatId].stage = 'awaiting_executor_name';
            await sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –≤—Ä—É—á–Ω—É—é:');
            return res.sendStatus(200);
          }

          const originalText = userStates[chatId]?.originalText || message.text;
          const cleanedText = originalText
            .replace(/üü¢ –í —Ä–∞–±–æ—Ç–µ.*\n?/g, '')
            .replace(/üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:.*\n?/g, '')
            .trim();

          const updatedText = `${cleanedText}\n\nüü¢ –í —Ä–∞–±–æ—Ç–µ\nüë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executor}`;

          const keyboard = {
            inline_keyboard: [
              [{ text: `‚úÖ –í —Ä–∞–±–æ—Ç–µ ${executor}`, callback_data: 'noop' }],
              [
                { text: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: JSON.stringify({ action: 'done', row, messageId }) },
                { text: '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏', callback_data: JSON.stringify({ action: 'delayed', row, messageId }) },
                { text: '–û—Ç–º–µ–Ω–∞', callback_data: JSON.stringify({ action: 'cancel', row, messageId }) }
              ]
            ]
          };

          await editMessageText(chatId, messageId, updatedText, keyboard);

          await axios.post(GAS_WEB_APP_URL, {
            action: 'in_progress',
            row,
            message_id: messageId,
            executor
          });

          return res.sendStatus(200);
        }

        if (action === 'done') {
          userStates[chatId] = {
            stage: 'awaiting_photo',
            row,
            messageId,
            username,
            serviceMessages: []
          };
          await askForPhoto(chatId);
          return res.sendStatus(200);
        }

        if (action === 'delayed' || action === 'cancel') {
          await axios.post(GAS_WEB_APP_URL, {
            action,
            row,
            executor: username
          });
          const statusText = action === 'delayed' ? '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏' : '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞';
          const updated = `${message.text}\n\nüìå –°—Ç–∞—Ç—É—Å: ${statusText}\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${username}`;
          await editMessageText(chatId, messageId, updated);
          return res.sendStatus(200);
        }
      }

      if (body.message) {
        const chatId = body.message.chat.id;
        const text = body.message.text;
        const userMessageId = body.message.message_id;
        const state = userStates[chatId];

        if (!state) return res.sendStatus(200);

        if (state.stage === 'awaiting_executor_name') {
          const executor = text.trim();
          await axios.post(GAS_WEB_APP_URL, { action: 'markInProgress', row: state.row, executor });
          const updatedText = `${state.originalText}\n\nüü¢ –í —Ä–∞–±–æ—Ç–µ\nüë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executor}`;
          await editMessageText(chatId, state.messageId, updatedText, buildFollowUpButtons(state.row));
          await sendMessage(chatId, `‚úÖ –ó–∞—è–≤–∫–∞ #${state.row} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º ${executor}`, {
            reply_to_message_id: state.messageId
          });
          delete userStates[chatId];
          return res.sendStatus(200);
        }

        if (state.stage === 'awaiting_photo' && body.message.photo) {
          const fileId = body.message.photo.slice(-1)[0].file_id;
          const fileRes = await axios.get(`${TELEGRAM_API}/getFile?file_id=${fileId}`);
          const fileUrl = `${TELEGRAM_FILE_API}/${fileRes.data.result.file_path}`;
          state.photo = fileUrl;
          state.stage = 'awaiting_sum';
          state.serviceMessages.push(userMessageId);
          await askForSum(chatId);
          return res.sendStatus(200);
        }

        if (state.stage === 'awaiting_sum') {
          if (!/^\d+$/.test(text.trim())) {
            const warnMsgId = await sendMessage(chatId, '‚ùó –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏.');
            state.serviceMessages.push(warnMsgId);
            return res.sendStatus(200);
          }
          state.sum = text.trim();
          state.stage = 'awaiting_comment';
          state.serviceMessages.push(userMessageId);
          const commentMsgId = await sendMessage(chatId, '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ:');
          state.serviceMessages.push(commentMsgId);
          return res.sendStatus(200);
        }

        if (state.stage === 'awaiting_comment') {
          const comment = text.trim();
          const { row, photo, sum, username, messageId, serviceMessages } = state;

          // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –≤ serviceMessages –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
          serviceMessages.push(userMessageId);

          const { data: { result } } = await axios.post(GAS_WEB_APP_URL, {
            action: 'updateAfterCompletion',
            row,
            photoUrl: photo,
            sum,
            comment,
            executor: username,
            message_id: messageId
          });

          const photoLink = photo && photo !== 'undefined' ? photo : null;

          const photoPart = photoLink
            ? `üìé –§–æ—Ç–æ: <a href="${photoLink}">—Å—Å—ã–ª–∫–∞</a>\n`
            : 'üìé –§–æ—Ç–æ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n';

          const updatedText = `üìå –ó–∞—è–≤–∫–∞ #${row} –∑–∞–∫—Ä—ã—Ç–∞.\n\n` +
            `üìç –ü–∏—Ü—Ü–µ—Ä–∏—è: ${result.branch}\n` +
            `üìã –ü—Ä–æ–±–ª–µ–º–∞: ${result.problem}\n` +
            `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}\n` +
            `${photoPart}` +
            `üí∞ –°—É–º–º–∞: ${sum} —Å—É–º\n` +
            `üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${username}\n` +
            `‚úÖ –°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–æ\n` +
            `‚è± –ü—Ä–æ—Å—Ä–æ—á–∫–∞: ${result.delay || 0} –¥–Ω.`;

          console.log('‚úèÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É #' + row + ' —Å —Ñ–æ—Ç–æ, —Å—É–º–º–æ–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º');
          console.log('‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ:', photoLink);

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–∞–º–∏ (–ù–ï —É–¥–∞–ª—è–µ–º –µ–≥–æ!)
          await editMessageText(chatId, messageId, updatedText, { inline_keyboard: [] });

          // –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ—Ç, –∑–∞–ø—Ä–æ—Å–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã
          if (!photoLink) {
            console.log(`‚è≥ –§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}`);
            setTimeout(async () => {
              try {
                const driveUrlRes = await axios.post(GAS_WEB_APP_URL, { action: 'getDrivePhotoUrl', row });
                const drivePhoto = driveUrlRes.data.url;
                if (drivePhoto) {
                  const replacedText = updatedText.replace(/üìé –§–æ—Ç–æ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n/, `<a href="${drivePhoto}">üìé –§–æ—Ç–æ: —Å—Å—ã–ª–∫–∞</a>\n`);
                  await editMessageText(chatId, messageId, replacedText, { inline_keyboard: [] });
                  console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ —Å Google –î–∏—Å–∫–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}`);
                } else {
                  console.warn(`‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ —Å Google –î–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}`);
                }
              } catch (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –î–∏—Å–∫:', err);
              }
            }, 180000);
          } else {
            // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω–µ–µ (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)
            setTimeout(async () => {
              try {
                const driveUrlRes = await axios.post(GAS_WEB_APP_URL, { action: 'getDrivePhotoUrl', row });
                const drivePhoto = driveUrlRes.data.url;
                if (drivePhoto) {
                  const replacedText = updatedText.replace(/<a href=.*?>—Å—Å—ã–ª–∫–∞<\/a>/, `<a href="${drivePhoto}">—Å—Å—ã–ª–∫–∞</a>`);
                  await editMessageText(chatId, messageId, replacedText, { inline_keyboard: [] });
                  console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ —Å Google –î–∏—Å–∫–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}`);
                } else {
                  console.warn(`‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ —Å Google –î–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}`);
                }
              } catch (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –î–∏—Å–∫:', err);
              }
            }, 60000);
          }

          // --- –£–¥–∞–ª—è–µ–º –¢–û–õ–¨–ö–û —Å–µ—Ä–≤–∏—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã,
          // --- –Ω–æ –ù–ï —É–¥–∞–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å messageId.
          setTimeout(() => {
            deleteServiceMessages(chatId, messageId, serviceMessages);
          }, 20000);

          // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          delete userStates[chatId];
          return res.sendStatus(200);
        }
      }

      res.sendStatus(200);
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', e);
      res.sendStatus(500);
    }
  });
};
