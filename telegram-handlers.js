const axios = require('axios');
const FormData = require('form-data');

const BOT_TOKEN = process.env.BOT_TOKEN;
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;

// –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const MANAGERS = ['@Andrey_Tkach_MB', '@Andrey_tkach_y'];
const EXECUTORS = ['@Andrey_Tkach_MB', '@Andrey_tkach_y'];
const AUTHORIZED_USERS = [...new Set([...MANAGERS, ...EXECUTORS])];

// –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
const userStorage = new Map(); // username ‚Üí user_id
const userStates = {}; // –¢–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const activeRequests = new Map(); // message_id ‚Üí requestData

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function extractRowFromCallbackData(callbackData) {
  if (!callbackData) return null;
  const parts = callbackData.split(':');
  return parts.length > 1 ? parseInt(parts[1], 10) : null;
}

function parseRequestMessage(text) {
  if (!text) return null;
  
  const result = {};
  const lines = text.split('\n');
  
  lines.forEach(line => {
    if (line.includes('–ü–∏—Ü—Ü–µ—Ä–∏—è:')) result.pizzeria = line.split(':')[1].trim();
    if (line.includes('–ü—Ä–æ–±–ª–µ–º–∞:')) result.problem = line.split(':')[1].trim();
    if (line.includes('–°—Ä–æ–∫:')) result.deadline = line.split(':')[1].trim();
  });
  
  return result;
}

function calculateDelayDays(deadline) {
  if (!deadline || deadline === '–Ω–µ —É–∫–∞–∑–∞–Ω') return 0;
  try {
    const deadlineDate = new Date(deadline);
    const today = new Date();
    return Math.max(0, Math.ceil((today - deadlineDate) / (1000 * 60 * 60 * 24)));
  } catch (e) {
    console.error('Error calculating delay:', e);
    return 0;
  }
}

function formatRequestMessage(data) {
  const emergencyMark = data.isEmergency ? 'üö® ' : '';
  return `
${emergencyMark}–ó–∞—è–≤–∫–∞ #${data.row}
üè¢ –ü–∏—Ü—Ü–µ—Ä–∏—è: ${data.pizzeria || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üîß –ü—Ä–æ–±–ª–µ–º–∞: ${data.problem || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üïì –°—Ä–æ–∫: ${data.deadline || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${data.status === '–í —Ä–∞–±–æ—Ç–µ' ? `üü¢ –í —Ä–∞–±–æ—Ç–µ (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${data.executor})` : 'üü† –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å'}
  `.trim();
}

function formatCompletionMessage(data) {
  return `
‚úÖ –ó–∞—è–≤–∫–∞ #${data.row} ${data.isEmergency ? 'üö® (–ê–í–ê–†–ò–ô–ù–ê–Ø)' : ''} –∑–∞–∫—Ä—ã—Ç–∞
${data.photoUrl ? `\nüì∏ –§–æ—Ç–æ: ${data.photoUrl}\n` : ''}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${data.comment || '–Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}
üí∞ –°—É–º–º–∞: ${data.sum || '0'} —Å—É–º
üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${data.executor}
${data.delayDays > 0 ? `üî¥ –ü—Ä–æ—Å—Ä–æ—á–∫–∞: ${data.delayDays} –¥–Ω.` : ''}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üè¢ –ü–∏—Ü—Ü–µ—Ä–∏—è: ${data.pizzeria || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üîß –ü—Ä–æ–±–ª–µ–º–∞: ${data.problem || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
  `.trim();
}

// Telegram API —Ñ—É–Ω–∫—Ü–∏–∏
async function sendMessage(chatId, text, options = {}) {
  try {
    const response = await axios.post(`${TELEGRAM_API}/sendMessage`, {
      chat_id: chatId,
      text,
      parse_mode: 'HTML',
      ...options
    }, { timeout: 5000 });
    return response.data.result;
  } catch (error) {
    console.error('Send message error:', error.response?.data || error.message);
    throw error;
  }
}

async function editMessageSafe(chatId, messageId, text, options = {}) {
  try {
    const response = await axios.post(`${TELEGRAM_API}/editMessageText`, {
      chat_id: chatId,
      message_id: messageId,
      text,
      parse_mode: 'HTML',
      ...options
    }, { timeout: 5000 });
    return response.data.result;
  } catch (error) {
    if (error.response?.data?.description?.includes('message to edit not found')) {
      return await sendMessage(chatId, text, options);
    }
    console.error('Edit message error:', error.response?.data);
    throw error;
  }
}

async function deleteMessageSafe(chatId, messageId) {
  try {
    await axios.post(`${TELEGRAM_API}/deleteMessage`, {
      chat_id: chatId,
      message_id: messageId
    }, { timeout: 3000 });
  } catch (error) {
    console.error('Delete message error:', error.response?.data);
  }
}

async function answerCallbackQuery(callbackQueryId, text) {
  try {
    const response = await axios.post(`${TELEGRAM_API}/answerCallbackQuery`, {
      callback_query_id: callbackQueryId,
      text: text || '',
      show_alert: !!text
    }, { timeout: 2000 });
    return response.data;
  } catch (error) {
    if (!error.response?.data?.description?.includes('query is too old')) {
      console.error('Callback answer error:', error.response?.data || error.message);
    }
    return null;
  }
}

async function getTelegramFileUrl(fileId) {
  try {
    const { data } = await axios.get(`${TELEGRAM_API}/getFile?file_id=${fileId}`);
    return `${TELEGRAM_FILE_API}/${data.result.file_path}`;
  } catch (error) {
    console.error('Get file URL error:', error.response?.data);
    return null;
  }
}

// GAS —Ñ—É–Ω–∫—Ü–∏–∏
async function sendToGAS(data) {
  try {
    const response = await axios.post(GAS_WEB_APP_URL, data, {
      timeout: 10000,
      headers: { 'Content-Type': 'application/json' }
    });
    return response.data;
  } catch (error) {
    console.error('Error sending to GAS:', error.message);
    throw error;
  }
}

async function getGoogleDiskLink(row) {
  try {
    const res = await axios.post(`${GAS_WEB_APP_URL}?getDiskLink=true`, { row });
    return res.data.diskLink || null;
  } catch (error) {
    console.error('Get Google Disk link error:', error.response?.data);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
module.exports = (app) => {
  app.post('/webhook', async (req, res) => {
    try {
      const { message, callback_query } = req.body;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
      if (message?.from) {
        const user = message.from;
        if (user.username) {
          userStorage.set(`@${user.username}`, user.id);
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
      if (callback_query) {
        const { id, from, message, data } = callback_query;
        const username = from.username ? `@${from.username}` : null;
        const chatId = message.chat.id;
        const messageId = message.message_id;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if (!AUTHORIZED_USERS.includes(username)) {
          const msg = await sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏');
          setTimeout(() => deleteMessageSafe(chatId, msg.message_id), 30000);
          return res.sendStatus(200);
        }

        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏
        const row = extractRowFromCallbackData(data);
        if (!row) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏');
          return res.sendStatus(200);
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        let requestData = activeRequests.get(messageId) || parseRequestMessage(message.text || message.caption);
        requestData.row = row;
        requestData.message_id = messageId;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
        if (data === 'accept') {
          if (!MANAGERS.includes(username)) {
            await answerCallbackQuery(id, '‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫–∏');
            return res.sendStatus(200);
          }

          requestData.status = '–í —Ä–∞–±–æ—Ç–µ';
          requestData.manager = username;
          activeRequests.set(messageId, requestData);

          await editMessageSafe(chatId, messageId, formatRequestMessage(requestData), {
            reply_markup: {
              inline_keyboard: [
                [{ text: '–ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è', callback_data: `assign:${row}` }]
              ]
            }
          });

          await answerCallbackQuery(id, '‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞');
        }
        else if (data.startsWith('assign:')) {
          if (!MANAGERS.includes(username)) {
            await answerCallbackQuery(id, '‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å');
            return res.sendStatus(200);
          }

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
          const buttons = EXECUTORS.map(executor => [{
            text: executor,
            callback_data: `set_executor:${executor}:${row}`
          }]);

          await editMessageSafe(chatId, messageId, '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', {
            reply_markup: { inline_keyboard: buttons }
          });

          await answerCallbackQuery(id);
        }
        else if (data.startsWith('set_executor:')) {
          const executor = data.split(':')[1];
          requestData.executor = executor;
          requestData.status = '–í —Ä–∞–±–æ—Ç–µ';
          activeRequests.set(messageId, requestData);

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
          await editMessageSafe(chatId, messageId, formatRequestMessage(requestData), {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `complete:${row}` },
                  { text: '‚è≥ –û–∂–∏–¥–∞–µ—Ç', callback_data: `wait:${row}` }
                ]
              ]
            }
          });

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
          const executorId = userStorage.get(executor);
          if (executorId) {
            await sendMessage(executorId, `üìå –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #${row}`, {
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `complete:${row}` },
                    { text: '‚è≥ –û–∂–∏–¥–∞–µ—Ç', callback_data: `wait:${row}` }
                  ]
                ]
              }
            });
          }

          await sendToGAS(requestData);
          await answerCallbackQuery(id, `‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ${executor} –Ω–∞–∑–Ω–∞—á–µ–Ω`);
        }
        else if (data.startsWith('complete:')) {
          if (!EXECUTORS.includes(username)) {
            await answerCallbackQuery(id, '‚ùå –¢–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å');
            return res.sendStatus(200);
          }

          userStates[chatId] = {
            stage: 'waiting_photo',
            row,
            messageId,
            username,
            requestData
          };

          await sendMessage(chatId, 'üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç');
          await answerCallbackQuery(id);
        }
        else if (data.startsWith('wait:')) {
          requestData.status = '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏';
          await sendToGAS(requestData);
          await editMessageSafe(chatId, messageId, formatRequestMessage(requestData));
          await answerCallbackQuery(id, '‚è≥ –ó–∞—è–≤–∫–∞ –æ–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏');
        }

        return res.sendStatus(200);
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏)
      if (message && userStates[message.chat.id]) {
        const chatId = message.chat.id;
        const state = userStates[chatId];
        const requestData = state.requestData;

        if (state.stage === 'waiting_photo' && message.photo) {
          const fileId = message.photo[message.photo.length - 1].file_id;
          state.photoUrl = await getTelegramFileUrl(fileId);
          state.stage = 'waiting_sum';
          await sendMessage(chatId, 'üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Ä–∞–±–æ—Ç (–≤ —Å—É–º–∞—Ö)');
        }
        else if (state.stage === 'waiting_sum' && message.text) {
          state.sum = message.text;
          state.stage = 'waiting_comment';
          await sendMessage(chatId, 'üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π');
        }
        else if (state.stage === 'waiting_comment' && message.text) {
          const completionData = {
            ...requestData,
            status: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
            executor: state.username,
            photoUrl: state.photoUrl,
            sum: state.sum,
            comment: message.text,
            delayDays: calculateDelayDays(requestData.deadline)
          };

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
          await editMessageSafe(chatId, state.messageId, formatCompletionMessage(completionData), {
            reply_markup: { inline_keyboard: [] }
          });

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ GAS
          await sendToGAS(completionData);

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Google Disk —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã
          setTimeout(async () => {
            try {
              const diskUrl = await getGoogleDiskLink(state.row);
              if (diskUrl) {
                await editMessageSafe(chatId, state.messageId, formatCompletionMessage({
                  ...completionData,
                  photoUrl: diskUrl
                }));
              }
            } catch (e) {
              console.error('Error updating disk link:', e);
            }
          }, 180000);

          delete userStates[chatId];
        }

        return res.sendStatus(200);
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
      if (message?.text && message.text.startsWith('#')) {
        const requestData = {
          message_id: message.message_id,
          row: parseInt(message.text.match(/#(\d+)/)?.[1]) || null,
          ...parseRequestMessage(message.text),
          isEmergency: message.text.includes('üö®'),
          status: '–ù–æ–≤–∞—è'
        };

        activeRequests.set(message.message_id, requestData);

        await sendMessage(message.chat.id, formatRequestMessage(requestData), {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É', callback_data: `accept:${requestData.row}` }]
            ]
          }
        });

        if (requestData.isEmergency) {
          for (const manager of MANAGERS) {
            const managerId = userStorage.get(manager);
            if (managerId) {
              await sendMessage(managerId, `üö® –ù–æ–≤–∞—è –∞–≤–∞—Ä–∏–π–Ω–∞—è –∑–∞—è–≤–∫–∞ #${requestData.row}`, {
                reply_markup: {
                  inline_keyboard: [
                    [{ text: '–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É', callback_data: `accept:${requestData.row}` }]
                  ]
                }
              });
            }
          }
        }
      }

      return res.sendStatus(200);
    } catch (error) {
      console.error('Webhook error:', error);
      return res.sendStatus(500);
    }
  });
};
