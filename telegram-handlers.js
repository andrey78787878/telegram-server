module.exports = (app, userStates) => {
  const axios = require('axios');
  const BOT_TOKEN = process.env.BOT_TOKEN;
  const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
  const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
  const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;
  const AUTHORIZED_USERS = ['@EvelinaB87', '@Olim19', '@Oblayor_04_09', '@Andrey_Tkach_MB'];

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ 60 —Å–µ–∫
  const scheduleDeletion = (chatId, messageId) => {
    setTimeout(() => {
      axios.post(`${TELEGRAM_API}/deleteMessage`, {
        chat_id: chatId,
        message_id: messageId
      }).catch(() => {});
    }, 60000);
  };

  app.post('/webhook', async (req, res) => {
    try {
      const body = req.body;

      // üìç –í–∞—Ä–∏–∞–Ω—Ç 1: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (body.message) {
        const msg = body.message;
        const chat = msg.chat;
        const chatId = chat.id;
        const text = msg.text;
        const username = msg.from?.username ? `@${msg.from.username}` : '';
        const state = userStates[chatId];

        if (text === '/start') {
          await axios.post(`${TELEGRAM_API}/sendMessage`, {
            chat_id: chatId,
            text: 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∞–º–∏.'
          });
          return res.sendStatus(200);
        }

        if (text === '/–º–æ–∏') {
          if (chat.type !== 'private') {
            await axios.post(`${TELEGRAM_API}/sendMessage`, {
              chat_id: chatId,
              text: 'üëã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –ª–∏—á–∫—É –±–æ—Ç—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏.',
            });
            return res.sendStatus(200);
          }
          const response = await axios.post(`${GAS_WEB_APP_URL}`, {
            type: 'getMyTasks',
            username
          });
          const text = response.data.text || '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.';
          await axios.post(`${TELEGRAM_API}/sendMessage`, {
            chat_id: chatId,
            text,
            parse_mode: 'HTML'
          });
          return res.sendStatus(200);
        }

        if (!AUTHORIZED_USERS.includes(username)) {
          return res.sendStatus(200);
        }

        // –§–æ—Ç–æ (–µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è)
        if (msg.photo && state?.step === 'awaitingPhoto') {
          const fileId = msg.photo[msg.photo.length - 1].file_id;
          const fileRes = await axios.get(`${TELEGRAM_API}/getFile?file_id=${fileId}`);
          const filePath = fileRes.data.result.file_path;
          const fileUrl = `${TELEGRAM_FILE_API}/${filePath}`;

          userStates[chatId].photo = fileUrl;
          userStates[chatId].step = 'awaitingSum';

          const sumPrompt = await axios.post(`${TELEGRAM_API}/sendMessage`, {
            chat_id: chatId,
            text: 'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç (–≤ —Å—É–º–∞—Ö):'
          });
          scheduleDeletion(chatId, msg.message_id);
          scheduleDeletion(chatId, sumPrompt.data.result.message_id);
          return res.sendStatus(200);
        }

        // –°—É–º–º–∞
        if (state?.step === 'awaitingSum' && text) {
          userStates[chatId].sum = text;
          userStates[chatId].step = 'awaitingComment';

          const commentPrompt = await axios.post(`${TELEGRAM_API}/sendMessage`, {
            chat_id: chatId,
            text: 'üìù –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:'
          });
          scheduleDeletion(chatId, msg.message_id);
          scheduleDeletion(chatId, commentPrompt.data.result.message_id);
          return res.sendStatus(200);
        }

        // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if (state?.step === 'awaitingComment' && text) {
          userStates[chatId].comment = text;
          const { row, message_id, photo, sum, comment } = userStates[chatId];

          const response = await axios.post(`${GAS_WEB_APP_URL}`, {
            type: 'done',
            row,
            sum,
            photo,
            comment,
            username,
            message_id
          });

          const updatedText = response.data.updated_text;
          const fileLink = response.data.photo_drive_link;
          const overdue = response.data.overdue || '0';
          const finalMessage = `
üìå –ó–∞—è–≤–∫–∞ #${row} –∑–∞–∫—Ä—ã—Ç–∞.
üìé –§–æ—Ç–æ: [—Å—Å—ã–ª–∫–∞](${fileLink})
üí∞ –°—É–º–º–∞: ${sum} —Å—É–º
üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${username}
‚úÖ –°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–æ
‚è∞ –ü—Ä–æ—Å—Ä–æ—á–∫–∞: ${overdue} –¥–Ω.
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`;

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          await axios.post(`${TELEGRAM_API}/editMessageText`, {
            chat_id: chatId,
            message_id,
            text: finalMessage,
            parse_mode: 'Markdown'
          });

          delete userStates[chatId];
          scheduleDeletion(chatId, msg.message_id);
          return res.sendStatus(200);
        }

        return res.sendStatus(200);
      }

      // üìç –í–∞—Ä–∏–∞–Ω—Ç 2: Callback –æ—Ç –∫–Ω–æ–ø–æ–∫
      if (body.callback_query) {
        const callback = body.callback_query;
        const data = callback.data;
        const chatId = callback.message.chat.id;
        const messageId = callback.message.message_id;
        const username = callback.from?.username ? `@${callback.from.username}` : '';

        if (!AUTHORIZED_USERS.includes(username)) {
          await axios.post(`${TELEGRAM_API}/answerCallbackQuery`, {
            callback_query_id: callback.id,
            text: '‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.',
            show_alert: true
          });
          return res.sendStatus(200);
        }

        const rowMatch = callback.message.text.match(/#(\d+)/);
        const row = rowMatch ? rowMatch[1] : null;
        if (!row) return res.sendStatus(200);

        // –û—Ç–º–µ—Ç–∫–∞ "–ü—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É"
        if (data === 'in_progress') {
          await axios.post(`${GAS_WEB_APP_URL}`, {
            type: 'inProgress',
            row,
            username,
            message_id: messageId
          });

          await axios.post(`${TELEGRAM_API}/editMessageReplyMarkup`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [[
                { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: 'done' },
                { text: 'üöö –û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏', callback_data: 'wait' },
                { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }
              ]]
            }
          });

          await axios.post(`${TELEGRAM_API}/answerCallbackQuery`, {
            callback_query_id: callback.id,
            text: 'üü¢ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É.'
          });
          return res.sendStatus(200);
        }

        // –í—ã–ø–æ–ª–Ω–µ–Ω–æ
        if (data === 'done') {
          userStates[chatId] = { step: 'awaitingPhoto', row, message_id: messageId };
          const prompt = await axios.post(`${TELEGRAM_API}/sendMessage`, {
            chat_id: chatId,
            text: 'üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç:'
          });
          scheduleDeletion(chatId, prompt.data.result.message_id);
          return res.sendStatus(200);
        }

        // –û—Ç–º–µ–Ω–∞
        if (data === 'cancel') {
          await axios.post(`${GAS_WEB_APP_URL}`, {
            type: 'cancel',
            row
          });
          await axios.post(`${TELEGRAM_API}/editMessageText`, {
            chat_id: chatId,
            message_id: messageId,
            text: `‚õî –ó–∞—è–≤–∫–∞ #${row} –æ—Ç–º–µ–Ω–µ–Ω–∞.`
          });
          return res.sendStatus(200);
        }

        // –ü–æ—Å—Ç–∞–≤–∫–∞
        if (data === 'wait') {
          await axios.post(`${GAS_WEB_APP_URL}`, {
            type: 'wait',
            row,
            username
          });
          await axios.post(`${TELEGRAM_API}/editMessageText`, {
            chat_id: chatId,
            message_id: messageId,
            text: `üöö –ó–∞—è–≤–∫–∞ #${row} –æ–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏.\nüë§ ${username}`
          });
          return res.sendStatus(200);
        }
      }

      return res.sendStatus(200);
    } catch (err) {
      console.error('‚ùå Webhook error:', err);
      res.sendStatus(500);
    }
  });
};
