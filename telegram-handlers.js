const axios = require('axios');
const FormData = require('form-data');

const BOT_TOKEN = process.env.BOT_TOKEN;
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;
const AUTHORIZED_USERS = [
  '@EvelinaB87', '@Olim19', '@Oblayor_04_09', '@Andrey_Tkach_MB', '@Davr_85'
];

module.exports = (app, userStates) => {
  app.post('/webhook', async (req, res) => {
    const body = req.body;

    const { message, callback_query } = body;
    const data = callback_query?.data;
    const msg = callback_query?.message;
    const from = callback_query?.from;

    if (!callback_query || !msg || !data || !from) return res.sendStatus(200);

    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const username = from.username ? `@${from.username}` : null;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if (!AUTHORIZED_USERS.includes(username)) {
      await sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.');
      return res.sendStatus(200);
    }

    const row = extractRowFromMessage(msg.text);
    if (!row) return res.sendStatus(200);

    // === –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É" ===
    if (data === 'accept') {
      await editMessage(chatId, messageId, msg.text + `\n\nüü¢ –ó–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ`);

      const buttons = AUTHORIZED_USERS.map(e => [
        { text: e, callback_data: `executor:${e}` }
      ]);

      await sendMessage(chatId, 'üë∑ –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', {
        reply_to_message_id: messageId
      });

      await sendButtons(chatId, messageId, buttons);

      return res.sendStatus(200);
    }

    // === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ===
    if (data.startsWith('executor:')) {
      const executor = data.split(':')[1];

      await sendToGAS({
        row,
        status: '–í —Ä–∞–±–æ—Ç–µ',
        executor,
        message_id: messageId,
      });

      await sendButtons(chatId, messageId, [
        [
          { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: 'done' },
          { text: 'üïê –û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏', callback_data: 'wait' },
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' },
        ]
      ]);

      return res.sendStatus(200);
    }

    if (data === 'done') {
      userStates[chatId] = { stage: 'waiting_photo', row, username, messageId, serviceMessages: [] };
      await sendMessage(chatId, 'üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç');
      return res.sendStatus(200);
    }

    if (data === 'wait') {
      await sendMessage(chatId, '‚è≥ –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å "–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏"', { reply_to_message_id: messageId });
      await sendToGAS({ row, status: '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏' });
      return res.sendStatus(200);
    }

    if (data === 'cancel') {
      await sendMessage(chatId, 'üö´ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', { reply_to_message_id: messageId });
      await sendToGAS({ row, status: '–û—Ç–º–µ–Ω–µ–Ω–æ' });
      return res.sendStatus(200);
    }

    return res.sendStatus(200);
  });

  // === USER MESSAGE ===
  app.post('/webhook', async (req, res) => {
    const body = req.body;
    if (!body.message) return res.sendStatus(200);

    const msg = body.message;
    const chatId = msg.chat.id;
    const state = userStates[chatId];

    if (!state) return res.sendStatus(200);

    try {
      if (state.stage === 'waiting_photo' && msg.photo) {
        const fileId = msg.photo.at(-1).file_id;
        const fileLink = await getTelegramFileUrl(fileId);

        state.photoUrl = fileLink;
        state.stage = 'waiting_sum';
        state.serviceMessages.push(msg.message_id);

        await sendMessage(chatId, 'üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Ä–∞–±–æ—Ç (–≤ —Å—É–º–∞—Ö)');
        return res.sendStatus(200);
      }

      if (state.stage === 'waiting_sum' && msg.text) {
        state.sum = msg.text;
        state.stage = 'waiting_comment';
        state.serviceMessages.push(msg.message_id);

        await sendMessage(chatId, 'üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π');
        return res.sendStatus(200);
      }

      if (state.stage === 'waiting_comment' && msg.text) {
        state.comment = msg.text;
        state.serviceMessages.push(msg.message_id);

        const { row, sum, comment, photoUrl, username, messageId } = state;

        await sendToGAS({
          row, sum, comment, photo: photoUrl, status: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', executor: username
        });

        const summary = [
          `üìå –ó–∞—è–≤–∫–∞ #${row} –∑–∞–∫—Ä—ã—Ç–∞.`,
          `üìé –§–æ—Ç–æ: ${photoUrl}`,
          `üí∞ –°—É–º–º–∞: ${sum} —Å—É–º`,
          `üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${username}`,
          `‚úÖ –°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–æ`,
          `üîÑ –°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã`,
          `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`
        ].join('\n');

        await editMessage(chatId, messageId, summary);

        setTimeout(async () => {
          try {
            const diskUrl = await getGoogleDiskLink(row);
            const updatedSummary = [
              `üìå –ó–∞—è–≤–∫–∞ #${row} –∑–∞–∫—Ä—ã—Ç–∞.`,
              `üìé –§–æ—Ç–æ: ${diskUrl}`,
              `üí∞ –°—É–º–º–∞: ${sum} —Å—É–º`,
              `üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${username}`,
              `‚úÖ –°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–æ`,
              `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`
            ].join('\n');
            await editMessage(chatId, messageId, updatedSummary);
          } catch (e) {
            console.error('Error updating disk link:', e);
          }
        }, 3 * 60 * 1000);

        setTimeout(async () => {
          try {
            for (const msgId of state.serviceMessages) {
              await deleteMessage(chatId, msgId);
            }
          } catch (e) {
            console.error('Error deleting service messages:', e);
          }
        }, 60 * 1000);

        delete userStates[chatId];
        return res.sendStatus(200);
      }
    } catch (e) {
      console.error('Error handling user message:', e);
      return res.sendStatus(500);
    }

    res.sendStatus(200);
  });
};

// === SUPPORT FUNCTIONS ===

async function sendMessage(chatId, text, options = {}) {
  return axios.post(`${TELEGRAM_API}/sendMessage`, {
    chat_id: chatId,
    text,
    parse_mode: 'HTML',
    ...options
  });
}

async function editMessage(chatId, messageId, text) {
  return axios.post(`${TELEGRAM_API}/editMessageText`, {
    chat_id: chatId,
    message_id: messageId,
    text,
    parse_mode: 'HTML'
  });
}

async function deleteMessage(chatId, messageId) {
  return axios.post(`${TELEGRAM_API}/deleteMessage`, {
    chat_id: chatId,
    message_id: messageId
  }).catch(() => {});
}

async function sendButtons(chatId, messageId, buttons) {
  return axios.post(`${TELEGRAM_API}/editMessageReplyMarkup`, {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: { inline_keyboard: buttons }
  });
}

async function getTelegramFileUrl(fileId) {
  const { data } = await axios.get(`${TELEGRAM_API}/getFile?file_id=${fileId}`);
  return `${TELEGRAM_FILE_API}/${data.result.file_path}`;
}

async function sendToGAS(data) {
  return axios.post(GAS_WEB_APP_URL, data);
}

async function getGoogleDiskLink(row) {
  try {
    const res = await axios.post(`${GAS_WEB_APP_URL}?getDiskLink=true`, { row });
    return res.data.diskLink || 'üîó [—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω]';
  } catch {
    return 'üîó [–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Å—ã–ª–∫–∏]';
  }
}

function extractRowFromMessage(text) {
  if (!text) return null;
  const match = text.match(/#(\d+)/);
  return match ? parseInt(match[1], 10) : null;
}


