// telegram-handlers.js
module.exports = (app, userStates) => {
  const axios = require('axios');
  const BOT_TOKEN = process.env.BOT_TOKEN;
  const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
  const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
  const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;

  const EXECUTORS = ['@EvelinaB87', '@Olim19', '@Oblayor_04_09', '–¢–µ–∫—Å—Ç–æ–≤–æ–π –ø–æ–¥—Ä—è–¥—á–∏–∫'];

  function buildExecutorButtons(row) {
    return {
      inline_keyboard: EXECUTORS.map(ex => [
        { text: ex, callback_data: `select_executor:${row}:${ex}` }
      ])
    };
  }

  function buildFinalButtons(row) {
    return {
      inline_keyboard: [
        [
          { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `done:${row}` },
          { text: '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏', callback_data: `delayed:${row}` },
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancelled:${row}` }
        ]
      ]
    };
  }

  async function sendMessage(chatId, text, options = {}) {
    const res = await axios.post(`${TELEGRAM_API}/sendMessage`, {
      chat_id: chatId,
      text,
      parse_mode: 'HTML',
      ...options
    });
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${text}`);
    return res.data.result.message_id;
  }

  async function editMessageText(chatId, messageId, text, reply_markup) {
    try {
      await axios.post(`${TELEGRAM_API}/editMessageText`, {
        chat_id: chatId,
        message_id: messageId,
        text,
        parse_mode: 'HTML',
        ...(reply_markup && { reply_markup })
      });
    } catch (error) {
      const desc = error.response?.data?.description || error.message;
      if (!desc.includes('message is not modified')) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}:`, desc);
      }
    }
  }

  async function deleteMessage(chatId, msgId) {
    try {
      await axios.post(`${TELEGRAM_API}/deleteMessage`, {
        chat_id: chatId,
        message_id: msgId
      });
    } catch (e) {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${msgId}:`, e.message);
    }
  }

  function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async function deleteMessageWithDelay(chatId, msgId, delayMs = 15000) {
    await delay(delayMs);
    await deleteMessage(chatId, msgId);
  }

  async function getFileLink(fileId) {
    const file = await axios.get(`${TELEGRAM_API}/getFile?file_id=${fileId}`);
    const filePath = file.data.result.file_path;
    return `${TELEGRAM_FILE_API}/${filePath}`;
  }

  async function cleanupMessages(chatId, state) {
    const messages = [...(state.serviceMessages || []), ...(state.userResponses || [])];
    for (const msg of messages) {
      await deleteMessage(chatId, msg);
    }
  }

  async function completeRequest(chatId, state, commentMessageId, commentText) {
    let { row, executor, amount, photoUrl } = state;
    const comment = commentText || '';

    if (!row) {
      console.warn('‚ö†Ô∏è Row (–Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ state. –ü—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å...');
      const recovery = await axios.post(GAS_WEB_APP_URL, {
        action: 'recoverRowByMessageId',
        message_id: state.originalMessageId
      });
      if (recovery.data?.row) {
        row = recovery.data.row;
        state.row = row;
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏.');
        return;
      }
    }

    const [idRes, textRes, delayRes] = await Promise.all([
      axios.post(GAS_WEB_APP_URL, { action: 'getMessageId', row }),
      axios.post(GAS_WEB_APP_URL, { action: 'getRequestText', row }),
      axios.post(GAS_WEB_APP_URL, { action: 'getDelayInfo', row })
    ]);

    const originalMessageId = idRes.data?.message_id;
    const originalText = textRes.data?.text || '';
    const delayDays = delayRes.data?.delay || '0';

    if (!originalMessageId) {
      console.warn(`‚ö†Ô∏è –ù–µ—Ç originalMessageId –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${row}, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.`);
    } else {
      const updatedText = `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ\nüë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executor}\nüí∞ –°—É–º–º–∞: ${amount || '0'}\nüì∏ –§–æ—Ç–æ: <a href="${photoUrl}">—Å—Å—ã–ª–∫–∞</a>\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\nüî¥ –ü—Ä–æ—Å—Ä–æ—á–∫–∞: ${delayDays} –¥–Ω.\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n${originalText}`;
      await editMessageText(chatId, originalMessageId, updatedText);
    }

    await axios.post(GAS_WEB_APP_URL, {
      action: 'complete',
      row,
      status: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
      photoUrl,
      amount,
      comment,
      message_id: originalMessageId || null
    });

    await deleteMessageWithDelay(chatId, commentMessageId);
    await cleanupMessages(chatId, state);
    delete userStates[chatId];

    setTimeout(async () => {
      const finalRes = await axios.post(GAS_WEB_APP_URL, { action: 'getRequestText', row });
      const finalText = finalRes.data?.text || originalText;
      const driveUrlRes = await axios.post(GAS_WEB_APP_URL, { action: 'getDriveLink', row });
      const driveUrl = driveUrlRes.data?.driveUrl || photoUrl;
      if (originalMessageId) {
        const editedFinalText = `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ\nüë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executor}\nüí∞ –°—É–º–º–∞: ${amount || '0'}\nüì∏ –§–æ—Ç–æ: <a href="${driveUrl}">—Å—Å—ã–ª–∫–∞</a>\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\nüî¥ –ü—Ä–æ—Å—Ä–æ—á–∫–∞: ${delayDays} –¥–Ω.\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n${finalText}`;
        await editMessageText(chatId, originalMessageId, editedFinalText);
      }
    }, 180000);
  }

  // –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ webhook –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –Ω–∏–∂–µ, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
};
