// telegram-handlers.js
module.exports = (app, userStates) => {
  const axios = require('axios');
  const BOT_TOKEN = process.env.BOT_TOKEN;
  const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
  const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
  const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;

  const EXECUTORS = ['@EvelinaB87', '@Olim19', '@Oblayor_04_09', '–¢–µ–∫—Å—Ç–æ–≤–æ–π –ø–æ–¥—Ä—è–¥—á–∏–∫'];

  function buildFollowUpButtons(row) {
    return {
      inline_keyboard: [[
        { text: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ', callback_data: `done:${row}` },
        { text: '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏ ‚è≥', callback_data: `delayed:${row}` },
        { text: '–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data: `cancel:${row}` },
      ]]
    };
  }

  function buildExecutorButtons(row) {
    return {
      inline_keyboard: EXECUTORS.map(ex => [
        { text: ex, callback_data: `select_executor:${row}:${ex}` }
      ])
    };
  }

  async function sendMessage(chatId, text, options = {}) {
    const res = await axios.post(`${TELEGRAM_API}/sendMessage`, {
      chat_id: chatId,
      text,
      parse_mode: 'HTML',
      ...options
    });
    return res.data.result.message_id;
  }

  async function editMessageText(chatId, messageId, text, reply_markup) {
    await axios.post(`${TELEGRAM_API}/editMessageText`, {
      chat_id: chatId,
      message_id: messageId,
      text,
      parse_mode: 'HTML',
      ...(reply_markup && { reply_markup })
    });
  }

  async function askForPhoto(chatId) {
    const msgId = await sendMessage(chatId, 'üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç.');
    userStates[chatId] ??= { serviceMessages: [] };
    userStates[chatId].serviceMessages.push(msgId);
  }

  async function askForSum(chatId) {
    const msgId = await sendMessage(chatId, 'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞–±–æ—Ç –≤ —Å—É–º–∞—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).');
    userStates[chatId].serviceMessages.push(msgId);
  }

  app.post('/webhook', async (req, res) => {
    try {
      const body = req.body;
      console.log('üì© –ü–æ–ª—É—á–µ–Ω update:', JSON.stringify(body, null, 2));

      if (body.callback_query) {
        const { data: raw, message, from } = body.callback_query;
        const chatId = message.chat.id;
        const messageId = message.message_id;
        const username = '@' + (from.username || from.first_name);

        // –†–∞–∑–±–æ—Ä callback_data: –ª–∏–±–æ JSON, –ª–∏–±–æ —Ñ–æ—Ä–º–∞—Ç —á–µ—Ä–µ–∑ ":"
        let parts;
        try {
          parts = raw.startsWith('{') ? JSON.parse(raw) : raw.split(':');
        } catch (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data:', raw, err);
          return res.sendStatus(200);
        }

        const action = parts.action || parts[0];
        const row = Number(parts.row || parts[1]);
        const executor = parts.executor || parts[2] || null;

        // --- –ù–∞–∂–∞—Ç–∏–µ "–ü—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É"
        if (action === 'in_progress') {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–º messageId
          userStates[chatId] = {
            row,
            motherMessageId: messageId,
            stage: null,
            serviceMessages: []
          };

          // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –∏–∑ GAS
          try {
            const response = await axios.post(GAS_WEB_APP_URL, { action: 'getOriginalText', row });
            userStates[chatId].originalText = response.data.text || message.text;
          } catch {
            userStates[chatId].originalText = message.text;
          }

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
          const keyboard = buildExecutorButtons(row);
          const infoMsgId = await sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}:`, {
            reply_to_message_id: messageId,
            reply_markup: keyboard
          });

          // –ß–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
          setTimeout(() => {
            axios.post(`${TELEGRAM_API}/deleteMessage`, {
              chat_id: chatId,
              message_id: infoMsgId
            }).catch(() => {});
          }, 60000);

          return res.sendStatus(200);
        }

        // --- –í—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        if (action === 'select_executor' && executor) {
          if (executor === '–¢–µ–∫—Å—Ç–æ–≤–æ–π –ø–æ–¥—Ä—è–¥—á–∏–∫') {
            userStates[chatId].stage = 'awaiting_executor_name';
            await sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –≤—Ä—É—á–Ω—É—é:');
            return res.sendStatus(200);
          }

          const originalText = userStates[chatId]?.originalText || message.text;
          const cleanedText = originalText
            .replace(/üü¢ –í —Ä–∞–±–æ—Ç–µ.*\n?/g, '')
            .replace(/üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:.*\n?/g, '')
            .trim();

          const updatedText = `${cleanedText}\n\nüü¢ –í —Ä–∞–±–æ—Ç–µ\nüë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executor}`;

          const keyboard = {
            inline_keyboard: [
              [{ text: `‚úÖ –í —Ä–∞–±–æ—Ç–µ ${executor}`, callback_data: 'noop' }],
              [
                { text: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `done:${userStates[chatId].row}` },
                { text: '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏', callback_data: `delayed:${userStates[chatId].row}` },
                { text: '–û—Ç–º–µ–Ω–∞', callback_data: `cancel:${userStates[chatId].row}` }
              ]
            ]
          };

          // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await editMessageText(chatId, userStates[chatId].motherMessageId, updatedText, keyboard);

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ GAS
          await axios.post(GAS_WEB_APP_URL, {
            action: 'in_progress',
            row: userStates[chatId].row,
            message_id: userStates[chatId].motherMessageId,
            executor
          });

          return res.sendStatus(200);
        }

        // --- –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞—è–≤–∫–∏ (–ù–∞–∂–∞—Ç–∏–µ "–í—ã–ø–æ–ª–Ω–µ–Ω–æ")
        if (action === 'done') {
          userStates[chatId].stage = 'awaiting_photo';
          await askForPhoto(chatId);
          return res.sendStatus(200);
        }

        // --- –û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –û—Ç–º–µ–Ω–∞
        if (action === 'delayed' || action === 'cancel') {
          await axios.post(GAS_WEB_APP_URL, {
            action,
            row,
            executor: username
          });

          const statusText = action === 'delayed' ? '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏' : '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞';

          // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
          const updated = `${userStates[chatId]?.originalText || message.text}\n\nüìå –°—Ç–∞—Ç—É—Å: ${statusText}\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${username}`;
          await editMessageText(chatId, userStates[chatId].motherMessageId || messageId, updated);

          return res.sendStatus(200);
        }
      }

      // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (body.message) {
        const chatId = body.message.chat.id;
        const text = body.message.text;
        const userMessageId = body.message.message_id;
        const state = userStates[chatId];

        if (!state) return res.sendStatus(200);

        // –í–≤–æ–¥ –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é
        if (state.stage === 'awaiting_executor_name') {
          const executor = text.trim();
          await axios.post(GAS_WEB_APP_URL, { action: 'markInProgress', row: state.row, executor });
          const updatedText = `${state.originalText}\n\nüü¢ –í —Ä–∞–±–æ—Ç–µ\nüë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executor}`;
          await editMessageText(chatId, state.motherMessageId, updatedText, buildFollowUpButtons(state.row));
          await sendMessage(chatId, `‚úÖ –ó–∞—è–≤–∫–∞ #${state.row} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º ${executor}`, {
            reply_to_message_id: state.motherMessageId
          });
          delete userStates[chatId];
          return res.sendStatus(200);
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        if (state.stage === 'awaiting_photo' && body.message.photo) {
          const fileId = body.message.photo.slice(-1)[0].file_id;
          const fileRes = await axios.get(`${TELEGRAM_API}/getFile?file_id=${fileId}`);
          const fileUrl = `${TELEGRAM_FILE_API}/${fileRes.data.result.file_path}`;
          state.photo = fileUrl;
          state.stage = 'awaiting_sum';
          state.serviceMessages.push(us
