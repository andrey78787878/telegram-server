const axios = require('axios');
const FormData = require('form-data');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;

// –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —é–∑–µ—Ä–Ω–µ–π–º—ã)
const MANAGERS = ['@Andrey_Tkach_MB', '@Andrey_tkach_y'];
const EXECUTORS = ['@EvelinaB87', '@Olim19', '@Oblayor_04_09', '@Andrey_Tkach_MB', '@Davr_85', '@Andrey_tkach_y'];
const AUTHORIZED_USERS = [...new Set([...MANAGERS, ...EXECUTORS])];

// –•—Ä–∞–Ω–∏–ª–∏—â–∞
const userStorage = new Map(); // username -> user_id
const userStates = {}; // chat_id -> state

// --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
function extractRowFromMessage(text) {
  const match = text?.match(/#(\d+)/);
  return match ? parseInt(match[1]) : null;
}

function parseRequestMessage(text) {
  const result = {};
  text?.split('\n').forEach(line => {
    if (line.includes('–ü–∏—Ü—Ü–µ—Ä–∏—è:')) result.pizzeria = line.split(':')[1].trim();
    if (line.includes('–ü—Ä–æ–±–ª–µ–º–∞:')) result.problem = line.split(':')[1].trim();
    if (line.includes('–°—Ä–æ–∫:')) result.deadline = line.split(':')[1].trim();
  });
  return result;
}

async function sendMessage(chatId, text, options = {}) {
  try {
    const response = await axios.post(`${TELEGRAM_API}/sendMessage`, {
      chat_id: chatId,
      text,
      parse_mode: 'HTML',
      ...options
    });
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.response?.data);
    throw error;
  }
}

async function deleteMessageSafe(chatId, messageId) {
  try {
    await axios.post(`${TELEGRAM_API}/deleteMessage`, {
      chat_id: chatId,
      message_id: messageId
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error.response?.data);
  }
}

// --- –û–ë–†–ê–ë–û–¢–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ---
async function handleExecutorNotification(executorUsername, row, requestText, chatId, messageId) {
  try {
    const executorId = userStorage.get(executorUsername);
    if (!executorId) throw new Error('ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');

    const requestData = parseRequestMessage(requestText);
    const isEmergency = requestText.includes('üö®');

    // 1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    await sendMessage(
      executorId,
      `${isEmergency ? 'üö® ' : ''}üìå –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #${row}\n\n` +
      `üçï –ü–∏—Ü—Ü–µ—Ä–∏—è: ${requestData?.pizzeria || '‚Äî'}\n` +
      `üîß –ü—Ä–æ–±–ª–µ–º–∞: ${requestData?.problem || '‚Äî'}\n` +
      `üïì –°—Ä–æ–∫: ${requestData?.deadline || '‚Äî'}\n\n` +
      `${isEmergency ? '‚ÄºÔ∏è –°–†–û–ß–ù–û –¢–†–ï–ë–£–ï–¢–°–Ø –†–ï–ê–ö–¶–ò–Ø!' : '‚ö†Ô∏è –ü—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é'}`,
      { disable_notification: false }
    );

    // 2. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –∞–≤–∞—Ä–∏–π–Ω—ã—Ö
    if (isEmergency) {
      for (const manager of MANAGERS) {
        if (manager === executorUsername) continue;
        
        const managerId = userStorage.get(manager);
        if (managerId) {
          await sendMessage(
            managerId,
            `üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –ó–ê–Ø–í–ö–ê #${row}\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executorUsername}\n` +
            `–ü–∏—Ü—Ü–µ—Ä–∏—è: ${requestData?.pizzeria || '‚Äî'}`,
            { disable_notification: false }
          );
        }
      }
    }

    // 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
    await sendMessage(
      chatId,
      `‚úÖ ${executorUsername} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏`,
      { reply_to_message_id: messageId }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    await sendMessage(
      chatId,
      `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å ${executorUsername}`,
      { reply_to_message_id: messageId }
    );
  }
}

// --- –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ö–†–´–¢–ò–Ø –ó–ê–Ø–í–ö–ò ---
async function handleRequestCompletion(chatId, messageId, row, username, photoUrl) {
  try {
    // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
    await axios.post(`${TELEGRAM_API}/editMessageText`, {
      chat_id: chatId,
      message_id: messageId,
      text: `‚úÖ –ó–∞—è–≤–∫–∞ #${row} –∑–∞–∫—Ä—ã—Ç–∞\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${username}\n${photoUrl ? `üì∏ –§–æ—Ç–æ: ${photoUrl}` : ''}`,
      parse_mode: 'HTML'
    });

    // 2. –£–¥–∞–ª—è–µ–º —Å–µ—Ä–≤–∏—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (userStates[chatId]?.serviceMessages) {
      for (const msgId of userStates[chatId].serviceMessages) {
        await deleteMessageSafe(chatId, msgId);
      }
    }

    // 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ GAS
    await axios.post(GAS_WEB_APP_URL, {
      row,
      status: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
      executor: username,
      photoUrl
    });

    delete userStates[chatId];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞—è–≤–∫–∏:', error);
  }
}

// --- –û–°–ù–û–í–ù–û–ô WEBHOOK ---
module.exports = (app) => {
  app.post('/webhook', async (req, res) => {
    try {
      const { callback_query, message } = req.body;

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ user_id
      const user = callback_query?.from || message?.from;
      if (user?.username) {
        userStorage.set(`@${user.username}`, user.id);
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query
      if (callback_query) {
        const { data, message: msg, from } = callback_query;
        const chatId = msg.chat.id;
        const messageId = msg.message_id;
        const username = `@${from.username}`;
        const row = extractRowFromCallbackData(data) || extractRowFromMessage(msg.text);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if (!AUTHORIZED_USERS.includes(username)) {
          await sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
          return res.sendStatus(200);
        }

        // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        if (data.startsWith('executor:')) {
          const executorUsername = data.split(':')[1];
          await handleExecutorNotification(
            executorUsername,
            row,
            msg.text || msg.caption,
            chatId,
            messageId
          );
          
          // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ —á–∞—Ç–µ
          await axios.post(`${TELEGRAM_API}/editMessageText`, {
            chat_id: chatId,
            message_id: messageId,
            text: `${msg.text}\n\nüü¢ –í —Ä–∞–±–æ—Ç–µ (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executorUsername})`,
            parse_mode: 'HTML'
          });

          // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ GAS
          await axios.post(GAS_WEB_APP_URL, {
            row,
            status: '–í —Ä–∞–±–æ—Ç–µ',
            executor: executorUsername
          });
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞—è–≤–∫–∏
        if (data.startsWith('done:')) {
          if (!EXECUTORS.includes(username)) {
            await sendMessage(chatId, '‚ùå –¢–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å –∑–∞—è–≤–∫–∏');
            return res.sendStatus(200);
          }

          // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫—Ä—ã—Ç–∏—è
          const photoMsg = await sendMessage(chatId, 'üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç');
          userStates[chatId] = {
            stage: 'waiting_photo',
            row,
            username,
            messageId,
            originalRequest: parseRequestMessage(msg.text),
            serviceMessages: [photoMsg.result.message_id]
          };
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ñ–æ—Ç–æ/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
      if (message && userStates[message.chat.id]) {
        const state = userStates[message.chat.id];
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        if (state.stage === 'waiting_photo' && message.photo) {
          await deleteMessageSafe(message.chat.id, state.serviceMessages[0]);
          const fileId = message.photo[message.photo.length - 1].file_id;
          state.photoUrl = await getTelegramFileUrl(fileId);
          
          const sumMsg = await sendMessage(message.chat.id, 'üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Ä–∞–±–æ—Ç');
          state.stage = 'waiting_sum';
          state.serviceMessages = [sumMsg.result.message_id];
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã
        if (state.stage === 'waiting_sum' && message.text) {
          await deleteMessageSafe(message.chat.id, state.serviceMessages[0]);
          state.sum = message.text;
          
          const commentMsg = await sendMessage(message.chat.id, 'üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π');
          state.stage = 'waiting_comment';
          state.serviceMessages = [commentMsg.result.message_id];
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        if (state.stage === 'waiting_comment' && message.text) {
          await deleteMessageSafe(message.chat.id, state.serviceMessages[0]);
          state.comment = message.text;
          
          // –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—è–≤–∫–∏
          await handleRequestCompletion(
            message.chat.id,
            state.messageId,
            state.row,
            state.username,
            state.photoUrl
          );
        }
      }

      res.sendStatus(200);
    } catch (error) {
      console.error('Webhook error:', error);
      res.sendStatus(500);
    }
  });
};
