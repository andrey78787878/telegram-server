/* ---------------------------------- –ò–º–ø–æ—Ä—Ç ---------------------------------- */

const axios = require('axios');
const FormData = require('form-data'); // –æ—Å—Ç–∞–≤–ª—è—é, –∫–∞–∫ –≤ —Ç–≤–æ—ë–º —Ñ–∞–π–ª–µ, –Ω–∞ –±—É–¥—É—â–µ–µ

/* ------------------------------ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ------------------------------- */

const BOT_TOKEN = process.env.BOT_TOKEN;
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
const TELEGRAM_FILE_API = `https://api.telegram.org/file/bot${BOT_TOKEN}`;
const GAS_WEB_APP_URL = process.env.GAS_WEB_APP_URL;

/**
 * –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–∞–∫ —É —Ç–µ–±—è).
 * –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å —Å–ø–∏—Å–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –Ω–∏–∂–µ.
 */
const MANAGERS = ['@Andrey_Tkach_MB', '@Davr_85', '@EvelinaB87'];
const EXECUTORS = ['@Andrey_Tkach_MB', '@Olim19', '@Davr_85', '@Oblayor_04_09', '@IkromovichV', '@EvelinaB87'];
const AUTHORIZED_USERS = [...new Set([...MANAGERS, ...EXECUTORS])];

/* -------------------------- –ü–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞ (RAM) -------------------------- */

/** –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π username -> Telegram user_id */
const userStorage = new Map();

/**
 * –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π, –ø–æ chatId:
 * state = {
 *   stage: 'waiting_photo' | 'waiting_sum' | 'waiting_comment',
 *   row: number,
 *   username: '@name',
 *   messageId: number, // id "–º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–≥–æ" —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
 *   originalRequest: {...}, // —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –ø–æ–ª—è –∑–∞—è–≤–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
 *   serviceMessages: number[], // id —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã —É–¥–∞–ª—è—Ç—å
 *   isEmergency: boolean,
 *   photoUrl?: string,
 *   sum?: string,
 *   comment?: string
 * }
 */
const userStates = Object.create(null);

/* --------------------------------- –£—Ç–∏–ª–∏—Ç—ã --------------------------------- */

/** –°—Ç—Ä–æ–≥–∏–π –ø—Ä–µ—Ñ–∏–∫—Å '@' —É username */
function normalizeUsername(maybeUsername) {
  if (!maybeUsername) return null;
  const s = String(maybeUsername).trim();
  if (!s) return null;
  return s.startsWith('@') ? s : `@${s}`;
}

/** –ü—Ä–æ—Å—Ç–æ–π –ª–æ–≥–≥–µ—Ä —Å ISO-–≤—Ä–µ–º–µ–Ω–µ–º */
function logInfo(...args) {
  console.log(new Date().toISOString(), '-', ...args);
}
function logWarn(...args) {
  console.warn(new Date().toISOString(), '-', ...args);
}
function logError(...args) {
  console.error(new Date().toISOString(), '-', ...args);
}

/** –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–∞—É–∑–∞ (await delay(ms)) */
function delay(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

/* ---------------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ-–∏–∏ ---------------------------- */

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏–∑ callback_data –≤–∏–¥–∞ 'executor:@user:123' –∏–ª–∏ 'done:123'
 */
function extractRowFromCallbackData(callbackData) {
  if (!callbackData || typeof callbackData !== 'string') return null;
  const parts = callbackData.split(':');
  if (parts.length < 2) return null;
  const maybe = parts[parts.length - 1];
  const row = parseInt(maybe, 10);
  return Number.isFinite(row) ? row : null;
}

/** –ò–∑–≤–ª–µ–∫–∞–µ–º #<–Ω–æ–º–µ—Ä> –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è */
function extractRowFromMessage(text) {
  if (!text || typeof text !== 'string') return null;
  const match = text.match(/#(\d+)/);
  return match ? parseInt(match[1], 10) : null;
}

/**
 * –ü–∞—Ä—Å–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞.
 * –°–æ—Ö—Ä–∞–Ω—è—é —Ç–≤–æ—é –ª–æ–≥–∏–∫—É –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º.
 */
function parseRequestMessage(text) {
  if (!text || typeof text !== 'string') return null;
  const result = {};
  const lines = text.split('\n');

  lines.forEach((line) => {
    if (line.includes('–ü–∏—Ü—Ü–µ—Ä–∏—è:')) result.pizzeria = line.split(':')[1]?.trim();
    if (line.includes('–ö–∞—Ç–µ–≥–æ—Ä–∏—è:')) result.category = line.split(':')[1]?.trim();
    if (line.includes('–ü—Ä–æ–±–ª–µ–º–∞:')) result.problem = line.split(':')[1]?.trim();
    if (line.includes('–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:')) result.initiator = line.split(':')[1]?.trim();
    if (line.includes('–¢–µ–ª–µ—Ñ–æ–Ω:')) result.phone = line.split(':')[1]?.trim();
    if (line.includes('–°—Ä–æ–∫:')) result.deadline = line.split(':')[1]?.trim();
  });

  return result;
}

/** –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫—É –≤ –¥–Ω—è—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ deadline */
function calculateDelayDays(deadline) {
  if (!deadline) return 0;
  try {
    const deadlineDate = new Date(deadline);
    if (isNaN(+deadlineDate)) return 0;
    const today = new Date();
    const diffTime = today - deadlineDate;
    return Math.max(0, Math.ceil(diffTime / (1000 * 60 * 60 * 24)));
  } catch (e) {
    logError('Error calculating delay:', e);
    return 0;
  }
}

/** –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (–æ—Å—Ç–∞–≤–∏–ª –∫–∞–∫ –±—ã–ª–æ, –Ω–µ–º–Ω–æ–≥–æ —É–ø–æ—Ä—è–¥–æ—á–∏–ª) */
function formatCompletionMessage(data, diskUrl = null) {
  const photoLink = diskUrl ? diskUrl : data.photoUrl ? data.photoUrl : null;
  return `
‚úÖ –ó–∞—è–≤–∫–∞ #${data.row} ${data.isEmergency ? 'üö® (–ê–í–ê–†–ò–ô–ù–ê–Ø)' : ''} –∑–∞–∫—Ä—ã—Ç–∞
${photoLink ? `\nüì∏ ${photoLink}\n` : ''}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${data.comment || '–Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}
üí∞ –°—É–º–º–∞: ${data.sum || '0'} —Å—É–º
üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${data.executor}
${data.delayDays > 0 ? `üî¥ –ü—Ä–æ—Å—Ä–æ—á–∫–∞: ${data.delayDays} –¥–Ω.` : ''}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üè¢ –ü–∏—Ü—Ü–µ—Ä–∏—è: ${data.originalRequest?.pizzeria || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üîß –ü—Ä–æ–±–ª–µ–º–∞: ${data.originalRequest?.problem || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
  `.trim();
}

/* -------------------------- –û–±—ë—Ä—Ç–∫–∏ Telegram API -------------------------- */

/** –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (HTML parse_mode –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω—ë–Ω) */
async function sendMessage(chatId, text, options = {}) {
  try {
    const payload = {
      chat_id: chatId,
      text,
      parse_mode: 'HTML',
      ...options,
    };
    const resp = await axios.post(`${TELEGRAM_API}/sendMessage`, payload);
    return resp;
  } catch (error) {
    logError('Send message error:', error.response?.data || error.message);
    throw error;
  }
}

/** –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è */
async function editMessageSafe(chatId, messageId, text, options = {}) {
  try {
    const payload = {
      chat_id: chatId,
      message_id: messageId,
      text,
      parse_mode: 'HTML',
      ...options,
    };
    return await axios.post(`${TELEGRAM_API}/editMessageText`, payload);
  } catch (error) {
    const desc = error.response?.data?.description || '';
    if (desc.includes('no text in the message') || desc.includes('message to edit not found')) {
      // –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–∏–∫ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º ‚Äî —à–ª—ë–º –Ω–æ–≤–æ–µ
      return await sendMessage(chatId, text, options);
    }
    logError('Edit message error:', error.response?.data || error.message);
    throw error;
  }
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞/–∑–∞–º–µ–Ω–∞ inline-–∫–Ω–æ–ø–æ–∫. –ï—Å–ª–∏ Telegram –æ—Ç–≤–µ—á–∞–µ—Ç ¬´not modified¬ª ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
 * –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏.
 */
async function sendButtonsWithRetry(chatId, messageId, buttons, fallbackText) {
  try {
    const resp = await axios.post(`${TELEGRAM_API}/editMessageReplyMarkup`, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: { inline_keyboard: buttons },
    });
    return resp;
  } catch (error) {
    const desc = error.response?.data?.description || '';
    if (desc.includes('not modified')) {
      return { ok: true };
    }
    // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    return await sendMessage(chatId, fallbackText || ' ', {
      reply_markup: { inline_keyboard: buttons },
    });
  }
}

/**
 * –°–Ω—è—Ç—å inline-–∫–Ω–æ–ø–∫–∏ —É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É).
 * –ò—Å–ø–æ–ª—å–∑—É–µ–º editMessageReplyMarkup —Å –ø—É—Å—Ç—ã–º –æ–±—ä–µ–∫—Ç–æ–º, –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç Telegram.
 */
async function clearInlineKeyboard(chatId, messageId) {
  try {
    return await axios.post(`${TELEGRAM_API}/editMessageReplyMarkup`, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: {}, // –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç ‚Äî —É–¥–∞–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    });
  } catch (error) {
    const desc = error.response?.data?.description || '';
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ/–Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    if (
      desc.includes('message to edit not found') ||
      desc.includes('Bad Request: message is not modified')
    ) {
      return { ok: false, ignored: true };
    }
    logWarn('clearInlineKeyboard error:', error.response?.data || error.message);
    return { ok: false, ignored: false, error };
  }
}

/** –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: 400/404 ‚Äî –Ω–µ —Ñ–∞—Ç–∞–ª—å–Ω–æ */
async function deleteMessageSafe(chatId, messageId) {
  if (!chatId || !messageId) return null;
  try {
    return await axios.post(`${TELEGRAM_API}/deleteMessage`, {
      chat_id: chatId,
      message_id: messageId,
    });
  } catch (error) {
    const data = error.response?.data;
    // –≠—Ç–∏ –æ—à–∏–±–∫–∏ –Ω–µ—Ä–µ–¥–∫–∏, –∫–æ–≥–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ/–∑–∞—á–∏—â–µ–Ω–æ
    if (data?.description && data.description.includes('message to delete not found')) {
      logWarn('Delete message warning (not found):', { chatId, messageId });
      return null;
    }
    logWarn('Delete message error:', data || error.message);
    return null;
  }
}

/** –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL —Ñ–∞–π–ª–∞ Telegram –ø–æ file_id */
async function getTelegramFileUrl(fileId) {
  if (!fileId) return null;
  try {
    const { data } = await axios.get(`${TELEGRAM_API}/getFile?file_id=${fileId}`);
    const path = data?.result?.file_path;
    if (!path) return null;
    return `${TELEGRAM_FILE_API}/${path}`;
  } catch (error) {
    logWarn('Get file URL error:', error.response?.data || error.message);
    return null;
  }
}

/* ------------------------------ GAS-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ------------------------------ */

async function sendToGAS(data) {
  try {
    logInfo('Sending to GAS:', JSON.stringify(data));
    const response = await axios.post(GAS_WEB_APP_URL, data);
    logInfo('Data sent to GAS, status:', response.status);
    return response.data;
  } catch (error) {
    logError('Error sending to GAS:', error.message);
    throw error;
  }
}

async function getGoogleDiskLink(row) {
  try {
    const res = await axios.post(`${GAS_WEB_APP_URL}?getDiskLink=true`, { row });
    return res.data?.diskLink || null;
  } catch (error) {
    logWarn('Get Google Disk link error:', error.response?.data || error.message);
    return null;
  }
}

/* ---------------------------- –í–∞–ª–∏–¥–∞—Ü–∏–∏/–ü—Ä–æ–≤–µ—Ä–∫–∏ ---------------------------- */

function isEmergencyText(text) {
  if (!text) return false;
  return text.includes('üö®') || text.includes('–ê–í–ê–†–ò–ô–ù–ê–Ø');
}

function isManager(username) {
  const u = normalizeUsername(username);
  return !!u && MANAGERS.includes(u);
}

function isExecutor(username) {
  const u = normalizeUsername(username);
  return !!u && EXECUTORS.includes(u);
}

function isAuthorized(username) {
  const u = normalizeUsername(username);
  return !!u && AUTHORIZED_USERS.includes(u);
}

/* -------------------------- –û–±—â–∏–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π ------------------------- */

function buildAssignExecutorKeyboard(row) {
  return EXECUTORS.map((e) => [{ text: e, callback_data: `executor:${e}:${row}` }]);
}

function buildActionsKeyboard(row) {
  return [
    [
      { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `done:${row}` },
      { text: '‚è≥ –û–∂–∏–¥–∞–µ—Ç', callback_data: `wait:${row}` },
      { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel:${row}` },
    ],
  ];
}

/* ------------------------------ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ------------------------------ */

/**
 * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ–± –∞–≤–∞—Ä–∏–π–Ω–æ–π –∑–∞—è–≤–∫–µ, –∫–æ–≥–¥–∞ –æ–Ω–∞ –≤–ø–µ—Ä–≤—ã–µ –ø–æ—Å—Ç—É–ø–∞–µ—Ç –≤ —á–∞—Ç.
 * –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å üö®/–ê–í–ê–†–ò–ô–ù–ê–Ø (—Å–æ—Ö—Ä–∞–Ω—è—é —Ç–≤–æ—é –ª–æ–≥–∏–∫—É).
 */
async function maybeDuplicateEmergencyToManagersIfNeeded(msg) {
  try {
    const text = msg?.text || msg?.caption || '';
    if (!text) return;

    if (isEmergencyText(text)) {
      const requestData = parseRequestMessage(text);
      const row = extractRowFromMessage(text);

      if (!row) return;

      for (const manager of MANAGERS) {
        const managerId = userStorage.get(manager);
        if (!managerId) continue;
        try {
          await sendMessage(
            managerId,
            `üö® –ü–û–°–¢–£–ü–ò–õ–ê –ê–í–ê–†–ò–ô–ù–ê–Ø –ó–ê–Ø–í–ö–ê #${row}\n\n` +
              `üè¢ –ü–∏—Ü—Ü–µ—Ä–∏—è: ${requestData?.pizzeria || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
              `üîß –ü—Ä–æ–±–ª–µ–º–∞: ${requestData?.problem || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
              `üïì –°—Ä–æ–∫: ${requestData?.deadline || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
              `‚ÄºÔ∏è –¢–†–ï–ë–£–ï–¢–°–Ø –í–ê–®–ï –í–ù–ò–ú–ê–ù–ò–ï!`,
            { disable_notification: false }
          );
        } catch (e) {
          logWarn(`Error sending emergency to ${manager}:`, e?.response?.data || e.message);
        }
      }
    }
  } catch (e) {
    logWarn('maybeDuplicateEmergencyToManagersIfNeeded error:', e.message);
  }
}

/**
 * –°–±—Ä–æ—Å –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ chatId
 */
function resetState(chatId) {
  if (chatId && userStates[chatId]) {
    delete userStates[chatId];
  }
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
async function cleanupServiceMessages(chatId, state) {
  if (!state?.serviceMessages?.length) return;
  await Promise.all(
    state.serviceMessages.map((mid) => deleteMessageSafe(chatId, mid).catch(() => null))
  );
  state.serviceMessages = [];
}

/* -------------------------------- –≠–∫—Å–ø–æ—Ä—Ç --------------------------------- */

module.exports = (app) => {
  /**
   * –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Telegram webhook
   */
  app.post('/webhook', async (req, res) => {
    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤–µ—Å—å webhook –≤ try/catch, –∫–∞–∫ —É —Ç–µ–±—è
    try {
      const body = req.body;

      /* ------------------------------ message.from ------------------------------ */
      // –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º user_id –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –õ–°-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
      if (body?.message?.from) {
        const userFrom = body.message.from;
        if (userFrom?.username) {
          const key = normalizeUsername(userFrom.username);
          if (key) userStorage.set(key, userFrom.id);
        }

        // –î–æ–ø. –ª–æ–≥–∏–∫–∞: –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤–∞—Ä–∏–π–Ω–æ–π –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º (–∫–∞–∫ —É —Ç–µ–±—è)
        const msg = body.message;
        await maybeDuplicateEmergencyToManagersIfNeeded(msg);
      }

      /* ------------------------------ callback_query ----------------------------- */
      if (body?.callback_query) {
        const { callback_query } = body;
        const fromUser = callback_query.from || {};
        const msg = callback_query.message || {};
        const chatId = msg?.chat?.id;
        const messageId = msg?.message_id;
        const rawUsername = fromUser?.username ? `@${fromUser.username}` : null;
        const username = normalizeUsername(rawUsername);
        const data = callback_query.data || '';

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –∞–≤—Ç–æ—Ä–∞ –Ω–∞–∂–∞—Ç–∏—è
        if (fromUser?.username) {
          const key = normalizeUsername(fromUser.username);
          if (key) userStorage.set(key, fromUser.id);
        }

        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã Telegram —É–±—Ä–∞–ª "–∫—Ä—É—Ç–∏–ª–∫—É"
        axios
          .post(`${TELEGRAM_API}/answerCallbackQuery`, {
            callback_query_id: callback_query.id,
          })
          .catch((e) => logWarn('Answer callback error:', e?.response?.data || e.message));

        // –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
        const rowFromCb = extractRowFromCallbackData(data);
        const rowFromText = extractRowFromMessage(msg?.text || msg?.caption || '');
        const row = Number.isFinite(rowFromCb) ? rowFromCb : rowFromText;

        if (!Number.isFinite(row)) {
          logWarn('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∏–∑ callback_query:', data);
          if (chatId) {
            const accessMsg = await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏');
            // –£–¥–∞–ª–∏–º —á–µ—Ä–µ–∑ 30 —Å–µ–∫
            setTimeout(
              () => deleteMessageSafe(chatId, accessMsg?.data?.result?.message_id),
              30_000
            );
          }
          return res.sendStatus(200);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if (!isAuthorized(username)) {
          if (chatId) {
            const accessDeniedMsg = await sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.');
            setTimeout(
              () => deleteMessageSafe(chatId, accessDeniedMsg?.data?.result?.message_id),
              30_000
            );
          }
          return res.sendStatus(200);
        }

        /* ------------------------ –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É" ------------------------ */
        if (data.startsWith('accept')) {
          if (!isManager(username)) {
            if (chatId) {
              const notManagerMsg = await sendMessage(
                chatId,
                '‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∑–∞—è–≤–∫–∏.'
              );
              setTimeout(
                () => deleteMessageSafe(chatId, notManagerMsg?.data?.result?.message_id),
                30_000
              );
            }
            return res.sendStatus(200);
          }

          const isEmergency = isEmergencyText(msg?.text || msg?.caption || '');
          const requestData = parseRequestMessage(msg?.text || msg?.caption || '');

          if (isEmergency) {
            // 1) –£–≤–µ–¥–æ–º–∏–º –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–∫—Ä–æ–º–µ –Ω–∞–∂–∞–≤—à–µ–≥–æ)
            for (const manager of MANAGERS) {
              const managerId = userStorage.get(manager);
              if (!managerId || managerId === fromUser.id) continue;

              try {
                await sendMessage(
                  managerId,
                  `üö® –ú–ï–ù–ï–î–ñ–ï–† ${username} –ü–†–ò–ù–Ø–õ –ê–í–ê–†–ò–ô–ù–£–Æ –ó–ê–Ø–í–ö–£ #${row}\n\n` +
                    `üè¢ –ü–∏—Ü—Ü–µ—Ä–∏—è: ${requestData?.pizzeria || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                    `üîß –ü—Ä–æ–±–ª–µ–º–∞: ${requestData?.problem || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                    `üïì –°—Ä–æ–∫: ${requestData?.deadline || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
                    `‚ÄºÔ∏è –¢–†–ï–ë–£–ï–¢–°–Ø –ö–û–ù–¢–†–û–õ–¨!`,
                  { disable_notification: false }
                );
              } catch (e) {
                logWarn(`Error sending to manager ${manager}:`, e?.response?.data || e.message);
              }
            }

            // 2) –í—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            const buttons = buildAssignExecutorKeyboard(row);

            const chooseExecutorMsg = await sendMessage(
              chatId,
              `üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –ó–ê–Ø–í–ö–ê - –≤—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è #${row}:`,
              { reply_to_message_id: messageId }
            );

            // –ß–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É —É–±—Ä–∞—Ç—å —Å–µ—Ä–≤–∏—Å–Ω–æ–µ "–≤—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è" (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å)
            setTimeout(async () => {
              try {
                await deleteMessageSafe(chatId, chooseExecutorMsg?.data?.result?.message_id);
              } catch (e) {
                logWarn('Error deleting choose executor message:', e.message);
              }
            }, 60_000);

            // –ü–æ—Å—Ç–∞–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await sendButtonsWithRetry(
              chatId,
              messageId,
              buttons,
              `–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∞–≤–∞—Ä–∏–π–Ω–æ–π –∑–∞—è–≤–∫–∏ #${row}:`
            );

            // –û—Ç–ø—Ä–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å –≤ GAS
            await sendToGAS({
              row,
              status: '–ê–≤–∞—Ä–∏–π–Ω–∞—è',
              message_id: messageId,
              isEmergency: true,
              pizzeria: requestData?.pizzeria,
              problem: requestData?.problem,
              deadline: requestData?.deadline,
              initiator: requestData?.initiator,
              phone: requestData?.phone,
              category: requestData?.category,
              manager: username,
              timestamp: new Date().toISOString(),
            });

            return res.sendStatus(200);
          }

          // –û–±—ã—á–Ω–∞—è –∑–∞—è–≤–∫–∞: –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
          {
            const buttons = buildAssignExecutorKeyboard(row);

            const chooseExecutorMsg = await sendMessage(
              chatId,
              `üë∑ –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}:`,
              { reply_to_message_id: messageId }
            );

            setTimeout(async () => {
              try {
                await deleteMessageSafe(chatId, chooseExecutorMsg?.data?.result?.message_id);
              } catch (e) {
                logWarn('Error deleting choose executor message:', e.message);
              }
            }, 60_000);

            await sendButtonsWithRetry(
              chatId,
              messageId,
              buttons,
              `–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}:`
            );

            const requestData = parseRequestMessage(msg?.text || msg?.caption || '');
            await sendToGAS({
              row,
              status: '–ü—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É',
              message_id: messageId,
              pizzeria: requestData?.pizzeria,
              problem: requestData?.problem,
              deadline: requestData?.deadline,
              initiator: requestData?.initiator,
              phone: requestData?.phone,
              category: requestData?.category,
              manager: username,
              timestamp: new Date().toISOString(),
            });

            return res.sendStatus(200);
          }
        }

        /* --------------------------- –í—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è --------------------------- */
        if (data.startsWith('executor:')) {
          const parts = data.split(':');
          // executor:@UserName:<row>
          const executorUsernameRaw = parts[1] || '';
          const executorUsername = normalizeUsername(executorUsernameRaw);
          const requestData = parseRequestMessage(msg?.text || msg?.caption || '');

          // –£–¥–∞–ª—è–µ–º —Å–µ—Ä–≤–∏—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
          if (msg?.reply_to_message?.message_id) {
            await deleteMessageSafe(chatId, msg.reply_to_message.message_id);
          }

          // –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
          const actionButtons = buildActionsKeyboard(row);
          await sendButtonsWithRetry(
            chatId,
            messageId,
            actionButtons,
            `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ #${row}:`
          );

          // –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–µ)
          await sendMessage(
            chatId,
            `üì¢ ${executorUsername}, –≤–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #${row}!`,
            { reply_to_message_id: messageId }
          );

          // –î—É–±–ª–∏—Ä—É–µ–º –≤ –õ–° –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é (–µ—Å–ª–∏ –∑–Ω–∞–µ–º –µ–≥–æ user_id)
          try {
            const executorId = userStorage.get(executorUsername);
            if (executorId) {
              await sendMessage(
                executorId,
                `üìå –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #${row}\n\n` +
                  `üçï –ü–∏—Ü—Ü–µ—Ä–∏—è: ${requestData?.pizzeria || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                  `üîß –ü—Ä–æ–±–ª–µ–º–∞: ${requestData?.problem || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                  `üïì –°—Ä–æ–∫: ${requestData?.deadline || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
                  `‚ö†Ô∏è –ü—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é`,
                { parse_mode: 'HTML' }
              );
            } else {
              logWarn('‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω executorId –¥–ª—è', executorUsername);
            }
          } catch (e) {
            logWarn('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –õ–°:', e.message);
          }

          await sendToGAS({
            row,
            status: '–í —Ä–∞–±–æ—Ç–µ',
            executor: executorUsername,
            message_id: messageId,
            pizzeria: requestData?.pizzeria,
            problem: requestData?.problem,
            deadline: requestData?.deadline,
            initiator: requestData?.initiator,
            phone: requestData?.phone,
            category: requestData?.category,
            manager: username,
            timestamp: new Date().toISOString(),
          });

          return res.sendStatus(200);
        }

        /* ------------------------------ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ------------------------------ */
        if (data.startsWith('done:')) {
          if (!isExecutor(username)) {
            const notExecutorMsg = await sendMessage(
              chatId,
              '‚ùå –¢–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å –∑–∞—è–≤–∫–∏.'
            );
            setTimeout(
              () => deleteMessageSafe(chatId, notExecutorMsg?.data?.result?.message_id),
              90_000
            );
            return res.sendStatus(200);
          }

          // –ü—Ä–æ—Å–∏–º —Ñ–æ—Ç–æ
          const photoMsg = await sendMessage(
            chatId,
            'üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç\n\n' + '‚ö†Ô∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel',
            { reply_to_message_id: messageId }
          );

          // –°—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          userStates[chatId] = {
            stage: 'waiting_photo',
            row: parseInt(data.split(':')[1], 10),
            username,
            messageId,
            originalRequest: parseRequestMessage(msg?.text || msg?.caption || ''),
            serviceMessages: [photoMsg?.data?.result?.message_id].filter(Boolean),
            isEmergency: isEmergencyText(msg?.text || msg?.caption || ''),
          };

          // –ß–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã —É–¥–∞–ª–∏–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–æ —Ñ–æ—Ç–æ
          setTimeout(() => {
            const mid = photoMsg?.data?.result?.message_id;
            deleteMessageSafe(chatId, mid).catch(() => {});
          }, 120_000);

          return res.sendStatus(200);
        }

        /* --------------------------- –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏ --------------------------- */
        if (data.startsWith('wait:')) {
          if (!isExecutor(username)) {
            const notExecutorMsg = await sendMessage(
              chatId,
              '‚ùå –¢–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏.'
            );
            setTimeout(
              () => deleteMessageSafe(chatId, notExecutorMsg?.data?.result?.message_id),
              90_000
            );
            return res.sendStatus(200);
          }

          await sendMessage(chatId, '‚è≥ –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å "–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏"', {
            reply_to_message_id: messageId,
          });

          const requestData = parseRequestMessage(msg?.text || msg?.caption || '');

          await sendToGAS({
            row: parseInt(data.split(':')[1], 10),
            status: '–û–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏',
            executor: username,
            message_id: messageId,
            pizzeria: requestData?.pizzeria,
            problem: requestData?.problem,
            deadline: requestData?.deadline,
            initiator: requestData?.initiator,
            phone: requestData?.phone,
            category: requestData?.category,
            timestamp: new Date().toISOString(),
          });

          return res.sendStatus(200);
        }

        /* -------------------------------- –û—Ç–º–µ–Ω–∞ -------------------------------- */
        if (data.startsWith('cancel:')) {
          if (!isExecutor(username)) {
            const notExecutorMsg = await sendMessage(
              chatId,
              '‚ùå –¢–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–º–µ–Ω—è—Ç—å –∑–∞—è–≤–∫–∏.'
            );
            setTimeout(
              () => deleteMessageSafe(chatId, notExecutorMsg?.data?.result?.message_id),
              30_000
            );
            return res.sendStatus(200);
          }

          await sendMessage(chatId, 'üö´ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', { reply_to_message_id: messageId });

          const requestData = parseRequestMessage(msg?.text || msg?.caption || '');

          await sendToGAS({
            row: parseInt(data.split(':')[1], 10),
            status: '–û—Ç–º–µ–Ω–µ–Ω–æ',
            executor: username,
            message_id: messageId,
            pizzeria: requestData?.pizzeria,
            problem: requestData?.problem,
            deadline: requestData?.deadline,
            initiator: requestData?.initiator,
            phone: requestData?.phone,
            category: requestData?.category,
            timestamp: new Date().toISOString(),
          });

          return res.sendStatus(200);
        }
      }

      /* ----------------------- –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (message) ----------------------- */

      /**
       * –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–∞–ø–æ–≤ —Å–±–æ—Ä–∞: —Ñ–æ—Ç–æ -> —Å—É–º–º–∞ -> –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
       * –°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ —É —Ç–µ–±—è, –Ω–æ:
       *  - –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ —á–µ—Ä–µ–∑ clearInlineKeyboard
       *  - –î–æ–±–∞–≤–ª–µ–Ω—ã /cancel –∏ –∑–∞—â–∏—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
       */
      if (body?.message && userStates[body.message.chat.id]) {
        (async () => {
          const msg = body.message;
          const chatId = msg?.chat?.id;
          const state = userStates[chatId];

          try {
            // /cancel ‚Äî —Å–±—Ä–æ—Å –Ω–∞ –ª—é–±–æ–π —Å—Ç–∞–¥–∏–∏
            if (msg?.text && msg.text.trim() === '/cancel') {
              await cleanupServiceMessages(chatId, state);
              await sendMessage(chatId, '‚ùé –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω—ë–Ω.', {
                reply_to_message_id: state?.messageId,
              });
              resetState(chatId);
              return res.sendStatus(200);
            }

            /* --------------------------- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ --------------------------- */
            if (state?.stage === 'waiting_photo' && (msg?.photo || msg?.document)) {
              // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ ¬´–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ¬ª
              await cleanupServiceMessages(chatId, state);

              // –ë–µ—Ä—ë–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
              let fileId = null;
              if (Array.isArray(msg.photo) && msg.photo.length > 0) {
                const best = msg.photo[msg.photo.length - 1];
                fileId = best?.file_id || best?.fileId || null;
              } else if (msg.document && /^image\//.test(msg.document.mime_type || '')) {
                fileId = msg.document.file_id;
              }

              state.photoUrl = await getTelegramFileUrl(fileId);

              // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É
              const sumMsg = await sendMessage(chatId, 'üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Ä–∞–±–æ—Ç (–≤ —Å—É–º–∞—Ö)');
              state.stage = 'waiting_sum';
              state.serviceMessages = [sumMsg?.data?.result?.message_id].filter(Boolean);

              setTimeout(() => {
                const mid = sumMsg?.data?.result?.message_id;
                deleteMessageSafe(chatId, mid).catch(() => {});
              }, 120_000);

              return res.sendStatus(200);
            }

            /* --------------------------- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã --------------------------- */
            if (state?.stage === 'waiting_sum' && msg?.text) {
              await cleanupServiceMessages(chatId, state);

              // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—É–º–º—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é –∫–∞–∫ –µ—Å—Ç—å (—Å—Ç—Ä–æ–∫–∞)
              state.sum = msg.text.trim();

              const commentMsg = await sendMessage(chatId, 'üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π');
              state.stage = 'waiting_comment';
              state.serviceMessages = [commentMsg?.data?.result?.message_id].filter(Boolean);

              setTimeout(() => {
                const mid = commentMsg?.data?.result?.message_id;
                deleteMessageSafe(chatId, mid).catch(() => {});
              }, 120_000);

              return res.sendStatus(200);
            }

            /* ------------------------ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ------------------------ */
            if (state?.stage === 'waiting_comment' && msg?.text) {
              await cleanupServiceMessages(chatId, state);

              state.comment = msg.text.trim();

              const completionData = {
                row: state.row,
                sum: state.sum,
                comment: state.comment,
                photo: state.photoUrl,
                executor: state.username,
                originalRequest: state.originalRequest,
                delayDays: calculateDelayDays(state.originalRequest?.deadline),
                status: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
                isEmergency: state.isEmergency,
                pizzeria: state.originalRequest?.pizzeria,
                problem: state.originalRequest?.problem,
                deadline: state.originalRequest?.deadline,
                initiator: state.originalRequest?.initiator,
                phone: state.originalRequest?.phone,
                category: state.originalRequest?.category,
                timestamp: new Date().toISOString(),
              };

              // 1) –°–Ω–∏–º–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –∑–∞—è–≤–∫–∏
              await clearInlineKeyboard(chatId, state.messageId);

              // 2) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ GAS
              await sendToGAS(completionData);

              // 3) –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (–æ—Å—Ç–∞–≤–ª—è—é —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ —É —Ç–µ–±—è, —Ç–æ–ª—å–∫–æ –≤—ã–Ω–µ—Å–µ–Ω–æ –≤ —Ñ—É–Ω–∫—Ü–∏—é)
              const finalText = [
                `‚úÖ –ó–∞—è–≤–∫–∞ #${state.row} –∑–∞–∫—Ä—ã—Ç–∞`,
                `üì∏ ${state.photoUrl || '–Ω–µ—Ç —Ñ–æ—Ç–æ'}`,
                `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${state.comment || '–Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}`,
                `üí∞ –°—É–º–º–∞: ${state.sum || '0'} —Å—É–º`,
                `üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${state.username}`,
                completionData.delayDays > 0 ? `üî¥ –ü—Ä–æ—Å—Ä–æ—á–∫–∞: ${completionData.delayDays} –¥–Ω.` : '',
                '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ',
                `üè¢ –ü–∏—Ü—Ü–µ—Ä–∏—è: ${state.originalRequest?.pizzeria || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`,
                `üîß –ü—Ä–æ–±–ª–µ–º–∞: ${state.originalRequest?.problem || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`,
              ]
                .filter(Boolean)
                .join('\n');

              // 4) –û—Ç–ø—Ä–∞–≤–∏–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–µ
              await sendMessage(chatId, finalText, { reply_to_message_id: state.messageId });

              // 5) –ß–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã –∑–∞–ø—Ä–æ—Å–∏–º —Å—Å—ã–ª–∫—É —Å –¥–∏—Å–∫–∞ –∏ –æ–±–Ω–æ–≤–∏–º ¬´–º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–µ¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ
              setTimeout(async () => {
                try {
                  const diskUrlUpdate = await getGoogleDiskLink(state.row);
                  if (diskUrlUpdate) {
                    await editMessageSafe(
                      chatId,
                      state.messageId,
                      formatCompletionMessage(completionData, diskUrlUpdate),
                      { disable_web_page_preview: false }
                    );
                  }
                } catch (e) {
                  logWarn('Error updating disk link:', e.message);
                }
              }, 180_000);

              // 6) –°–±—Ä–æ—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
              resetState(chatId);

              return res.sendStatus(200);
            }

            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π —Å—Ç–∞–¥–∏–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            return res.sendStatus(200);
          } catch (error) {
            logError('Webhook error (message state flow):', error.message);
            return res.sendStatus(500);
          }
        })();
      }

      /* ------------------------ –ö–æ–º–∞–Ω–¥–∞ /cancel –≤–Ω–µ —Å—Ç–µ–π—Ç–∞ ----------------------- */
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª /cancel –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî –ø—Ä–æ—Å—Ç–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç
      if (body?.message?.text === '/cancel') {
        const chatId = body.message.chat.id;
        await sendMessage(chatId, '‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.');
        return res.sendStatus(200);
      }

      // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –≤–µ—Ç–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ 200
      return res.sendStatus(200);
    } catch (e) {
      logError('Webhook outer error:', e.message);
      return res.sendStatus(500);
    }
  });
};

/* -------------------------------- –ö–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ --------------------------------

–°–≤–æ–¥–∫–∞ —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π, —á—Ç–æ–±—ã —É–ø—Ä–æ—Å—Ç–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É:
- –í–µ–∑–¥–µ normalizeUsername –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –∫–ª—é—á–µ–π –≤ userStorage.
- clearInlineKeyboard –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—á–∏ [] –≤ sendButtonsWithRetry (—ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–µ–µ).
- deleteMessageSafe –Ω–µ –ø–∞–¥–∞–µ—Ç –Ω–∞ "message to delete not found".
- –í–µ—Ç–∫–∞ executor: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è executorUsername + –ø—Ä–æ–≤–µ—Ä–∫–∞ userStorage.
- –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–∞–π–º–∞—É—Ç—ã —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
- –ó–∞—â–∏—Ç–∞ /cancel –Ω–∞ –ª—é–±–æ–π —Å—Ç–∞–¥–∏–∏ (–∏ –≤–Ω–µ —Å—Ç–µ–π—Ç–∞ ‚Äî –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç).
- –î–æ–ø. –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞ Render –ø—Ä–æ—â–µ –±—ã–ª–æ –ø–æ–Ω–∏–º–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π.

*/ 
```
